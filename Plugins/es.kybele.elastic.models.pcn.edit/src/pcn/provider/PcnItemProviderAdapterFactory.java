/**
 */
package pcn.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import pcn.util.PcnAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PcnItemProviderAdapterFactory extends PcnAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PcnItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNDiagramItemProvider pcnDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNDiagramAdapter() {
		if (pcnDiagramItemProvider == null) {
			pcnDiagramItemProvider = new PCNDiagramItemProvider(this);
		}

		return pcnDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNProcessEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNProcessEntityItemProvider pcnProcessEntityItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNProcessEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNProcessEntityAdapter() {
		if (pcnProcessEntityItemProvider == null) {
			pcnProcessEntityItemProvider = new PCNProcessEntityItemProvider(this);
		}

		return pcnProcessEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNReferenceItemProvider pcnReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNReferenceAdapter() {
		if (pcnReferenceItemProvider == null) {
			pcnReferenceItemProvider = new PCNReferenceItemProvider(this);
		}

		return pcnReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNStandardStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNStandardStepItemProvider pcnStandardStepItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNStandardStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNStandardStepAdapter() {
		if (pcnStandardStepItemProvider == null) {
			pcnStandardStepItemProvider = new PCNStandardStepItemProvider(this);
		}

		return pcnStandardStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNDoAndWaitStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNDoAndWaitStepItemProvider pcnDoAndWaitStepItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNDoAndWaitStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNDoAndWaitStepAdapter() {
		if (pcnDoAndWaitStepItemProvider == null) {
			pcnDoAndWaitStepItemProvider = new PCNDoAndWaitStepItemProvider(this);
		}

		return pcnDoAndWaitStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNWaitStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNWaitStepItemProvider pcnWaitStepItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNWaitStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNWaitStepAdapter() {
		if (pcnWaitStepItemProvider == null) {
			pcnWaitStepItemProvider = new PCNWaitStepItemProvider(this);
		}

		return pcnWaitStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNDecisionStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNDecisionStepItemProvider pcnDecisionStepItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNDecisionStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNDecisionStepAdapter() {
		if (pcnDecisionStepItemProvider == null) {
			pcnDecisionStepItemProvider = new PCNDecisionStepItemProvider(this);
		}

		return pcnDecisionStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNMonetaryTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNMonetaryTagItemProvider pcnMonetaryTagItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNMonetaryTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNMonetaryTagAdapter() {
		if (pcnMonetaryTagItemProvider == null) {
			pcnMonetaryTagItemProvider = new PCNMonetaryTagItemProvider(this);
		}

		return pcnMonetaryTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNMonetaryBenefit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNMonetaryBenefitItemProvider pcnMonetaryBenefitItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNMonetaryBenefit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNMonetaryBenefitAdapter() {
		if (pcnMonetaryBenefitItemProvider == null) {
			pcnMonetaryBenefitItemProvider = new PCNMonetaryBenefitItemProvider(this);
		}

		return pcnMonetaryBenefitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNMonetaryCost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNMonetaryCostItemProvider pcnMonetaryCostItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNMonetaryCost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNMonetaryCostAdapter() {
		if (pcnMonetaryCostItemProvider == null) {
			pcnMonetaryCostItemProvider = new PCNMonetaryCostItemProvider(this);
		}

		return pcnMonetaryCostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNNonMonetaryTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNNonMonetaryTagItemProvider pcnNonMonetaryTagItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNNonMonetaryTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNNonMonetaryTagAdapter() {
		if (pcnNonMonetaryTagItemProvider == null) {
			pcnNonMonetaryTagItemProvider = new PCNNonMonetaryTagItemProvider(this);
		}

		return pcnNonMonetaryTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNNonMonetaryBenefit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNNonMonetaryBenefitItemProvider pcnNonMonetaryBenefitItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNNonMonetaryBenefit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNNonMonetaryBenefitAdapter() {
		if (pcnNonMonetaryBenefitItemProvider == null) {
			pcnNonMonetaryBenefitItemProvider = new PCNNonMonetaryBenefitItemProvider(this);
		}

		return pcnNonMonetaryBenefitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNNonMonetaryCost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNNonMonetaryCostItemProvider pcnNonMonetaryCostItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNNonMonetaryCost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNNonMonetaryCostAdapter() {
		if (pcnNonMonetaryCostItemProvider == null) {
			pcnNonMonetaryCostItemProvider = new PCNNonMonetaryCostItemProvider(this);
		}

		return pcnNonMonetaryCostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNInnovationStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNInnovationStepItemProvider pcnInnovationStepItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNInnovationStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNInnovationStepAdapter() {
		if (pcnInnovationStepItemProvider == null) {
			pcnInnovationStepItemProvider = new PCNInnovationStepItemProvider(this);
		}

		return pcnInnovationStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNOutsourcedStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNOutsourcedStepItemProvider pcnOutsourcedStepItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNOutsourcedStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNOutsourcedStepAdapter() {
		if (pcnOutsourcedStepItemProvider == null) {
			pcnOutsourcedStepItemProvider = new PCNOutsourcedStepItemProvider(this);
		}

		return pcnOutsourcedStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNRegularProcessStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNRegularProcessStepItemProvider pcnRegularProcessStepItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNRegularProcessStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNRegularProcessStepAdapter() {
		if (pcnRegularProcessStepItemProvider == null) {
			pcnRegularProcessStepItemProvider = new PCNRegularProcessStepItemProvider(this);
		}

		return pcnRegularProcessStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNTextualTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNTextualTagItemProvider pcnTextualTagItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNTextualTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNTextualTagAdapter() {
		if (pcnTextualTagItemProvider == null) {
			pcnTextualTagItemProvider = new PCNTextualTagItemProvider(this);
		}

		return pcnTextualTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNDelayTimeTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNDelayTimeTagItemProvider pcnDelayTimeTagItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNDelayTimeTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNDelayTimeTagAdapter() {
		if (pcnDelayTimeTagItemProvider == null) {
			pcnDelayTimeTagItemProvider = new PCNDelayTimeTagItemProvider(this);
		}

		return pcnDelayTimeTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNProbabilitiesTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNProbabilitiesTagItemProvider pcnProbabilitiesTagItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNProbabilitiesTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNProbabilitiesTagAdapter() {
		if (pcnProbabilitiesTagItemProvider == null) {
			pcnProbabilitiesTagItemProvider = new PCNProbabilitiesTagItemProvider(this);
		}

		return pcnProbabilitiesTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcn.PCNSyncTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCNSyncTagItemProvider pcnSyncTagItemProvider;

	/**
	 * This creates an adapter for a {@link pcn.PCNSyncTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCNSyncTagAdapter() {
		if (pcnSyncTagItemProvider == null) {
			pcnSyncTagItemProvider = new PCNSyncTagItemProvider(this);
		}

		return pcnSyncTagItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (pcnDiagramItemProvider != null) pcnDiagramItemProvider.dispose();
		if (pcnProcessEntityItemProvider != null) pcnProcessEntityItemProvider.dispose();
		if (pcnReferenceItemProvider != null) pcnReferenceItemProvider.dispose();
		if (pcnStandardStepItemProvider != null) pcnStandardStepItemProvider.dispose();
		if (pcnDoAndWaitStepItemProvider != null) pcnDoAndWaitStepItemProvider.dispose();
		if (pcnWaitStepItemProvider != null) pcnWaitStepItemProvider.dispose();
		if (pcnDecisionStepItemProvider != null) pcnDecisionStepItemProvider.dispose();
		if (pcnMonetaryTagItemProvider != null) pcnMonetaryTagItemProvider.dispose();
		if (pcnMonetaryBenefitItemProvider != null) pcnMonetaryBenefitItemProvider.dispose();
		if (pcnMonetaryCostItemProvider != null) pcnMonetaryCostItemProvider.dispose();
		if (pcnNonMonetaryTagItemProvider != null) pcnNonMonetaryTagItemProvider.dispose();
		if (pcnNonMonetaryBenefitItemProvider != null) pcnNonMonetaryBenefitItemProvider.dispose();
		if (pcnNonMonetaryCostItemProvider != null) pcnNonMonetaryCostItemProvider.dispose();
		if (pcnInnovationStepItemProvider != null) pcnInnovationStepItemProvider.dispose();
		if (pcnOutsourcedStepItemProvider != null) pcnOutsourcedStepItemProvider.dispose();
		if (pcnRegularProcessStepItemProvider != null) pcnRegularProcessStepItemProvider.dispose();
		if (pcnTextualTagItemProvider != null) pcnTextualTagItemProvider.dispose();
		if (pcnDelayTimeTagItemProvider != null) pcnDelayTimeTagItemProvider.dispose();
		if (pcnProbabilitiesTagItemProvider != null) pcnProbabilitiesTagItemProvider.dispose();
		if (pcnSyncTagItemProvider != null) pcnSyncTagItemProvider.dispose();
	}

}
