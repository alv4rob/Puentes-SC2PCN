/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.xtext.smaC.util.SmaCAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SmaCItemProviderAdapterFactory extends SmaCAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SmaCItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.File} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileItemProvider fileItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.File}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileAdapter() {
		if (fileItemProvider == null) {
			fileItemProvider = new FileItemProvider(this);
		}

		return fileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Version} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VersionItemProvider versionItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Version}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVersionAdapter() {
		if (versionItemProvider == null) {
			versionItemProvider = new VersionItemProvider(this);
		}

		return versionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Library} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LibraryItemProvider libraryItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Library}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLibraryAdapter() {
		if (libraryItemProvider == null) {
			libraryItemProvider = new LibraryItemProvider(this);
		}

		return libraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Import} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportItemProvider importItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Import}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportAdapter() {
		if (importItemProvider == null) {
			importItemProvider = new ImportItemProvider(this);
		}

		return importItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Element} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementItemProvider elementItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Element}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementAdapter() {
		if (elementItemProvider == null) {
			elementItemProvider = new ElementItemProvider(this);
		}

		return elementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Interface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceItemProvider interfaceItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Interface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceAdapter() {
		if (interfaceItemProvider == null) {
			interfaceItemProvider = new InterfaceItemProvider(this);
		}

		return interfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.DeclarationFunctionInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclarationFunctionInterfaceItemProvider declarationFunctionInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.DeclarationFunctionInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclarationFunctionInterfaceAdapter() {
		if (declarationFunctionInterfaceItemProvider == null) {
			declarationFunctionInterfaceItemProvider = new DeclarationFunctionInterfaceItemProvider(this);
		}

		return declarationFunctionInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.DeclarationFunctionAbstractContract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclarationFunctionAbstractContractItemProvider declarationFunctionAbstractContractItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.DeclarationFunctionAbstractContract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclarationFunctionAbstractContractAdapter() {
		if (declarationFunctionAbstractContractItemProvider == null) {
			declarationFunctionAbstractContractItemProvider = new DeclarationFunctionAbstractContractItemProvider(this);
		}

		return declarationFunctionAbstractContractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.AbstractContract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractContractItemProvider abstractContractItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.AbstractContract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractContractAdapter() {
		if (abstractContractItemProvider == null) {
			abstractContractItemProvider = new AbstractContractItemProvider(this);
		}

		return abstractContractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Contract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContractItemProvider contractItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Contract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContractAdapter() {
		if (contractItemProvider == null) {
			contractItemProvider = new ContractItemProvider(this);
		}

		return contractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Constructor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstructorItemProvider constructorItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Constructor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstructorAdapter() {
		if (constructorItemProvider == null) {
			constructorItemProvider = new ConstructorItemProvider(this);
		}

		return constructorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Error} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ErrorItemProvider errorItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Error}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createErrorAdapter() {
		if (errorItemProvider == null) {
			errorItemProvider = new ErrorItemProvider(this);
		}

		return errorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Modifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModifierItemProvider modifierItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Modifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModifierAdapter() {
		if (modifierItemProvider == null) {
			modifierItemProvider = new ModifierItemProvider(this);
		}

		return modifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.RestrictionClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestrictionClauseItemProvider restrictionClauseItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.RestrictionClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRestrictionClauseAdapter() {
		if (restrictionClauseItemProvider == null) {
			restrictionClauseItemProvider = new RestrictionClauseItemProvider(this);
		}

		return restrictionClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Restriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestrictionItemProvider restrictionItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Restriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRestrictionAdapter() {
		if (restrictionItemProvider == null) {
			restrictionItemProvider = new RestrictionItemProvider(this);
		}

		return restrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.RestrictionGas} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestrictionGasItemProvider restrictionGasItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.RestrictionGas}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRestrictionGasAdapter() {
		if (restrictionGasItemProvider == null) {
			restrictionGasItemProvider = new RestrictionGasItemProvider(this);
		}

		return restrictionGasItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Assert} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssertItemProvider assertItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Assert}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssertAdapter() {
		if (assertItemProvider == null) {
			assertItemProvider = new AssertItemProvider(this);
		}

		return assertItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Mapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingItemProvider mappingItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Mapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingAdapter() {
		if (mappingItemProvider == null) {
			mappingItemProvider = new MappingItemProvider(this);
		}

		return mappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.MappingDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingDeclarationItemProvider mappingDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.MappingDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingDeclarationAdapter() {
		if (mappingDeclarationItemProvider == null) {
			mappingDeclarationItemProvider = new MappingDeclarationItemProvider(this);
		}

		return mappingDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.PersonalizedStruct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonalizedStructItemProvider personalizedStructItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.PersonalizedStruct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonalizedStructAdapter() {
		if (personalizedStructItemProvider == null) {
			personalizedStructItemProvider = new PersonalizedStructItemProvider(this);
		}

		return personalizedStructItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.User} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserItemProvider userItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.User}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserAdapter() {
		if (userItemProvider == null) {
			userItemProvider = new UserItemProvider(this);
		}

		return userItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Company} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompanyItemProvider companyItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Company}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompanyAdapter() {
		if (companyItemProvider == null) {
			companyItemProvider = new CompanyItemProvider(this);
		}

		return companyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Enum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumItemProvider enumItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Enum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumAdapter() {
		if (enumItemProvider == null) {
			enumItemProvider = new EnumItemProvider(this);
		}

		return enumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.OverrideModifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OverrideModifierItemProvider overrideModifierItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.OverrideModifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOverrideModifierAdapter() {
		if (overrideModifierItemProvider == null) {
			overrideModifierItemProvider = new OverrideModifierItemProvider(this);
		}

		return overrideModifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Properties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertiesItemProvider propertiesItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Properties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertiesAdapter() {
		if (propertiesItemProvider == null) {
			propertiesItemProvider = new PropertiesItemProvider(this);
		}

		return propertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.PropertyString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyStringItemProvider propertyStringItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.PropertyString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyStringAdapter() {
		if (propertyStringItemProvider == null) {
			propertyStringItemProvider = new PropertyStringItemProvider(this);
		}

		return propertyStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.PropertyInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyIntegerItemProvider propertyIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.PropertyInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyIntegerAdapter() {
		if (propertyIntegerItemProvider == null) {
			propertyIntegerItemProvider = new PropertyIntegerItemProvider(this);
		}

		return propertyIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.PropertyFloat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyFloatItemProvider propertyFloatItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.PropertyFloat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyFloatAdapter() {
		if (propertyFloatItemProvider == null) {
			propertyFloatItemProvider = new PropertyFloatItemProvider(this);
		}

		return propertyFloatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.PropertyUInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyUIntegerItemProvider propertyUIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.PropertyUInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyUIntegerAdapter() {
		if (propertyUIntegerItemProvider == null) {
			propertyUIntegerItemProvider = new PropertyUIntegerItemProvider(this);
		}

		return propertyUIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.PropertyBoolean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyBooleanItemProvider propertyBooleanItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.PropertyBoolean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyBooleanAdapter() {
		if (propertyBooleanItemProvider == null) {
			propertyBooleanItemProvider = new PropertyBooleanItemProvider(this);
		}

		return propertyBooleanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.PropertyAddress} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyAddressItemProvider propertyAddressItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.PropertyAddress}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAddressAdapter() {
		if (propertyAddressItemProvider == null) {
			propertyAddressItemProvider = new PropertyAddressItemProvider(this);
		}

		return propertyAddressItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.PropertyIdentifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyIdentifierItemProvider propertyIdentifierItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.PropertyIdentifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyIdentifierAdapter() {
		if (propertyIdentifierItemProvider == null) {
			propertyIdentifierItemProvider = new PropertyIdentifierItemProvider(this);
		}

		return propertyIdentifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.PropertyUser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyUserItemProvider propertyUserItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.PropertyUser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyUserAdapter() {
		if (propertyUserItemProvider == null) {
			propertyUserItemProvider = new PropertyUserItemProvider(this);
		}

		return propertyUserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.PropertyCompany} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyCompanyItemProvider propertyCompanyItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.PropertyCompany}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyCompanyAdapter() {
		if (propertyCompanyItemProvider == null) {
			propertyCompanyItemProvider = new PropertyCompanyItemProvider(this);
		}

		return propertyCompanyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.PropertyBytes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyBytesItemProvider propertyBytesItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.PropertyBytes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyBytesAdapter() {
		if (propertyBytesItemProvider == null) {
			propertyBytesItemProvider = new PropertyBytesItemProvider(this);
		}

		return propertyBytesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.InputParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputParamItemProvider inputParamItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.InputParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputParamAdapter() {
		if (inputParamItemProvider == null) {
			inputParamItemProvider = new InputParamItemProvider(this);
		}

		return inputParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.OutputParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputParamItemProvider outputParamItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.OutputParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputParamAdapter() {
		if (outputParamItemProvider == null) {
			outputParamItemProvider = new OutputParamItemProvider(this);
		}

		return outputParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Clause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClauseItemProvider clauseItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Clause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClauseAdapter() {
		if (clauseItemProvider == null) {
			clauseItemProvider = new ClauseItemProvider(this);
		}

		return clauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.UnDeterminedLoop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnDeterminedLoopItemProvider unDeterminedLoopItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.UnDeterminedLoop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnDeterminedLoopAdapter() {
		if (unDeterminedLoopItemProvider == null) {
			unDeterminedLoopItemProvider = new UnDeterminedLoopItemProvider(this);
		}

		return unDeterminedLoopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.WhileLoop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhileLoopItemProvider whileLoopItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.WhileLoop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhileLoopAdapter() {
		if (whileLoopItemProvider == null) {
			whileLoopItemProvider = new WhileLoopItemProvider(this);
		}

		return whileLoopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.ForLoop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForLoopItemProvider forLoopItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.ForLoop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForLoopAdapter() {
		if (forLoopItemProvider == null) {
			forLoopItemProvider = new ForLoopItemProvider(this);
		}

		return forLoopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.smaC.DoWhileLoop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoWhileLoopItemProvider doWhileLoopItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.smaC.DoWhileLoop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoWhileLoopAdapter() {
		if (doWhileLoopItemProvider == null) {
			doWhileLoopItemProvider = new DoWhileLoopItemProvider(this);
		}

		return doWhileLoopItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (fileItemProvider != null) fileItemProvider.dispose();
		if (versionItemProvider != null) versionItemProvider.dispose();
		if (libraryItemProvider != null) libraryItemProvider.dispose();
		if (importItemProvider != null) importItemProvider.dispose();
		if (elementItemProvider != null) elementItemProvider.dispose();
		if (interfaceItemProvider != null) interfaceItemProvider.dispose();
		if (declarationFunctionInterfaceItemProvider != null) declarationFunctionInterfaceItemProvider.dispose();
		if (declarationFunctionAbstractContractItemProvider != null) declarationFunctionAbstractContractItemProvider.dispose();
		if (abstractContractItemProvider != null) abstractContractItemProvider.dispose();
		if (contractItemProvider != null) contractItemProvider.dispose();
		if (constructorItemProvider != null) constructorItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (errorItemProvider != null) errorItemProvider.dispose();
		if (modifierItemProvider != null) modifierItemProvider.dispose();
		if (restrictionClauseItemProvider != null) restrictionClauseItemProvider.dispose();
		if (restrictionItemProvider != null) restrictionItemProvider.dispose();
		if (restrictionGasItemProvider != null) restrictionGasItemProvider.dispose();
		if (assertItemProvider != null) assertItemProvider.dispose();
		if (mappingItemProvider != null) mappingItemProvider.dispose();
		if (mappingDeclarationItemProvider != null) mappingDeclarationItemProvider.dispose();
		if (personalizedStructItemProvider != null) personalizedStructItemProvider.dispose();
		if (userItemProvider != null) userItemProvider.dispose();
		if (companyItemProvider != null) companyItemProvider.dispose();
		if (enumItemProvider != null) enumItemProvider.dispose();
		if (overrideModifierItemProvider != null) overrideModifierItemProvider.dispose();
		if (propertiesItemProvider != null) propertiesItemProvider.dispose();
		if (propertyStringItemProvider != null) propertyStringItemProvider.dispose();
		if (propertyIntegerItemProvider != null) propertyIntegerItemProvider.dispose();
		if (propertyFloatItemProvider != null) propertyFloatItemProvider.dispose();
		if (propertyUIntegerItemProvider != null) propertyUIntegerItemProvider.dispose();
		if (propertyBooleanItemProvider != null) propertyBooleanItemProvider.dispose();
		if (propertyAddressItemProvider != null) propertyAddressItemProvider.dispose();
		if (propertyIdentifierItemProvider != null) propertyIdentifierItemProvider.dispose();
		if (propertyUserItemProvider != null) propertyUserItemProvider.dispose();
		if (propertyCompanyItemProvider != null) propertyCompanyItemProvider.dispose();
		if (propertyBytesItemProvider != null) propertyBytesItemProvider.dispose();
		if (inputParamItemProvider != null) inputParamItemProvider.dispose();
		if (outputParamItemProvider != null) outputParamItemProvider.dispose();
		if (clauseItemProvider != null) clauseItemProvider.dispose();
		if (conditionItemProvider != null) conditionItemProvider.dispose();
		if (unDeterminedLoopItemProvider != null) unDeterminedLoopItemProvider.dispose();
		if (whileLoopItemProvider != null) whileLoopItemProvider.dispose();
		if (forLoopItemProvider != null) forLoopItemProvider.dispose();
		if (doWhileLoopItemProvider != null) doWhileLoopItemProvider.dispose();
	}

}
