/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.smaC.DeclarationFunctionAbstractContract;
import org.xtext.smaC.InputParam;
import org.xtext.smaC.OutputParam;
import org.xtext.smaC.SmaCPackage;
import org.xtext.smaC.Visibility;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Declaration Function Abstract Contract</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaC.impl.DeclarationFunctionAbstractContractImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.DeclarationFunctionAbstractContractImpl#getInputParams <em>Input Params</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.DeclarationFunctionAbstractContractImpl#getVisibility <em>Visibility</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.DeclarationFunctionAbstractContractImpl#getModifier <em>Modifier</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.DeclarationFunctionAbstractContractImpl#getVirtual <em>Virtual</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.DeclarationFunctionAbstractContractImpl#getOutputParams <em>Output Params</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DeclarationFunctionAbstractContractImpl extends MinimalEObjectImpl.Container implements DeclarationFunctionAbstractContract
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getInputParams() <em>Input Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputParams()
   * @generated
   * @ordered
   */
  protected EList<InputParam> inputParams;

  /**
   * The default value of the '{@link #getVisibility() <em>Visibility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisibility()
   * @generated
   * @ordered
   */
  protected static final Visibility VISIBILITY_EDEFAULT = Visibility.PUBLIC;

  /**
   * The cached value of the '{@link #getVisibility() <em>Visibility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisibility()
   * @generated
   * @ordered
   */
  protected Visibility visibility = VISIBILITY_EDEFAULT;

  /**
   * The default value of the '{@link #getModifier() <em>Modifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModifier()
   * @generated
   * @ordered
   */
  protected static final String MODIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getModifier() <em>Modifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModifier()
   * @generated
   * @ordered
   */
  protected String modifier = MODIFIER_EDEFAULT;

  /**
   * The default value of the '{@link #getVirtual() <em>Virtual</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVirtual()
   * @generated
   * @ordered
   */
  protected static final String VIRTUAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVirtual() <em>Virtual</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVirtual()
   * @generated
   * @ordered
   */
  protected String virtual = VIRTUAL_EDEFAULT;

  /**
   * The cached value of the '{@link #getOutputParams() <em>Output Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutputParams()
   * @generated
   * @ordered
   */
  protected EList<OutputParam> outputParams;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeclarationFunctionAbstractContractImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmaCPackage.Literals.DECLARATION_FUNCTION_ABSTRACT_CONTRACT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InputParam> getInputParams()
  {
    if (inputParams == null)
    {
      inputParams = new EObjectContainmentEList<InputParam>(InputParam.class, this, SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__INPUT_PARAMS);
    }
    return inputParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Visibility getVisibility()
  {
    return visibility;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVisibility(Visibility newVisibility)
  {
    Visibility oldVisibility = visibility;
    visibility = newVisibility == null ? VISIBILITY_EDEFAULT : newVisibility;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__VISIBILITY, oldVisibility, visibility));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getModifier()
  {
    return modifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setModifier(String newModifier)
  {
    String oldModifier = modifier;
    modifier = newModifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__MODIFIER, oldModifier, modifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVirtual()
  {
    return virtual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVirtual(String newVirtual)
  {
    String oldVirtual = virtual;
    virtual = newVirtual;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__VIRTUAL, oldVirtual, virtual));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<OutputParam> getOutputParams()
  {
    if (outputParams == null)
    {
      outputParams = new EObjectContainmentEList<OutputParam>(OutputParam.class, this, SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__OUTPUT_PARAMS);
    }
    return outputParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__INPUT_PARAMS:
        return ((InternalEList<?>)getInputParams()).basicRemove(otherEnd, msgs);
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__OUTPUT_PARAMS:
        return ((InternalEList<?>)getOutputParams()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__NAME:
        return getName();
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__INPUT_PARAMS:
        return getInputParams();
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__VISIBILITY:
        return getVisibility();
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__MODIFIER:
        return getModifier();
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__VIRTUAL:
        return getVirtual();
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__OUTPUT_PARAMS:
        return getOutputParams();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__NAME:
        setName((String)newValue);
        return;
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__INPUT_PARAMS:
        getInputParams().clear();
        getInputParams().addAll((Collection<? extends InputParam>)newValue);
        return;
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__VISIBILITY:
        setVisibility((Visibility)newValue);
        return;
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__MODIFIER:
        setModifier((String)newValue);
        return;
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__VIRTUAL:
        setVirtual((String)newValue);
        return;
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__OUTPUT_PARAMS:
        getOutputParams().clear();
        getOutputParams().addAll((Collection<? extends OutputParam>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__INPUT_PARAMS:
        getInputParams().clear();
        return;
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__VISIBILITY:
        setVisibility(VISIBILITY_EDEFAULT);
        return;
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__MODIFIER:
        setModifier(MODIFIER_EDEFAULT);
        return;
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__VIRTUAL:
        setVirtual(VIRTUAL_EDEFAULT);
        return;
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__OUTPUT_PARAMS:
        getOutputParams().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__INPUT_PARAMS:
        return inputParams != null && !inputParams.isEmpty();
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__VISIBILITY:
        return visibility != VISIBILITY_EDEFAULT;
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__MODIFIER:
        return MODIFIER_EDEFAULT == null ? modifier != null : !MODIFIER_EDEFAULT.equals(modifier);
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__VIRTUAL:
        return VIRTUAL_EDEFAULT == null ? virtual != null : !VIRTUAL_EDEFAULT.equals(virtual);
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT__OUTPUT_PARAMS:
        return outputParams != null && !outputParams.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", visibility: ");
    result.append(visibility);
    result.append(", modifier: ");
    result.append(modifier);
    result.append(", virtual: ");
    result.append(virtual);
    result.append(')');
    return result.toString();
  }

} //DeclarationFunctionAbstractContractImpl
