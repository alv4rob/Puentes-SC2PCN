/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.smaC.Clause;
import org.xtext.smaC.Company;
import org.xtext.smaC.Constructor;
import org.xtext.smaC.Contract;
import org.xtext.smaC.Element;
import org.xtext.smaC.Event;
import org.xtext.smaC.Library;
import org.xtext.smaC.Mapping;
import org.xtext.smaC.Modifier;
import org.xtext.smaC.PersonalizedStruct;
import org.xtext.smaC.Properties;
import org.xtext.smaC.SmaCPackage;
import org.xtext.smaC.User;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Contract</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaC.impl.ContractImpl#getSuperType <em>Super Type</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ContractImpl#getLocalEnumerators <em>Local Enumerators</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ContractImpl#getLocalProperties <em>Local Properties</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ContractImpl#getLocalMappingProperties <em>Local Mapping Properties</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ContractImpl#getStructs <em>Structs</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ContractImpl#getStructUser <em>Struct User</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ContractImpl#getStructCompany <em>Struct Company</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ContractImpl#getLibraries <em>Libraries</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ContractImpl#getConstructors <em>Constructors</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ContractImpl#getModifiers <em>Modifiers</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ContractImpl#getEvents <em>Events</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ContractImpl#getErrors <em>Errors</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ContractImpl#getClauses <em>Clauses</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ContractImpl extends ElementImpl implements Contract
{
  /**
   * The cached value of the '{@link #getSuperType() <em>Super Type</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuperType()
   * @generated
   * @ordered
   */
  protected EList<Element> superType;

  /**
   * The cached value of the '{@link #getLocalEnumerators() <em>Local Enumerators</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocalEnumerators()
   * @generated
   * @ordered
   */
  protected EList<org.xtext.smaC.Enum> localEnumerators;

  /**
   * The cached value of the '{@link #getLocalProperties() <em>Local Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocalProperties()
   * @generated
   * @ordered
   */
  protected EList<Properties> localProperties;

  /**
   * The cached value of the '{@link #getLocalMappingProperties() <em>Local Mapping Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocalMappingProperties()
   * @generated
   * @ordered
   */
  protected EList<Mapping> localMappingProperties;

  /**
   * The cached value of the '{@link #getStructs() <em>Structs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStructs()
   * @generated
   * @ordered
   */
  protected EList<PersonalizedStruct> structs;

  /**
   * The cached value of the '{@link #getStructUser() <em>Struct User</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStructUser()
   * @generated
   * @ordered
   */
  protected User structUser;

  /**
   * The cached value of the '{@link #getStructCompany() <em>Struct Company</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStructCompany()
   * @generated
   * @ordered
   */
  protected Company structCompany;

  /**
   * The cached value of the '{@link #getLibraries() <em>Libraries</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLibraries()
   * @generated
   * @ordered
   */
  protected EList<Library> libraries;

  /**
   * The cached value of the '{@link #getConstructors() <em>Constructors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstructors()
   * @generated
   * @ordered
   */
  protected EList<Constructor> constructors;

  /**
   * The cached value of the '{@link #getModifiers() <em>Modifiers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModifiers()
   * @generated
   * @ordered
   */
  protected EList<Modifier> modifiers;

  /**
   * The cached value of the '{@link #getEvents() <em>Events</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvents()
   * @generated
   * @ordered
   */
  protected EList<Event> events;

  /**
   * The cached value of the '{@link #getErrors() <em>Errors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getErrors()
   * @generated
   * @ordered
   */
  protected EList<org.xtext.smaC.Error> errors;

  /**
   * The cached value of the '{@link #getClauses() <em>Clauses</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClauses()
   * @generated
   * @ordered
   */
  protected EList<Clause> clauses;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContractImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmaCPackage.Literals.CONTRACT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Element> getSuperType()
  {
    if (superType == null)
    {
      superType = new EObjectResolvingEList<Element>(Element.class, this, SmaCPackage.CONTRACT__SUPER_TYPE);
    }
    return superType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<org.xtext.smaC.Enum> getLocalEnumerators()
  {
    if (localEnumerators == null)
    {
      localEnumerators = new EObjectContainmentEList<org.xtext.smaC.Enum>(org.xtext.smaC.Enum.class, this, SmaCPackage.CONTRACT__LOCAL_ENUMERATORS);
    }
    return localEnumerators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Properties> getLocalProperties()
  {
    if (localProperties == null)
    {
      localProperties = new EObjectContainmentEList<Properties>(Properties.class, this, SmaCPackage.CONTRACT__LOCAL_PROPERTIES);
    }
    return localProperties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Mapping> getLocalMappingProperties()
  {
    if (localMappingProperties == null)
    {
      localMappingProperties = new EObjectContainmentEList<Mapping>(Mapping.class, this, SmaCPackage.CONTRACT__LOCAL_MAPPING_PROPERTIES);
    }
    return localMappingProperties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PersonalizedStruct> getStructs()
  {
    if (structs == null)
    {
      structs = new EObjectContainmentEList<PersonalizedStruct>(PersonalizedStruct.class, this, SmaCPackage.CONTRACT__STRUCTS);
    }
    return structs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public User getStructUser()
  {
    return structUser;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStructUser(User newStructUser, NotificationChain msgs)
  {
    User oldStructUser = structUser;
    structUser = newStructUser;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCPackage.CONTRACT__STRUCT_USER, oldStructUser, newStructUser);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStructUser(User newStructUser)
  {
    if (newStructUser != structUser)
    {
      NotificationChain msgs = null;
      if (structUser != null)
        msgs = ((InternalEObject)structUser).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCPackage.CONTRACT__STRUCT_USER, null, msgs);
      if (newStructUser != null)
        msgs = ((InternalEObject)newStructUser).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCPackage.CONTRACT__STRUCT_USER, null, msgs);
      msgs = basicSetStructUser(newStructUser, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.CONTRACT__STRUCT_USER, newStructUser, newStructUser));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Company getStructCompany()
  {
    return structCompany;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStructCompany(Company newStructCompany, NotificationChain msgs)
  {
    Company oldStructCompany = structCompany;
    structCompany = newStructCompany;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCPackage.CONTRACT__STRUCT_COMPANY, oldStructCompany, newStructCompany);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStructCompany(Company newStructCompany)
  {
    if (newStructCompany != structCompany)
    {
      NotificationChain msgs = null;
      if (structCompany != null)
        msgs = ((InternalEObject)structCompany).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCPackage.CONTRACT__STRUCT_COMPANY, null, msgs);
      if (newStructCompany != null)
        msgs = ((InternalEObject)newStructCompany).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCPackage.CONTRACT__STRUCT_COMPANY, null, msgs);
      msgs = basicSetStructCompany(newStructCompany, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.CONTRACT__STRUCT_COMPANY, newStructCompany, newStructCompany));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Library> getLibraries()
  {
    if (libraries == null)
    {
      libraries = new EObjectResolvingEList<Library>(Library.class, this, SmaCPackage.CONTRACT__LIBRARIES);
    }
    return libraries;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Constructor> getConstructors()
  {
    if (constructors == null)
    {
      constructors = new EObjectContainmentEList<Constructor>(Constructor.class, this, SmaCPackage.CONTRACT__CONSTRUCTORS);
    }
    return constructors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Modifier> getModifiers()
  {
    if (modifiers == null)
    {
      modifiers = new EObjectContainmentEList<Modifier>(Modifier.class, this, SmaCPackage.CONTRACT__MODIFIERS);
    }
    return modifiers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Event> getEvents()
  {
    if (events == null)
    {
      events = new EObjectContainmentEList<Event>(Event.class, this, SmaCPackage.CONTRACT__EVENTS);
    }
    return events;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<org.xtext.smaC.Error> getErrors()
  {
    if (errors == null)
    {
      errors = new EObjectContainmentEList<org.xtext.smaC.Error>(org.xtext.smaC.Error.class, this, SmaCPackage.CONTRACT__ERRORS);
    }
    return errors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Clause> getClauses()
  {
    if (clauses == null)
    {
      clauses = new EObjectContainmentEList<Clause>(Clause.class, this, SmaCPackage.CONTRACT__CLAUSES);
    }
    return clauses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SmaCPackage.CONTRACT__LOCAL_ENUMERATORS:
        return ((InternalEList<?>)getLocalEnumerators()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CONTRACT__LOCAL_PROPERTIES:
        return ((InternalEList<?>)getLocalProperties()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CONTRACT__LOCAL_MAPPING_PROPERTIES:
        return ((InternalEList<?>)getLocalMappingProperties()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CONTRACT__STRUCTS:
        return ((InternalEList<?>)getStructs()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CONTRACT__STRUCT_USER:
        return basicSetStructUser(null, msgs);
      case SmaCPackage.CONTRACT__STRUCT_COMPANY:
        return basicSetStructCompany(null, msgs);
      case SmaCPackage.CONTRACT__CONSTRUCTORS:
        return ((InternalEList<?>)getConstructors()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CONTRACT__MODIFIERS:
        return ((InternalEList<?>)getModifiers()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CONTRACT__EVENTS:
        return ((InternalEList<?>)getEvents()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CONTRACT__ERRORS:
        return ((InternalEList<?>)getErrors()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CONTRACT__CLAUSES:
        return ((InternalEList<?>)getClauses()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmaCPackage.CONTRACT__SUPER_TYPE:
        return getSuperType();
      case SmaCPackage.CONTRACT__LOCAL_ENUMERATORS:
        return getLocalEnumerators();
      case SmaCPackage.CONTRACT__LOCAL_PROPERTIES:
        return getLocalProperties();
      case SmaCPackage.CONTRACT__LOCAL_MAPPING_PROPERTIES:
        return getLocalMappingProperties();
      case SmaCPackage.CONTRACT__STRUCTS:
        return getStructs();
      case SmaCPackage.CONTRACT__STRUCT_USER:
        return getStructUser();
      case SmaCPackage.CONTRACT__STRUCT_COMPANY:
        return getStructCompany();
      case SmaCPackage.CONTRACT__LIBRARIES:
        return getLibraries();
      case SmaCPackage.CONTRACT__CONSTRUCTORS:
        return getConstructors();
      case SmaCPackage.CONTRACT__MODIFIERS:
        return getModifiers();
      case SmaCPackage.CONTRACT__EVENTS:
        return getEvents();
      case SmaCPackage.CONTRACT__ERRORS:
        return getErrors();
      case SmaCPackage.CONTRACT__CLAUSES:
        return getClauses();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmaCPackage.CONTRACT__SUPER_TYPE:
        getSuperType().clear();
        getSuperType().addAll((Collection<? extends Element>)newValue);
        return;
      case SmaCPackage.CONTRACT__LOCAL_ENUMERATORS:
        getLocalEnumerators().clear();
        getLocalEnumerators().addAll((Collection<? extends org.xtext.smaC.Enum>)newValue);
        return;
      case SmaCPackage.CONTRACT__LOCAL_PROPERTIES:
        getLocalProperties().clear();
        getLocalProperties().addAll((Collection<? extends Properties>)newValue);
        return;
      case SmaCPackage.CONTRACT__LOCAL_MAPPING_PROPERTIES:
        getLocalMappingProperties().clear();
        getLocalMappingProperties().addAll((Collection<? extends Mapping>)newValue);
        return;
      case SmaCPackage.CONTRACT__STRUCTS:
        getStructs().clear();
        getStructs().addAll((Collection<? extends PersonalizedStruct>)newValue);
        return;
      case SmaCPackage.CONTRACT__STRUCT_USER:
        setStructUser((User)newValue);
        return;
      case SmaCPackage.CONTRACT__STRUCT_COMPANY:
        setStructCompany((Company)newValue);
        return;
      case SmaCPackage.CONTRACT__LIBRARIES:
        getLibraries().clear();
        getLibraries().addAll((Collection<? extends Library>)newValue);
        return;
      case SmaCPackage.CONTRACT__CONSTRUCTORS:
        getConstructors().clear();
        getConstructors().addAll((Collection<? extends Constructor>)newValue);
        return;
      case SmaCPackage.CONTRACT__MODIFIERS:
        getModifiers().clear();
        getModifiers().addAll((Collection<? extends Modifier>)newValue);
        return;
      case SmaCPackage.CONTRACT__EVENTS:
        getEvents().clear();
        getEvents().addAll((Collection<? extends Event>)newValue);
        return;
      case SmaCPackage.CONTRACT__ERRORS:
        getErrors().clear();
        getErrors().addAll((Collection<? extends org.xtext.smaC.Error>)newValue);
        return;
      case SmaCPackage.CONTRACT__CLAUSES:
        getClauses().clear();
        getClauses().addAll((Collection<? extends Clause>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.CONTRACT__SUPER_TYPE:
        getSuperType().clear();
        return;
      case SmaCPackage.CONTRACT__LOCAL_ENUMERATORS:
        getLocalEnumerators().clear();
        return;
      case SmaCPackage.CONTRACT__LOCAL_PROPERTIES:
        getLocalProperties().clear();
        return;
      case SmaCPackage.CONTRACT__LOCAL_MAPPING_PROPERTIES:
        getLocalMappingProperties().clear();
        return;
      case SmaCPackage.CONTRACT__STRUCTS:
        getStructs().clear();
        return;
      case SmaCPackage.CONTRACT__STRUCT_USER:
        setStructUser((User)null);
        return;
      case SmaCPackage.CONTRACT__STRUCT_COMPANY:
        setStructCompany((Company)null);
        return;
      case SmaCPackage.CONTRACT__LIBRARIES:
        getLibraries().clear();
        return;
      case SmaCPackage.CONTRACT__CONSTRUCTORS:
        getConstructors().clear();
        return;
      case SmaCPackage.CONTRACT__MODIFIERS:
        getModifiers().clear();
        return;
      case SmaCPackage.CONTRACT__EVENTS:
        getEvents().clear();
        return;
      case SmaCPackage.CONTRACT__ERRORS:
        getErrors().clear();
        return;
      case SmaCPackage.CONTRACT__CLAUSES:
        getClauses().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.CONTRACT__SUPER_TYPE:
        return superType != null && !superType.isEmpty();
      case SmaCPackage.CONTRACT__LOCAL_ENUMERATORS:
        return localEnumerators != null && !localEnumerators.isEmpty();
      case SmaCPackage.CONTRACT__LOCAL_PROPERTIES:
        return localProperties != null && !localProperties.isEmpty();
      case SmaCPackage.CONTRACT__LOCAL_MAPPING_PROPERTIES:
        return localMappingProperties != null && !localMappingProperties.isEmpty();
      case SmaCPackage.CONTRACT__STRUCTS:
        return structs != null && !structs.isEmpty();
      case SmaCPackage.CONTRACT__STRUCT_USER:
        return structUser != null;
      case SmaCPackage.CONTRACT__STRUCT_COMPANY:
        return structCompany != null;
      case SmaCPackage.CONTRACT__LIBRARIES:
        return libraries != null && !libraries.isEmpty();
      case SmaCPackage.CONTRACT__CONSTRUCTORS:
        return constructors != null && !constructors.isEmpty();
      case SmaCPackage.CONTRACT__MODIFIERS:
        return modifiers != null && !modifiers.isEmpty();
      case SmaCPackage.CONTRACT__EVENTS:
        return events != null && !events.isEmpty();
      case SmaCPackage.CONTRACT__ERRORS:
        return errors != null && !errors.isEmpty();
      case SmaCPackage.CONTRACT__CLAUSES:
        return clauses != null && !clauses.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ContractImpl
