/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.smaC.AbstractContract;
import org.xtext.smaC.DeclarationFunctionAbstractContract;
import org.xtext.smaC.Element;
import org.xtext.smaC.Event;
import org.xtext.smaC.Modifier;
import org.xtext.smaC.SmaCPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Abstract Contract</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaC.impl.AbstractContractImpl#getSuperType <em>Super Type</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.AbstractContractImpl#getModifiers <em>Modifiers</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.AbstractContractImpl#getEvents <em>Events</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.AbstractContractImpl#getErrors <em>Errors</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.AbstractContractImpl#getClauses <em>Clauses</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AbstractContractImpl extends ElementImpl implements AbstractContract
{
  /**
   * The cached value of the '{@link #getSuperType() <em>Super Type</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuperType()
   * @generated
   * @ordered
   */
  protected EList<Element> superType;

  /**
   * The cached value of the '{@link #getModifiers() <em>Modifiers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModifiers()
   * @generated
   * @ordered
   */
  protected EList<Modifier> modifiers;

  /**
   * The cached value of the '{@link #getEvents() <em>Events</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvents()
   * @generated
   * @ordered
   */
  protected EList<Event> events;

  /**
   * The cached value of the '{@link #getErrors() <em>Errors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getErrors()
   * @generated
   * @ordered
   */
  protected EList<org.xtext.smaC.Error> errors;

  /**
   * The cached value of the '{@link #getClauses() <em>Clauses</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClauses()
   * @generated
   * @ordered
   */
  protected EList<DeclarationFunctionAbstractContract> clauses;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AbstractContractImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmaCPackage.Literals.ABSTRACT_CONTRACT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Element> getSuperType()
  {
    if (superType == null)
    {
      superType = new EObjectResolvingEList<Element>(Element.class, this, SmaCPackage.ABSTRACT_CONTRACT__SUPER_TYPE);
    }
    return superType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Modifier> getModifiers()
  {
    if (modifiers == null)
    {
      modifiers = new EObjectContainmentEList<Modifier>(Modifier.class, this, SmaCPackage.ABSTRACT_CONTRACT__MODIFIERS);
    }
    return modifiers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Event> getEvents()
  {
    if (events == null)
    {
      events = new EObjectContainmentEList<Event>(Event.class, this, SmaCPackage.ABSTRACT_CONTRACT__EVENTS);
    }
    return events;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<org.xtext.smaC.Error> getErrors()
  {
    if (errors == null)
    {
      errors = new EObjectContainmentEList<org.xtext.smaC.Error>(org.xtext.smaC.Error.class, this, SmaCPackage.ABSTRACT_CONTRACT__ERRORS);
    }
    return errors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DeclarationFunctionAbstractContract> getClauses()
  {
    if (clauses == null)
    {
      clauses = new EObjectContainmentEList<DeclarationFunctionAbstractContract>(DeclarationFunctionAbstractContract.class, this, SmaCPackage.ABSTRACT_CONTRACT__CLAUSES);
    }
    return clauses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SmaCPackage.ABSTRACT_CONTRACT__MODIFIERS:
        return ((InternalEList<?>)getModifiers()).basicRemove(otherEnd, msgs);
      case SmaCPackage.ABSTRACT_CONTRACT__EVENTS:
        return ((InternalEList<?>)getEvents()).basicRemove(otherEnd, msgs);
      case SmaCPackage.ABSTRACT_CONTRACT__ERRORS:
        return ((InternalEList<?>)getErrors()).basicRemove(otherEnd, msgs);
      case SmaCPackage.ABSTRACT_CONTRACT__CLAUSES:
        return ((InternalEList<?>)getClauses()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmaCPackage.ABSTRACT_CONTRACT__SUPER_TYPE:
        return getSuperType();
      case SmaCPackage.ABSTRACT_CONTRACT__MODIFIERS:
        return getModifiers();
      case SmaCPackage.ABSTRACT_CONTRACT__EVENTS:
        return getEvents();
      case SmaCPackage.ABSTRACT_CONTRACT__ERRORS:
        return getErrors();
      case SmaCPackage.ABSTRACT_CONTRACT__CLAUSES:
        return getClauses();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmaCPackage.ABSTRACT_CONTRACT__SUPER_TYPE:
        getSuperType().clear();
        getSuperType().addAll((Collection<? extends Element>)newValue);
        return;
      case SmaCPackage.ABSTRACT_CONTRACT__MODIFIERS:
        getModifiers().clear();
        getModifiers().addAll((Collection<? extends Modifier>)newValue);
        return;
      case SmaCPackage.ABSTRACT_CONTRACT__EVENTS:
        getEvents().clear();
        getEvents().addAll((Collection<? extends Event>)newValue);
        return;
      case SmaCPackage.ABSTRACT_CONTRACT__ERRORS:
        getErrors().clear();
        getErrors().addAll((Collection<? extends org.xtext.smaC.Error>)newValue);
        return;
      case SmaCPackage.ABSTRACT_CONTRACT__CLAUSES:
        getClauses().clear();
        getClauses().addAll((Collection<? extends DeclarationFunctionAbstractContract>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.ABSTRACT_CONTRACT__SUPER_TYPE:
        getSuperType().clear();
        return;
      case SmaCPackage.ABSTRACT_CONTRACT__MODIFIERS:
        getModifiers().clear();
        return;
      case SmaCPackage.ABSTRACT_CONTRACT__EVENTS:
        getEvents().clear();
        return;
      case SmaCPackage.ABSTRACT_CONTRACT__ERRORS:
        getErrors().clear();
        return;
      case SmaCPackage.ABSTRACT_CONTRACT__CLAUSES:
        getClauses().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.ABSTRACT_CONTRACT__SUPER_TYPE:
        return superType != null && !superType.isEmpty();
      case SmaCPackage.ABSTRACT_CONTRACT__MODIFIERS:
        return modifiers != null && !modifiers.isEmpty();
      case SmaCPackage.ABSTRACT_CONTRACT__EVENTS:
        return events != null && !events.isEmpty();
      case SmaCPackage.ABSTRACT_CONTRACT__ERRORS:
        return errors != null && !errors.isEmpty();
      case SmaCPackage.ABSTRACT_CONTRACT__CLAUSES:
        return clauses != null && !clauses.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //AbstractContractImpl
