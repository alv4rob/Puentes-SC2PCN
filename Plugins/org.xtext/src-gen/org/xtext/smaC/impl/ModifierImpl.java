/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.smaC.Condition;
import org.xtext.smaC.InputParam;
import org.xtext.smaC.Modifier;
import org.xtext.smaC.RestrictionClause;
import org.xtext.smaC.SmaCPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Modifier</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaC.impl.ModifierImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ModifierImpl#getInputParams <em>Input Params</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ModifierImpl#getConditionRestricion <em>Condition Restricion</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ModifierImpl#getExpressionsAssignValueBeforeMark <em>Expressions Assign Value Before Mark</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ModifierImpl#getConditionsBeforeMark <em>Conditions Before Mark</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ModifierImpl#getExpressionsAssignValueAfterMark <em>Expressions Assign Value After Mark</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ModifierImpl#getConditionsAfterMark <em>Conditions After Mark</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModifierImpl extends MinimalEObjectImpl.Container implements Modifier
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getInputParams() <em>Input Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputParams()
   * @generated
   * @ordered
   */
  protected EList<InputParam> inputParams;

  /**
   * The cached value of the '{@link #getConditionRestricion() <em>Condition Restricion</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionRestricion()
   * @generated
   * @ordered
   */
  protected EList<RestrictionClause> conditionRestricion;

  /**
   * The cached value of the '{@link #getExpressionsAssignValueBeforeMark() <em>Expressions Assign Value Before Mark</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionsAssignValueBeforeMark()
   * @generated
   * @ordered
   */
  protected EList<String> expressionsAssignValueBeforeMark;

  /**
   * The cached value of the '{@link #getConditionsBeforeMark() <em>Conditions Before Mark</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionsBeforeMark()
   * @generated
   * @ordered
   */
  protected EList<Condition> conditionsBeforeMark;

  /**
   * The cached value of the '{@link #getExpressionsAssignValueAfterMark() <em>Expressions Assign Value After Mark</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionsAssignValueAfterMark()
   * @generated
   * @ordered
   */
  protected EList<String> expressionsAssignValueAfterMark;

  /**
   * The cached value of the '{@link #getConditionsAfterMark() <em>Conditions After Mark</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionsAfterMark()
   * @generated
   * @ordered
   */
  protected EList<Condition> conditionsAfterMark;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModifierImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmaCPackage.Literals.MODIFIER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.MODIFIER__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InputParam> getInputParams()
  {
    if (inputParams == null)
    {
      inputParams = new EObjectContainmentEList<InputParam>(InputParam.class, this, SmaCPackage.MODIFIER__INPUT_PARAMS);
    }
    return inputParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RestrictionClause> getConditionRestricion()
  {
    if (conditionRestricion == null)
    {
      conditionRestricion = new EObjectContainmentEList<RestrictionClause>(RestrictionClause.class, this, SmaCPackage.MODIFIER__CONDITION_RESTRICION);
    }
    return conditionRestricion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getExpressionsAssignValueBeforeMark()
  {
    if (expressionsAssignValueBeforeMark == null)
    {
      expressionsAssignValueBeforeMark = new EDataTypeEList<String>(String.class, this, SmaCPackage.MODIFIER__EXPRESSIONS_ASSIGN_VALUE_BEFORE_MARK);
    }
    return expressionsAssignValueBeforeMark;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Condition> getConditionsBeforeMark()
  {
    if (conditionsBeforeMark == null)
    {
      conditionsBeforeMark = new EObjectContainmentEList<Condition>(Condition.class, this, SmaCPackage.MODIFIER__CONDITIONS_BEFORE_MARK);
    }
    return conditionsBeforeMark;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getExpressionsAssignValueAfterMark()
  {
    if (expressionsAssignValueAfterMark == null)
    {
      expressionsAssignValueAfterMark = new EDataTypeEList<String>(String.class, this, SmaCPackage.MODIFIER__EXPRESSIONS_ASSIGN_VALUE_AFTER_MARK);
    }
    return expressionsAssignValueAfterMark;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Condition> getConditionsAfterMark()
  {
    if (conditionsAfterMark == null)
    {
      conditionsAfterMark = new EObjectContainmentEList<Condition>(Condition.class, this, SmaCPackage.MODIFIER__CONDITIONS_AFTER_MARK);
    }
    return conditionsAfterMark;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SmaCPackage.MODIFIER__INPUT_PARAMS:
        return ((InternalEList<?>)getInputParams()).basicRemove(otherEnd, msgs);
      case SmaCPackage.MODIFIER__CONDITION_RESTRICION:
        return ((InternalEList<?>)getConditionRestricion()).basicRemove(otherEnd, msgs);
      case SmaCPackage.MODIFIER__CONDITIONS_BEFORE_MARK:
        return ((InternalEList<?>)getConditionsBeforeMark()).basicRemove(otherEnd, msgs);
      case SmaCPackage.MODIFIER__CONDITIONS_AFTER_MARK:
        return ((InternalEList<?>)getConditionsAfterMark()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmaCPackage.MODIFIER__NAME:
        return getName();
      case SmaCPackage.MODIFIER__INPUT_PARAMS:
        return getInputParams();
      case SmaCPackage.MODIFIER__CONDITION_RESTRICION:
        return getConditionRestricion();
      case SmaCPackage.MODIFIER__EXPRESSIONS_ASSIGN_VALUE_BEFORE_MARK:
        return getExpressionsAssignValueBeforeMark();
      case SmaCPackage.MODIFIER__CONDITIONS_BEFORE_MARK:
        return getConditionsBeforeMark();
      case SmaCPackage.MODIFIER__EXPRESSIONS_ASSIGN_VALUE_AFTER_MARK:
        return getExpressionsAssignValueAfterMark();
      case SmaCPackage.MODIFIER__CONDITIONS_AFTER_MARK:
        return getConditionsAfterMark();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmaCPackage.MODIFIER__NAME:
        setName((String)newValue);
        return;
      case SmaCPackage.MODIFIER__INPUT_PARAMS:
        getInputParams().clear();
        getInputParams().addAll((Collection<? extends InputParam>)newValue);
        return;
      case SmaCPackage.MODIFIER__CONDITION_RESTRICION:
        getConditionRestricion().clear();
        getConditionRestricion().addAll((Collection<? extends RestrictionClause>)newValue);
        return;
      case SmaCPackage.MODIFIER__EXPRESSIONS_ASSIGN_VALUE_BEFORE_MARK:
        getExpressionsAssignValueBeforeMark().clear();
        getExpressionsAssignValueBeforeMark().addAll((Collection<? extends String>)newValue);
        return;
      case SmaCPackage.MODIFIER__CONDITIONS_BEFORE_MARK:
        getConditionsBeforeMark().clear();
        getConditionsBeforeMark().addAll((Collection<? extends Condition>)newValue);
        return;
      case SmaCPackage.MODIFIER__EXPRESSIONS_ASSIGN_VALUE_AFTER_MARK:
        getExpressionsAssignValueAfterMark().clear();
        getExpressionsAssignValueAfterMark().addAll((Collection<? extends String>)newValue);
        return;
      case SmaCPackage.MODIFIER__CONDITIONS_AFTER_MARK:
        getConditionsAfterMark().clear();
        getConditionsAfterMark().addAll((Collection<? extends Condition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.MODIFIER__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SmaCPackage.MODIFIER__INPUT_PARAMS:
        getInputParams().clear();
        return;
      case SmaCPackage.MODIFIER__CONDITION_RESTRICION:
        getConditionRestricion().clear();
        return;
      case SmaCPackage.MODIFIER__EXPRESSIONS_ASSIGN_VALUE_BEFORE_MARK:
        getExpressionsAssignValueBeforeMark().clear();
        return;
      case SmaCPackage.MODIFIER__CONDITIONS_BEFORE_MARK:
        getConditionsBeforeMark().clear();
        return;
      case SmaCPackage.MODIFIER__EXPRESSIONS_ASSIGN_VALUE_AFTER_MARK:
        getExpressionsAssignValueAfterMark().clear();
        return;
      case SmaCPackage.MODIFIER__CONDITIONS_AFTER_MARK:
        getConditionsAfterMark().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.MODIFIER__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SmaCPackage.MODIFIER__INPUT_PARAMS:
        return inputParams != null && !inputParams.isEmpty();
      case SmaCPackage.MODIFIER__CONDITION_RESTRICION:
        return conditionRestricion != null && !conditionRestricion.isEmpty();
      case SmaCPackage.MODIFIER__EXPRESSIONS_ASSIGN_VALUE_BEFORE_MARK:
        return expressionsAssignValueBeforeMark != null && !expressionsAssignValueBeforeMark.isEmpty();
      case SmaCPackage.MODIFIER__CONDITIONS_BEFORE_MARK:
        return conditionsBeforeMark != null && !conditionsBeforeMark.isEmpty();
      case SmaCPackage.MODIFIER__EXPRESSIONS_ASSIGN_VALUE_AFTER_MARK:
        return expressionsAssignValueAfterMark != null && !expressionsAssignValueAfterMark.isEmpty();
      case SmaCPackage.MODIFIER__CONDITIONS_AFTER_MARK:
        return conditionsAfterMark != null && !conditionsAfterMark.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", expressionsAssignValueBeforeMark: ");
    result.append(expressionsAssignValueBeforeMark);
    result.append(", expressionsAssignValueAfterMark: ");
    result.append(expressionsAssignValueAfterMark);
    result.append(')');
    return result.toString();
  }

} //ModifierImpl
