/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.smaC.AbstractContract;
import org.xtext.smaC.ArithmeticalOperator;
import org.xtext.smaC.Assert;
import org.xtext.smaC.AssignmentOperator;
import org.xtext.smaC.Clause;
import org.xtext.smaC.Coin;
import org.xtext.smaC.Company;
import org.xtext.smaC.ComparationOperator;
import org.xtext.smaC.Condition;
import org.xtext.smaC.Constructor;
import org.xtext.smaC.Contract;
import org.xtext.smaC.DeclarationFunctionAbstractContract;
import org.xtext.smaC.DeclarationFunctionInterface;
import org.xtext.smaC.DoWhileLoop;
import org.xtext.smaC.Element;
import org.xtext.smaC.Event;
import org.xtext.smaC.File;
import org.xtext.smaC.ForLoop;
import org.xtext.smaC.Import;
import org.xtext.smaC.InputModifier;
import org.xtext.smaC.InputParam;
import org.xtext.smaC.Interface;
import org.xtext.smaC.Library;
import org.xtext.smaC.LogicalPairOperator;
import org.xtext.smaC.LoopOperator;
import org.xtext.smaC.Mapping;
import org.xtext.smaC.MappingDeclaration;
import org.xtext.smaC.Modifier;
import org.xtext.smaC.OutputParam;
import org.xtext.smaC.OverrideModifier;
import org.xtext.smaC.PersonalizedStruct;
import org.xtext.smaC.Properties;
import org.xtext.smaC.PropertyAddress;
import org.xtext.smaC.PropertyBoolean;
import org.xtext.smaC.PropertyBytes;
import org.xtext.smaC.PropertyCompany;
import org.xtext.smaC.PropertyFloat;
import org.xtext.smaC.PropertyIdentifier;
import org.xtext.smaC.PropertyInteger;
import org.xtext.smaC.PropertyString;
import org.xtext.smaC.PropertyUInteger;
import org.xtext.smaC.PropertyUser;
import org.xtext.smaC.Restriction;
import org.xtext.smaC.RestrictionClause;
import org.xtext.smaC.RestrictionGas;
import org.xtext.smaC.SmaCFactory;
import org.xtext.smaC.SmaCPackage;
import org.xtext.smaC.StorageData;
import org.xtext.smaC.TimeUnit;
import org.xtext.smaC.UnDeterminedLoop;
import org.xtext.smaC.User;
import org.xtext.smaC.Version;
import org.xtext.smaC.Visibility;
import org.xtext.smaC.WhileLoop;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SmaCFactoryImpl extends EFactoryImpl implements SmaCFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SmaCFactory init()
  {
    try
    {
      SmaCFactory theSmaCFactory = (SmaCFactory)EPackage.Registry.INSTANCE.getEFactory(SmaCPackage.eNS_URI);
      if (theSmaCFactory != null)
      {
        return theSmaCFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SmaCFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SmaCFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SmaCPackage.FILE: return createFile();
      case SmaCPackage.VERSION: return createVersion();
      case SmaCPackage.LIBRARY: return createLibrary();
      case SmaCPackage.IMPORT: return createImport();
      case SmaCPackage.ELEMENT: return createElement();
      case SmaCPackage.INTERFACE: return createInterface();
      case SmaCPackage.DECLARATION_FUNCTION_INTERFACE: return createDeclarationFunctionInterface();
      case SmaCPackage.DECLARATION_FUNCTION_ABSTRACT_CONTRACT: return createDeclarationFunctionAbstractContract();
      case SmaCPackage.ABSTRACT_CONTRACT: return createAbstractContract();
      case SmaCPackage.CONTRACT: return createContract();
      case SmaCPackage.CONSTRUCTOR: return createConstructor();
      case SmaCPackage.EVENT: return createEvent();
      case SmaCPackage.ERROR: return createError();
      case SmaCPackage.MODIFIER: return createModifier();
      case SmaCPackage.RESTRICTION_CLAUSE: return createRestrictionClause();
      case SmaCPackage.RESTRICTION: return createRestriction();
      case SmaCPackage.RESTRICTION_GAS: return createRestrictionGas();
      case SmaCPackage.ASSERT: return createAssert();
      case SmaCPackage.MAPPING: return createMapping();
      case SmaCPackage.MAPPING_DECLARATION: return createMappingDeclaration();
      case SmaCPackage.PERSONALIZED_STRUCT: return createPersonalizedStruct();
      case SmaCPackage.USER: return createUser();
      case SmaCPackage.COMPANY: return createCompany();
      case SmaCPackage.ENUM: return createEnum();
      case SmaCPackage.OVERRIDE_MODIFIER: return createOverrideModifier();
      case SmaCPackage.PROPERTIES: return createProperties();
      case SmaCPackage.PROPERTY_STRING: return createPropertyString();
      case SmaCPackage.PROPERTY_INTEGER: return createPropertyInteger();
      case SmaCPackage.PROPERTY_FLOAT: return createPropertyFloat();
      case SmaCPackage.PROPERTY_UINTEGER: return createPropertyUInteger();
      case SmaCPackage.PROPERTY_BOOLEAN: return createPropertyBoolean();
      case SmaCPackage.PROPERTY_ADDRESS: return createPropertyAddress();
      case SmaCPackage.PROPERTY_IDENTIFIER: return createPropertyIdentifier();
      case SmaCPackage.PROPERTY_USER: return createPropertyUser();
      case SmaCPackage.PROPERTY_COMPANY: return createPropertyCompany();
      case SmaCPackage.PROPERTY_BYTES: return createPropertyBytes();
      case SmaCPackage.INPUT_PARAM: return createInputParam();
      case SmaCPackage.OUTPUT_PARAM: return createOutputParam();
      case SmaCPackage.CLAUSE: return createClause();
      case SmaCPackage.CONDITION: return createCondition();
      case SmaCPackage.UN_DETERMINED_LOOP: return createUnDeterminedLoop();
      case SmaCPackage.WHILE_LOOP: return createWhileLoop();
      case SmaCPackage.FOR_LOOP: return createForLoop();
      case SmaCPackage.DO_WHILE_LOOP: return createDoWhileLoop();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SmaCPackage.INPUT_MODIFIER:
        return createInputModifierFromString(eDataType, initialValue);
      case SmaCPackage.STORAGE_DATA:
        return createStorageDataFromString(eDataType, initialValue);
      case SmaCPackage.VISIBILITY:
        return createVisibilityFromString(eDataType, initialValue);
      case SmaCPackage.COIN:
        return createCoinFromString(eDataType, initialValue);
      case SmaCPackage.LOOP_OPERATOR:
        return createLoopOperatorFromString(eDataType, initialValue);
      case SmaCPackage.COMPARATION_OPERATOR:
        return createComparationOperatorFromString(eDataType, initialValue);
      case SmaCPackage.LOGICAL_PAIR_OPERATOR:
        return createLogicalPairOperatorFromString(eDataType, initialValue);
      case SmaCPackage.ARITHMETICAL_OPERATOR:
        return createArithmeticalOperatorFromString(eDataType, initialValue);
      case SmaCPackage.ASSIGNMENT_OPERATOR:
        return createAssignmentOperatorFromString(eDataType, initialValue);
      case SmaCPackage.TIME_UNIT:
        return createTimeUnitFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SmaCPackage.INPUT_MODIFIER:
        return convertInputModifierToString(eDataType, instanceValue);
      case SmaCPackage.STORAGE_DATA:
        return convertStorageDataToString(eDataType, instanceValue);
      case SmaCPackage.VISIBILITY:
        return convertVisibilityToString(eDataType, instanceValue);
      case SmaCPackage.COIN:
        return convertCoinToString(eDataType, instanceValue);
      case SmaCPackage.LOOP_OPERATOR:
        return convertLoopOperatorToString(eDataType, instanceValue);
      case SmaCPackage.COMPARATION_OPERATOR:
        return convertComparationOperatorToString(eDataType, instanceValue);
      case SmaCPackage.LOGICAL_PAIR_OPERATOR:
        return convertLogicalPairOperatorToString(eDataType, instanceValue);
      case SmaCPackage.ARITHMETICAL_OPERATOR:
        return convertArithmeticalOperatorToString(eDataType, instanceValue);
      case SmaCPackage.ASSIGNMENT_OPERATOR:
        return convertAssignmentOperatorToString(eDataType, instanceValue);
      case SmaCPackage.TIME_UNIT:
        return convertTimeUnitToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public File createFile()
  {
    FileImpl file = new FileImpl();
    return file;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Version createVersion()
  {
    VersionImpl version = new VersionImpl();
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Library createLibrary()
  {
    LibraryImpl library = new LibraryImpl();
    return library;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interface createInterface()
  {
    InterfaceImpl interface_ = new InterfaceImpl();
    return interface_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclarationFunctionInterface createDeclarationFunctionInterface()
  {
    DeclarationFunctionInterfaceImpl declarationFunctionInterface = new DeclarationFunctionInterfaceImpl();
    return declarationFunctionInterface;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclarationFunctionAbstractContract createDeclarationFunctionAbstractContract()
  {
    DeclarationFunctionAbstractContractImpl declarationFunctionAbstractContract = new DeclarationFunctionAbstractContractImpl();
    return declarationFunctionAbstractContract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractContract createAbstractContract()
  {
    AbstractContractImpl abstractContract = new AbstractContractImpl();
    return abstractContract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Contract createContract()
  {
    ContractImpl contract = new ContractImpl();
    return contract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constructor createConstructor()
  {
    ConstructorImpl constructor = new ConstructorImpl();
    return constructor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.smaC.Error createError()
  {
    ErrorImpl error = new ErrorImpl();
    return error;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Modifier createModifier()
  {
    ModifierImpl modifier = new ModifierImpl();
    return modifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RestrictionClause createRestrictionClause()
  {
    RestrictionClauseImpl restrictionClause = new RestrictionClauseImpl();
    return restrictionClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Restriction createRestriction()
  {
    RestrictionImpl restriction = new RestrictionImpl();
    return restriction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RestrictionGas createRestrictionGas()
  {
    RestrictionGasImpl restrictionGas = new RestrictionGasImpl();
    return restrictionGas;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assert createAssert()
  {
    AssertImpl assert_ = new AssertImpl();
    return assert_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mapping createMapping()
  {
    MappingImpl mapping = new MappingImpl();
    return mapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingDeclaration createMappingDeclaration()
  {
    MappingDeclarationImpl mappingDeclaration = new MappingDeclarationImpl();
    return mappingDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PersonalizedStruct createPersonalizedStruct()
  {
    PersonalizedStructImpl personalizedStruct = new PersonalizedStructImpl();
    return personalizedStruct;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public User createUser()
  {
    UserImpl user = new UserImpl();
    return user;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Company createCompany()
  {
    CompanyImpl company = new CompanyImpl();
    return company;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.smaC.Enum createEnum()
  {
    EnumImpl enum_ = new EnumImpl();
    return enum_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OverrideModifier createOverrideModifier()
  {
    OverrideModifierImpl overrideModifier = new OverrideModifierImpl();
    return overrideModifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Properties createProperties()
  {
    PropertiesImpl properties = new PropertiesImpl();
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyString createPropertyString()
  {
    PropertyStringImpl propertyString = new PropertyStringImpl();
    return propertyString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyInteger createPropertyInteger()
  {
    PropertyIntegerImpl propertyInteger = new PropertyIntegerImpl();
    return propertyInteger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyFloat createPropertyFloat()
  {
    PropertyFloatImpl propertyFloat = new PropertyFloatImpl();
    return propertyFloat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyUInteger createPropertyUInteger()
  {
    PropertyUIntegerImpl propertyUInteger = new PropertyUIntegerImpl();
    return propertyUInteger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyBoolean createPropertyBoolean()
  {
    PropertyBooleanImpl propertyBoolean = new PropertyBooleanImpl();
    return propertyBoolean;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyAddress createPropertyAddress()
  {
    PropertyAddressImpl propertyAddress = new PropertyAddressImpl();
    return propertyAddress;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyIdentifier createPropertyIdentifier()
  {
    PropertyIdentifierImpl propertyIdentifier = new PropertyIdentifierImpl();
    return propertyIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyUser createPropertyUser()
  {
    PropertyUserImpl propertyUser = new PropertyUserImpl();
    return propertyUser;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyCompany createPropertyCompany()
  {
    PropertyCompanyImpl propertyCompany = new PropertyCompanyImpl();
    return propertyCompany;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyBytes createPropertyBytes()
  {
    PropertyBytesImpl propertyBytes = new PropertyBytesImpl();
    return propertyBytes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputParam createInputParam()
  {
    InputParamImpl inputParam = new InputParamImpl();
    return inputParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutputParam createOutputParam()
  {
    OutputParamImpl outputParam = new OutputParamImpl();
    return outputParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Clause createClause()
  {
    ClauseImpl clause = new ClauseImpl();
    return clause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnDeterminedLoop createUnDeterminedLoop()
  {
    UnDeterminedLoopImpl unDeterminedLoop = new UnDeterminedLoopImpl();
    return unDeterminedLoop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhileLoop createWhileLoop()
  {
    WhileLoopImpl whileLoop = new WhileLoopImpl();
    return whileLoop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForLoop createForLoop()
  {
    ForLoopImpl forLoop = new ForLoopImpl();
    return forLoop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoWhileLoop createDoWhileLoop()
  {
    DoWhileLoopImpl doWhileLoop = new DoWhileLoopImpl();
    return doWhileLoop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InputModifier createInputModifierFromString(EDataType eDataType, String initialValue)
  {
    InputModifier result = InputModifier.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertInputModifierToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StorageData createStorageDataFromString(EDataType eDataType, String initialValue)
  {
    StorageData result = StorageData.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStorageDataToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Visibility createVisibilityFromString(EDataType eDataType, String initialValue)
  {
    Visibility result = Visibility.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertVisibilityToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Coin createCoinFromString(EDataType eDataType, String initialValue)
  {
    Coin result = Coin.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCoinToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LoopOperator createLoopOperatorFromString(EDataType eDataType, String initialValue)
  {
    LoopOperator result = LoopOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLoopOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComparationOperator createComparationOperatorFromString(EDataType eDataType, String initialValue)
  {
    ComparationOperator result = ComparationOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertComparationOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogicalPairOperator createLogicalPairOperatorFromString(EDataType eDataType, String initialValue)
  {
    LogicalPairOperator result = LogicalPairOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLogicalPairOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithmeticalOperator createArithmeticalOperatorFromString(EDataType eDataType, String initialValue)
  {
    ArithmeticalOperator result = ArithmeticalOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertArithmeticalOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssignmentOperator createAssignmentOperatorFromString(EDataType eDataType, String initialValue)
  {
    AssignmentOperator result = AssignmentOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAssignmentOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimeUnit createTimeUnitFromString(EDataType eDataType, String initialValue)
  {
    TimeUnit result = TimeUnit.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTimeUnitToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SmaCPackage getSmaCPackage()
  {
    return (SmaCPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SmaCPackage getPackage()
  {
    return SmaCPackage.eINSTANCE;
  }

} //SmaCFactoryImpl
