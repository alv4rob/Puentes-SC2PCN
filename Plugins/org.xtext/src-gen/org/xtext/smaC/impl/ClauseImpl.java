/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.smaC.Clause;
import org.xtext.smaC.Condition;
import org.xtext.smaC.Event;
import org.xtext.smaC.ForLoop;
import org.xtext.smaC.InputModifier;
import org.xtext.smaC.InputParam;
import org.xtext.smaC.Mapping;
import org.xtext.smaC.Modifier;
import org.xtext.smaC.OutputParam;
import org.xtext.smaC.OverrideModifier;
import org.xtext.smaC.Properties;
import org.xtext.smaC.RestrictionClause;
import org.xtext.smaC.SmaCPackage;
import org.xtext.smaC.UnDeterminedLoop;
import org.xtext.smaC.Visibility;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Clause</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getInputParams <em>Input Params</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getConstant <em>Constant</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getVirtual <em>Virtual</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getVisibilityAccess <em>Visibility Access</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getPersonalizedModifier <em>Personalized Modifier</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getInputParamsModifier <em>Input Params Modifier</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getPredefinedModifier <em>Predefined Modifier</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getOverride <em>Override</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getOutputParams <em>Output Params</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getRestriction <em>Restriction</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getConditions <em>Conditions</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getProperties <em>Properties</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getMappingProperties <em>Mapping Properties</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getUndeterminedloops <em>Undeterminedloops</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getDeterminedloops <em>Determinedloops</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getExpressions <em>Expressions</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getPredefinedFunctions <em>Predefined Functions</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getEvent <em>Event</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ClauseImpl#getInputParamsEvent <em>Input Params Event</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClauseImpl extends MinimalEObjectImpl.Container implements Clause
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getInputParams() <em>Input Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputParams()
   * @generated
   * @ordered
   */
  protected EList<InputParam> inputParams;

  /**
   * The default value of the '{@link #getConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected static final String CONSTANT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected String constant = CONSTANT_EDEFAULT;

  /**
   * The default value of the '{@link #getVirtual() <em>Virtual</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVirtual()
   * @generated
   * @ordered
   */
  protected static final String VIRTUAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVirtual() <em>Virtual</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVirtual()
   * @generated
   * @ordered
   */
  protected String virtual = VIRTUAL_EDEFAULT;

  /**
   * The default value of the '{@link #getVisibilityAccess() <em>Visibility Access</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisibilityAccess()
   * @generated
   * @ordered
   */
  protected static final Visibility VISIBILITY_ACCESS_EDEFAULT = Visibility.PUBLIC;

  /**
   * The cached value of the '{@link #getVisibilityAccess() <em>Visibility Access</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisibilityAccess()
   * @generated
   * @ordered
   */
  protected Visibility visibilityAccess = VISIBILITY_ACCESS_EDEFAULT;

  /**
   * The cached value of the '{@link #getPersonalizedModifier() <em>Personalized Modifier</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPersonalizedModifier()
   * @generated
   * @ordered
   */
  protected EList<Modifier> personalizedModifier;

  /**
   * The cached value of the '{@link #getInputParamsModifier() <em>Input Params Modifier</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputParamsModifier()
   * @generated
   * @ordered
   */
  protected EList<InputParam> inputParamsModifier;

  /**
   * The default value of the '{@link #getPredefinedModifier() <em>Predefined Modifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredefinedModifier()
   * @generated
   * @ordered
   */
  protected static final InputModifier PREDEFINED_MODIFIER_EDEFAULT = InputModifier.VIEW;

  /**
   * The cached value of the '{@link #getPredefinedModifier() <em>Predefined Modifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredefinedModifier()
   * @generated
   * @ordered
   */
  protected InputModifier predefinedModifier = PREDEFINED_MODIFIER_EDEFAULT;

  /**
   * The cached value of the '{@link #getOverride() <em>Override</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOverride()
   * @generated
   * @ordered
   */
  protected OverrideModifier override;

  /**
   * The cached value of the '{@link #getOutputParams() <em>Output Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutputParams()
   * @generated
   * @ordered
   */
  protected EList<OutputParam> outputParams;

  /**
   * The cached value of the '{@link #getRestriction() <em>Restriction</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRestriction()
   * @generated
   * @ordered
   */
  protected EList<RestrictionClause> restriction;

  /**
   * The cached value of the '{@link #getConditions() <em>Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditions()
   * @generated
   * @ordered
   */
  protected EList<Condition> conditions;

  /**
   * The cached value of the '{@link #getProperties() <em>Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperties()
   * @generated
   * @ordered
   */
  protected EList<Properties> properties;

  /**
   * The cached value of the '{@link #getMappingProperties() <em>Mapping Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMappingProperties()
   * @generated
   * @ordered
   */
  protected EList<Mapping> mappingProperties;

  /**
   * The cached value of the '{@link #getUndeterminedloops() <em>Undeterminedloops</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUndeterminedloops()
   * @generated
   * @ordered
   */
  protected EList<UnDeterminedLoop> undeterminedloops;

  /**
   * The cached value of the '{@link #getDeterminedloops() <em>Determinedloops</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeterminedloops()
   * @generated
   * @ordered
   */
  protected EList<ForLoop> determinedloops;

  /**
   * The cached value of the '{@link #getExpressions() <em>Expressions</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressions()
   * @generated
   * @ordered
   */
  protected EList<String> expressions;

  /**
   * The cached value of the '{@link #getPredefinedFunctions() <em>Predefined Functions</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredefinedFunctions()
   * @generated
   * @ordered
   */
  protected EList<String> predefinedFunctions;

  /**
   * The cached value of the '{@link #getEvent() <em>Event</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected EList<Event> event;

  /**
   * The cached value of the '{@link #getInputParamsEvent() <em>Input Params Event</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputParamsEvent()
   * @generated
   * @ordered
   */
  protected EList<InputParam> inputParamsEvent;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClauseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmaCPackage.Literals.CLAUSE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.CLAUSE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InputParam> getInputParams()
  {
    if (inputParams == null)
    {
      inputParams = new EObjectContainmentEList<InputParam>(InputParam.class, this, SmaCPackage.CLAUSE__INPUT_PARAMS);
    }
    return inputParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConstant()
  {
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstant(String newConstant)
  {
    String oldConstant = constant;
    constant = newConstant;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.CLAUSE__CONSTANT, oldConstant, constant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVirtual()
  {
    return virtual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVirtual(String newVirtual)
  {
    String oldVirtual = virtual;
    virtual = newVirtual;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.CLAUSE__VIRTUAL, oldVirtual, virtual));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Visibility getVisibilityAccess()
  {
    return visibilityAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVisibilityAccess(Visibility newVisibilityAccess)
  {
    Visibility oldVisibilityAccess = visibilityAccess;
    visibilityAccess = newVisibilityAccess == null ? VISIBILITY_ACCESS_EDEFAULT : newVisibilityAccess;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.CLAUSE__VISIBILITY_ACCESS, oldVisibilityAccess, visibilityAccess));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Modifier> getPersonalizedModifier()
  {
    if (personalizedModifier == null)
    {
      personalizedModifier = new EObjectResolvingEList<Modifier>(Modifier.class, this, SmaCPackage.CLAUSE__PERSONALIZED_MODIFIER);
    }
    return personalizedModifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InputParam> getInputParamsModifier()
  {
    if (inputParamsModifier == null)
    {
      inputParamsModifier = new EObjectContainmentEList<InputParam>(InputParam.class, this, SmaCPackage.CLAUSE__INPUT_PARAMS_MODIFIER);
    }
    return inputParamsModifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputModifier getPredefinedModifier()
  {
    return predefinedModifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPredefinedModifier(InputModifier newPredefinedModifier)
  {
    InputModifier oldPredefinedModifier = predefinedModifier;
    predefinedModifier = newPredefinedModifier == null ? PREDEFINED_MODIFIER_EDEFAULT : newPredefinedModifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.CLAUSE__PREDEFINED_MODIFIER, oldPredefinedModifier, predefinedModifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OverrideModifier getOverride()
  {
    return override;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOverride(OverrideModifier newOverride, NotificationChain msgs)
  {
    OverrideModifier oldOverride = override;
    override = newOverride;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCPackage.CLAUSE__OVERRIDE, oldOverride, newOverride);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOverride(OverrideModifier newOverride)
  {
    if (newOverride != override)
    {
      NotificationChain msgs = null;
      if (override != null)
        msgs = ((InternalEObject)override).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCPackage.CLAUSE__OVERRIDE, null, msgs);
      if (newOverride != null)
        msgs = ((InternalEObject)newOverride).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCPackage.CLAUSE__OVERRIDE, null, msgs);
      msgs = basicSetOverride(newOverride, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.CLAUSE__OVERRIDE, newOverride, newOverride));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<OutputParam> getOutputParams()
  {
    if (outputParams == null)
    {
      outputParams = new EObjectContainmentEList<OutputParam>(OutputParam.class, this, SmaCPackage.CLAUSE__OUTPUT_PARAMS);
    }
    return outputParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RestrictionClause> getRestriction()
  {
    if (restriction == null)
    {
      restriction = new EObjectContainmentEList<RestrictionClause>(RestrictionClause.class, this, SmaCPackage.CLAUSE__RESTRICTION);
    }
    return restriction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Condition> getConditions()
  {
    if (conditions == null)
    {
      conditions = new EObjectContainmentEList<Condition>(Condition.class, this, SmaCPackage.CLAUSE__CONDITIONS);
    }
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Properties> getProperties()
  {
    if (properties == null)
    {
      properties = new EObjectContainmentEList<Properties>(Properties.class, this, SmaCPackage.CLAUSE__PROPERTIES);
    }
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Mapping> getMappingProperties()
  {
    if (mappingProperties == null)
    {
      mappingProperties = new EObjectContainmentEList<Mapping>(Mapping.class, this, SmaCPackage.CLAUSE__MAPPING_PROPERTIES);
    }
    return mappingProperties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UnDeterminedLoop> getUndeterminedloops()
  {
    if (undeterminedloops == null)
    {
      undeterminedloops = new EObjectContainmentEList<UnDeterminedLoop>(UnDeterminedLoop.class, this, SmaCPackage.CLAUSE__UNDETERMINEDLOOPS);
    }
    return undeterminedloops;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ForLoop> getDeterminedloops()
  {
    if (determinedloops == null)
    {
      determinedloops = new EObjectContainmentEList<ForLoop>(ForLoop.class, this, SmaCPackage.CLAUSE__DETERMINEDLOOPS);
    }
    return determinedloops;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getExpressions()
  {
    if (expressions == null)
    {
      expressions = new EDataTypeEList<String>(String.class, this, SmaCPackage.CLAUSE__EXPRESSIONS);
    }
    return expressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getPredefinedFunctions()
  {
    if (predefinedFunctions == null)
    {
      predefinedFunctions = new EDataTypeEList<String>(String.class, this, SmaCPackage.CLAUSE__PREDEFINED_FUNCTIONS);
    }
    return predefinedFunctions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Event> getEvent()
  {
    if (event == null)
    {
      event = new EObjectResolvingEList<Event>(Event.class, this, SmaCPackage.CLAUSE__EVENT);
    }
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InputParam> getInputParamsEvent()
  {
    if (inputParamsEvent == null)
    {
      inputParamsEvent = new EObjectContainmentEList<InputParam>(InputParam.class, this, SmaCPackage.CLAUSE__INPUT_PARAMS_EVENT);
    }
    return inputParamsEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SmaCPackage.CLAUSE__INPUT_PARAMS:
        return ((InternalEList<?>)getInputParams()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CLAUSE__INPUT_PARAMS_MODIFIER:
        return ((InternalEList<?>)getInputParamsModifier()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CLAUSE__OVERRIDE:
        return basicSetOverride(null, msgs);
      case SmaCPackage.CLAUSE__OUTPUT_PARAMS:
        return ((InternalEList<?>)getOutputParams()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CLAUSE__RESTRICTION:
        return ((InternalEList<?>)getRestriction()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CLAUSE__CONDITIONS:
        return ((InternalEList<?>)getConditions()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CLAUSE__PROPERTIES:
        return ((InternalEList<?>)getProperties()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CLAUSE__MAPPING_PROPERTIES:
        return ((InternalEList<?>)getMappingProperties()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CLAUSE__UNDETERMINEDLOOPS:
        return ((InternalEList<?>)getUndeterminedloops()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CLAUSE__DETERMINEDLOOPS:
        return ((InternalEList<?>)getDeterminedloops()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CLAUSE__INPUT_PARAMS_EVENT:
        return ((InternalEList<?>)getInputParamsEvent()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmaCPackage.CLAUSE__NAME:
        return getName();
      case SmaCPackage.CLAUSE__INPUT_PARAMS:
        return getInputParams();
      case SmaCPackage.CLAUSE__CONSTANT:
        return getConstant();
      case SmaCPackage.CLAUSE__VIRTUAL:
        return getVirtual();
      case SmaCPackage.CLAUSE__VISIBILITY_ACCESS:
        return getVisibilityAccess();
      case SmaCPackage.CLAUSE__PERSONALIZED_MODIFIER:
        return getPersonalizedModifier();
      case SmaCPackage.CLAUSE__INPUT_PARAMS_MODIFIER:
        return getInputParamsModifier();
      case SmaCPackage.CLAUSE__PREDEFINED_MODIFIER:
        return getPredefinedModifier();
      case SmaCPackage.CLAUSE__OVERRIDE:
        return getOverride();
      case SmaCPackage.CLAUSE__OUTPUT_PARAMS:
        return getOutputParams();
      case SmaCPackage.CLAUSE__RESTRICTION:
        return getRestriction();
      case SmaCPackage.CLAUSE__CONDITIONS:
        return getConditions();
      case SmaCPackage.CLAUSE__PROPERTIES:
        return getProperties();
      case SmaCPackage.CLAUSE__MAPPING_PROPERTIES:
        return getMappingProperties();
      case SmaCPackage.CLAUSE__UNDETERMINEDLOOPS:
        return getUndeterminedloops();
      case SmaCPackage.CLAUSE__DETERMINEDLOOPS:
        return getDeterminedloops();
      case SmaCPackage.CLAUSE__EXPRESSIONS:
        return getExpressions();
      case SmaCPackage.CLAUSE__PREDEFINED_FUNCTIONS:
        return getPredefinedFunctions();
      case SmaCPackage.CLAUSE__EVENT:
        return getEvent();
      case SmaCPackage.CLAUSE__INPUT_PARAMS_EVENT:
        return getInputParamsEvent();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmaCPackage.CLAUSE__NAME:
        setName((String)newValue);
        return;
      case SmaCPackage.CLAUSE__INPUT_PARAMS:
        getInputParams().clear();
        getInputParams().addAll((Collection<? extends InputParam>)newValue);
        return;
      case SmaCPackage.CLAUSE__CONSTANT:
        setConstant((String)newValue);
        return;
      case SmaCPackage.CLAUSE__VIRTUAL:
        setVirtual((String)newValue);
        return;
      case SmaCPackage.CLAUSE__VISIBILITY_ACCESS:
        setVisibilityAccess((Visibility)newValue);
        return;
      case SmaCPackage.CLAUSE__PERSONALIZED_MODIFIER:
        getPersonalizedModifier().clear();
        getPersonalizedModifier().addAll((Collection<? extends Modifier>)newValue);
        return;
      case SmaCPackage.CLAUSE__INPUT_PARAMS_MODIFIER:
        getInputParamsModifier().clear();
        getInputParamsModifier().addAll((Collection<? extends InputParam>)newValue);
        return;
      case SmaCPackage.CLAUSE__PREDEFINED_MODIFIER:
        setPredefinedModifier((InputModifier)newValue);
        return;
      case SmaCPackage.CLAUSE__OVERRIDE:
        setOverride((OverrideModifier)newValue);
        return;
      case SmaCPackage.CLAUSE__OUTPUT_PARAMS:
        getOutputParams().clear();
        getOutputParams().addAll((Collection<? extends OutputParam>)newValue);
        return;
      case SmaCPackage.CLAUSE__RESTRICTION:
        getRestriction().clear();
        getRestriction().addAll((Collection<? extends RestrictionClause>)newValue);
        return;
      case SmaCPackage.CLAUSE__CONDITIONS:
        getConditions().clear();
        getConditions().addAll((Collection<? extends Condition>)newValue);
        return;
      case SmaCPackage.CLAUSE__PROPERTIES:
        getProperties().clear();
        getProperties().addAll((Collection<? extends Properties>)newValue);
        return;
      case SmaCPackage.CLAUSE__MAPPING_PROPERTIES:
        getMappingProperties().clear();
        getMappingProperties().addAll((Collection<? extends Mapping>)newValue);
        return;
      case SmaCPackage.CLAUSE__UNDETERMINEDLOOPS:
        getUndeterminedloops().clear();
        getUndeterminedloops().addAll((Collection<? extends UnDeterminedLoop>)newValue);
        return;
      case SmaCPackage.CLAUSE__DETERMINEDLOOPS:
        getDeterminedloops().clear();
        getDeterminedloops().addAll((Collection<? extends ForLoop>)newValue);
        return;
      case SmaCPackage.CLAUSE__EXPRESSIONS:
        getExpressions().clear();
        getExpressions().addAll((Collection<? extends String>)newValue);
        return;
      case SmaCPackage.CLAUSE__PREDEFINED_FUNCTIONS:
        getPredefinedFunctions().clear();
        getPredefinedFunctions().addAll((Collection<? extends String>)newValue);
        return;
      case SmaCPackage.CLAUSE__EVENT:
        getEvent().clear();
        getEvent().addAll((Collection<? extends Event>)newValue);
        return;
      case SmaCPackage.CLAUSE__INPUT_PARAMS_EVENT:
        getInputParamsEvent().clear();
        getInputParamsEvent().addAll((Collection<? extends InputParam>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.CLAUSE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SmaCPackage.CLAUSE__INPUT_PARAMS:
        getInputParams().clear();
        return;
      case SmaCPackage.CLAUSE__CONSTANT:
        setConstant(CONSTANT_EDEFAULT);
        return;
      case SmaCPackage.CLAUSE__VIRTUAL:
        setVirtual(VIRTUAL_EDEFAULT);
        return;
      case SmaCPackage.CLAUSE__VISIBILITY_ACCESS:
        setVisibilityAccess(VISIBILITY_ACCESS_EDEFAULT);
        return;
      case SmaCPackage.CLAUSE__PERSONALIZED_MODIFIER:
        getPersonalizedModifier().clear();
        return;
      case SmaCPackage.CLAUSE__INPUT_PARAMS_MODIFIER:
        getInputParamsModifier().clear();
        return;
      case SmaCPackage.CLAUSE__PREDEFINED_MODIFIER:
        setPredefinedModifier(PREDEFINED_MODIFIER_EDEFAULT);
        return;
      case SmaCPackage.CLAUSE__OVERRIDE:
        setOverride((OverrideModifier)null);
        return;
      case SmaCPackage.CLAUSE__OUTPUT_PARAMS:
        getOutputParams().clear();
        return;
      case SmaCPackage.CLAUSE__RESTRICTION:
        getRestriction().clear();
        return;
      case SmaCPackage.CLAUSE__CONDITIONS:
        getConditions().clear();
        return;
      case SmaCPackage.CLAUSE__PROPERTIES:
        getProperties().clear();
        return;
      case SmaCPackage.CLAUSE__MAPPING_PROPERTIES:
        getMappingProperties().clear();
        return;
      case SmaCPackage.CLAUSE__UNDETERMINEDLOOPS:
        getUndeterminedloops().clear();
        return;
      case SmaCPackage.CLAUSE__DETERMINEDLOOPS:
        getDeterminedloops().clear();
        return;
      case SmaCPackage.CLAUSE__EXPRESSIONS:
        getExpressions().clear();
        return;
      case SmaCPackage.CLAUSE__PREDEFINED_FUNCTIONS:
        getPredefinedFunctions().clear();
        return;
      case SmaCPackage.CLAUSE__EVENT:
        getEvent().clear();
        return;
      case SmaCPackage.CLAUSE__INPUT_PARAMS_EVENT:
        getInputParamsEvent().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.CLAUSE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SmaCPackage.CLAUSE__INPUT_PARAMS:
        return inputParams != null && !inputParams.isEmpty();
      case SmaCPackage.CLAUSE__CONSTANT:
        return CONSTANT_EDEFAULT == null ? constant != null : !CONSTANT_EDEFAULT.equals(constant);
      case SmaCPackage.CLAUSE__VIRTUAL:
        return VIRTUAL_EDEFAULT == null ? virtual != null : !VIRTUAL_EDEFAULT.equals(virtual);
      case SmaCPackage.CLAUSE__VISIBILITY_ACCESS:
        return visibilityAccess != VISIBILITY_ACCESS_EDEFAULT;
      case SmaCPackage.CLAUSE__PERSONALIZED_MODIFIER:
        return personalizedModifier != null && !personalizedModifier.isEmpty();
      case SmaCPackage.CLAUSE__INPUT_PARAMS_MODIFIER:
        return inputParamsModifier != null && !inputParamsModifier.isEmpty();
      case SmaCPackage.CLAUSE__PREDEFINED_MODIFIER:
        return predefinedModifier != PREDEFINED_MODIFIER_EDEFAULT;
      case SmaCPackage.CLAUSE__OVERRIDE:
        return override != null;
      case SmaCPackage.CLAUSE__OUTPUT_PARAMS:
        return outputParams != null && !outputParams.isEmpty();
      case SmaCPackage.CLAUSE__RESTRICTION:
        return restriction != null && !restriction.isEmpty();
      case SmaCPackage.CLAUSE__CONDITIONS:
        return conditions != null && !conditions.isEmpty();
      case SmaCPackage.CLAUSE__PROPERTIES:
        return properties != null && !properties.isEmpty();
      case SmaCPackage.CLAUSE__MAPPING_PROPERTIES:
        return mappingProperties != null && !mappingProperties.isEmpty();
      case SmaCPackage.CLAUSE__UNDETERMINEDLOOPS:
        return undeterminedloops != null && !undeterminedloops.isEmpty();
      case SmaCPackage.CLAUSE__DETERMINEDLOOPS:
        return determinedloops != null && !determinedloops.isEmpty();
      case SmaCPackage.CLAUSE__EXPRESSIONS:
        return expressions != null && !expressions.isEmpty();
      case SmaCPackage.CLAUSE__PREDEFINED_FUNCTIONS:
        return predefinedFunctions != null && !predefinedFunctions.isEmpty();
      case SmaCPackage.CLAUSE__EVENT:
        return event != null && !event.isEmpty();
      case SmaCPackage.CLAUSE__INPUT_PARAMS_EVENT:
        return inputParamsEvent != null && !inputParamsEvent.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", constant: ");
    result.append(constant);
    result.append(", virtual: ");
    result.append(virtual);
    result.append(", visibilityAccess: ");
    result.append(visibilityAccess);
    result.append(", predefinedModifier: ");
    result.append(predefinedModifier);
    result.append(", expressions: ");
    result.append(expressions);
    result.append(", predefinedFunctions: ");
    result.append(predefinedFunctions);
    result.append(')');
    return result.toString();
  }

} //ClauseImpl
