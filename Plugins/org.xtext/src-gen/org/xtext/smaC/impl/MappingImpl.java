/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.smaC.Mapping;
import org.xtext.smaC.MappingDeclaration;
import org.xtext.smaC.SmaCPackage;
import org.xtext.smaC.StorageData;
import org.xtext.smaC.Visibility;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaC.impl.MappingImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.MappingImpl#getArray <em>Array</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.MappingImpl#getConstant <em>Constant</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.MappingImpl#getVisibility <em>Visibility</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.MappingImpl#getStorageData <em>Storage Data</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.MappingImpl#getNameMapping <em>Name Mapping</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.MappingImpl#getInicialization <em>Inicialization</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MappingImpl extends MinimalEObjectImpl.Container implements Mapping
{
  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected MappingDeclaration type;

  /**
   * The default value of the '{@link #getArray() <em>Array</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArray()
   * @generated
   * @ordered
   */
  protected static final String ARRAY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getArray() <em>Array</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArray()
   * @generated
   * @ordered
   */
  protected String array = ARRAY_EDEFAULT;

  /**
   * The default value of the '{@link #getConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected static final String CONSTANT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected String constant = CONSTANT_EDEFAULT;

  /**
   * The default value of the '{@link #getVisibility() <em>Visibility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisibility()
   * @generated
   * @ordered
   */
  protected static final Visibility VISIBILITY_EDEFAULT = Visibility.PUBLIC;

  /**
   * The cached value of the '{@link #getVisibility() <em>Visibility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisibility()
   * @generated
   * @ordered
   */
  protected Visibility visibility = VISIBILITY_EDEFAULT;

  /**
   * The default value of the '{@link #getStorageData() <em>Storage Data</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStorageData()
   * @generated
   * @ordered
   */
  protected static final StorageData STORAGE_DATA_EDEFAULT = StorageData.MEMORY;

  /**
   * The cached value of the '{@link #getStorageData() <em>Storage Data</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStorageData()
   * @generated
   * @ordered
   */
  protected StorageData storageData = STORAGE_DATA_EDEFAULT;

  /**
   * The default value of the '{@link #getNameMapping() <em>Name Mapping</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameMapping()
   * @generated
   * @ordered
   */
  protected static final String NAME_MAPPING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNameMapping() <em>Name Mapping</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameMapping()
   * @generated
   * @ordered
   */
  protected String nameMapping = NAME_MAPPING_EDEFAULT;

  /**
   * The default value of the '{@link #getInicialization() <em>Inicialization</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInicialization()
   * @generated
   * @ordered
   */
  protected static final String INICIALIZATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getInicialization() <em>Inicialization</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInicialization()
   * @generated
   * @ordered
   */
  protected String inicialization = INICIALIZATION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MappingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmaCPackage.Literals.MAPPING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingDeclaration getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(MappingDeclaration newType, NotificationChain msgs)
  {
    MappingDeclaration oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCPackage.MAPPING__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(MappingDeclaration newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCPackage.MAPPING__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCPackage.MAPPING__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.MAPPING__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getArray()
  {
    return array;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArray(String newArray)
  {
    String oldArray = array;
    array = newArray;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.MAPPING__ARRAY, oldArray, array));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConstant()
  {
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstant(String newConstant)
  {
    String oldConstant = constant;
    constant = newConstant;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.MAPPING__CONSTANT, oldConstant, constant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Visibility getVisibility()
  {
    return visibility;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVisibility(Visibility newVisibility)
  {
    Visibility oldVisibility = visibility;
    visibility = newVisibility == null ? VISIBILITY_EDEFAULT : newVisibility;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.MAPPING__VISIBILITY, oldVisibility, visibility));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StorageData getStorageData()
  {
    return storageData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStorageData(StorageData newStorageData)
  {
    StorageData oldStorageData = storageData;
    storageData = newStorageData == null ? STORAGE_DATA_EDEFAULT : newStorageData;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.MAPPING__STORAGE_DATA, oldStorageData, storageData));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNameMapping()
  {
    return nameMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNameMapping(String newNameMapping)
  {
    String oldNameMapping = nameMapping;
    nameMapping = newNameMapping;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.MAPPING__NAME_MAPPING, oldNameMapping, nameMapping));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getInicialization()
  {
    return inicialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInicialization(String newInicialization)
  {
    String oldInicialization = inicialization;
    inicialization = newInicialization;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.MAPPING__INICIALIZATION, oldInicialization, inicialization));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SmaCPackage.MAPPING__TYPE:
        return basicSetType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmaCPackage.MAPPING__TYPE:
        return getType();
      case SmaCPackage.MAPPING__ARRAY:
        return getArray();
      case SmaCPackage.MAPPING__CONSTANT:
        return getConstant();
      case SmaCPackage.MAPPING__VISIBILITY:
        return getVisibility();
      case SmaCPackage.MAPPING__STORAGE_DATA:
        return getStorageData();
      case SmaCPackage.MAPPING__NAME_MAPPING:
        return getNameMapping();
      case SmaCPackage.MAPPING__INICIALIZATION:
        return getInicialization();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmaCPackage.MAPPING__TYPE:
        setType((MappingDeclaration)newValue);
        return;
      case SmaCPackage.MAPPING__ARRAY:
        setArray((String)newValue);
        return;
      case SmaCPackage.MAPPING__CONSTANT:
        setConstant((String)newValue);
        return;
      case SmaCPackage.MAPPING__VISIBILITY:
        setVisibility((Visibility)newValue);
        return;
      case SmaCPackage.MAPPING__STORAGE_DATA:
        setStorageData((StorageData)newValue);
        return;
      case SmaCPackage.MAPPING__NAME_MAPPING:
        setNameMapping((String)newValue);
        return;
      case SmaCPackage.MAPPING__INICIALIZATION:
        setInicialization((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.MAPPING__TYPE:
        setType((MappingDeclaration)null);
        return;
      case SmaCPackage.MAPPING__ARRAY:
        setArray(ARRAY_EDEFAULT);
        return;
      case SmaCPackage.MAPPING__CONSTANT:
        setConstant(CONSTANT_EDEFAULT);
        return;
      case SmaCPackage.MAPPING__VISIBILITY:
        setVisibility(VISIBILITY_EDEFAULT);
        return;
      case SmaCPackage.MAPPING__STORAGE_DATA:
        setStorageData(STORAGE_DATA_EDEFAULT);
        return;
      case SmaCPackage.MAPPING__NAME_MAPPING:
        setNameMapping(NAME_MAPPING_EDEFAULT);
        return;
      case SmaCPackage.MAPPING__INICIALIZATION:
        setInicialization(INICIALIZATION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.MAPPING__TYPE:
        return type != null;
      case SmaCPackage.MAPPING__ARRAY:
        return ARRAY_EDEFAULT == null ? array != null : !ARRAY_EDEFAULT.equals(array);
      case SmaCPackage.MAPPING__CONSTANT:
        return CONSTANT_EDEFAULT == null ? constant != null : !CONSTANT_EDEFAULT.equals(constant);
      case SmaCPackage.MAPPING__VISIBILITY:
        return visibility != VISIBILITY_EDEFAULT;
      case SmaCPackage.MAPPING__STORAGE_DATA:
        return storageData != STORAGE_DATA_EDEFAULT;
      case SmaCPackage.MAPPING__NAME_MAPPING:
        return NAME_MAPPING_EDEFAULT == null ? nameMapping != null : !NAME_MAPPING_EDEFAULT.equals(nameMapping);
      case SmaCPackage.MAPPING__INICIALIZATION:
        return INICIALIZATION_EDEFAULT == null ? inicialization != null : !INICIALIZATION_EDEFAULT.equals(inicialization);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (array: ");
    result.append(array);
    result.append(", constant: ");
    result.append(constant);
    result.append(", visibility: ");
    result.append(visibility);
    result.append(", storageData: ");
    result.append(storageData);
    result.append(", nameMapping: ");
    result.append(nameMapping);
    result.append(", inicialization: ");
    result.append(inicialization);
    result.append(')');
    return result.toString();
  }

} //MappingImpl
