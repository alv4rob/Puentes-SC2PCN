/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.smaC.AbstractContract;
import org.xtext.smaC.Contract;
import org.xtext.smaC.File;
import org.xtext.smaC.Import;
import org.xtext.smaC.Interface;
import org.xtext.smaC.Library;
import org.xtext.smaC.SmaCPackage;
import org.xtext.smaC.Version;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>File</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaC.impl.FileImpl#getVersion <em>Version</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.FileImpl#getExperimentalVersion <em>Experimental Version</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.FileImpl#getLibrary <em>Library</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.FileImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.FileImpl#getInterfaces <em>Interfaces</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.FileImpl#getAbstractContracts <em>Abstract Contracts</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.FileImpl#getContracts <em>Contracts</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FileImpl extends MinimalEObjectImpl.Container implements File
{
  /**
   * The cached value of the '{@link #getVersion() <em>Version</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected Version version;

  /**
   * The default value of the '{@link #getExperimentalVersion() <em>Experimental Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExperimentalVersion()
   * @generated
   * @ordered
   */
  protected static final String EXPERIMENTAL_VERSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExperimentalVersion() <em>Experimental Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExperimentalVersion()
   * @generated
   * @ordered
   */
  protected String experimentalVersion = EXPERIMENTAL_VERSION_EDEFAULT;

  /**
   * The cached value of the '{@link #getLibrary() <em>Library</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLibrary()
   * @generated
   * @ordered
   */
  protected EList<Library> library;

  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<Import> imports;

  /**
   * The cached value of the '{@link #getInterfaces() <em>Interfaces</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInterfaces()
   * @generated
   * @ordered
   */
  protected EList<Interface> interfaces;

  /**
   * The cached value of the '{@link #getAbstractContracts() <em>Abstract Contracts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAbstractContracts()
   * @generated
   * @ordered
   */
  protected EList<AbstractContract> abstractContracts;

  /**
   * The cached value of the '{@link #getContracts() <em>Contracts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContracts()
   * @generated
   * @ordered
   */
  protected EList<Contract> contracts;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FileImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmaCPackage.Literals.FILE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Version getVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVersion(Version newVersion, NotificationChain msgs)
  {
    Version oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCPackage.FILE__VERSION, oldVersion, newVersion);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVersion(Version newVersion)
  {
    if (newVersion != version)
    {
      NotificationChain msgs = null;
      if (version != null)
        msgs = ((InternalEObject)version).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCPackage.FILE__VERSION, null, msgs);
      if (newVersion != null)
        msgs = ((InternalEObject)newVersion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCPackage.FILE__VERSION, null, msgs);
      msgs = basicSetVersion(newVersion, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.FILE__VERSION, newVersion, newVersion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExperimentalVersion()
  {
    return experimentalVersion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExperimentalVersion(String newExperimentalVersion)
  {
    String oldExperimentalVersion = experimentalVersion;
    experimentalVersion = newExperimentalVersion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.FILE__EXPERIMENTAL_VERSION, oldExperimentalVersion, experimentalVersion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Library> getLibrary()
  {
    if (library == null)
    {
      library = new EObjectContainmentEList<Library>(Library.class, this, SmaCPackage.FILE__LIBRARY);
    }
    return library;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Import> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<Import>(Import.class, this, SmaCPackage.FILE__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Interface> getInterfaces()
  {
    if (interfaces == null)
    {
      interfaces = new EObjectContainmentEList<Interface>(Interface.class, this, SmaCPackage.FILE__INTERFACES);
    }
    return interfaces;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AbstractContract> getAbstractContracts()
  {
    if (abstractContracts == null)
    {
      abstractContracts = new EObjectContainmentEList<AbstractContract>(AbstractContract.class, this, SmaCPackage.FILE__ABSTRACT_CONTRACTS);
    }
    return abstractContracts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Contract> getContracts()
  {
    if (contracts == null)
    {
      contracts = new EObjectContainmentEList<Contract>(Contract.class, this, SmaCPackage.FILE__CONTRACTS);
    }
    return contracts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SmaCPackage.FILE__VERSION:
        return basicSetVersion(null, msgs);
      case SmaCPackage.FILE__LIBRARY:
        return ((InternalEList<?>)getLibrary()).basicRemove(otherEnd, msgs);
      case SmaCPackage.FILE__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case SmaCPackage.FILE__INTERFACES:
        return ((InternalEList<?>)getInterfaces()).basicRemove(otherEnd, msgs);
      case SmaCPackage.FILE__ABSTRACT_CONTRACTS:
        return ((InternalEList<?>)getAbstractContracts()).basicRemove(otherEnd, msgs);
      case SmaCPackage.FILE__CONTRACTS:
        return ((InternalEList<?>)getContracts()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmaCPackage.FILE__VERSION:
        return getVersion();
      case SmaCPackage.FILE__EXPERIMENTAL_VERSION:
        return getExperimentalVersion();
      case SmaCPackage.FILE__LIBRARY:
        return getLibrary();
      case SmaCPackage.FILE__IMPORTS:
        return getImports();
      case SmaCPackage.FILE__INTERFACES:
        return getInterfaces();
      case SmaCPackage.FILE__ABSTRACT_CONTRACTS:
        return getAbstractContracts();
      case SmaCPackage.FILE__CONTRACTS:
        return getContracts();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmaCPackage.FILE__VERSION:
        setVersion((Version)newValue);
        return;
      case SmaCPackage.FILE__EXPERIMENTAL_VERSION:
        setExperimentalVersion((String)newValue);
        return;
      case SmaCPackage.FILE__LIBRARY:
        getLibrary().clear();
        getLibrary().addAll((Collection<? extends Library>)newValue);
        return;
      case SmaCPackage.FILE__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends Import>)newValue);
        return;
      case SmaCPackage.FILE__INTERFACES:
        getInterfaces().clear();
        getInterfaces().addAll((Collection<? extends Interface>)newValue);
        return;
      case SmaCPackage.FILE__ABSTRACT_CONTRACTS:
        getAbstractContracts().clear();
        getAbstractContracts().addAll((Collection<? extends AbstractContract>)newValue);
        return;
      case SmaCPackage.FILE__CONTRACTS:
        getContracts().clear();
        getContracts().addAll((Collection<? extends Contract>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.FILE__VERSION:
        setVersion((Version)null);
        return;
      case SmaCPackage.FILE__EXPERIMENTAL_VERSION:
        setExperimentalVersion(EXPERIMENTAL_VERSION_EDEFAULT);
        return;
      case SmaCPackage.FILE__LIBRARY:
        getLibrary().clear();
        return;
      case SmaCPackage.FILE__IMPORTS:
        getImports().clear();
        return;
      case SmaCPackage.FILE__INTERFACES:
        getInterfaces().clear();
        return;
      case SmaCPackage.FILE__ABSTRACT_CONTRACTS:
        getAbstractContracts().clear();
        return;
      case SmaCPackage.FILE__CONTRACTS:
        getContracts().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.FILE__VERSION:
        return version != null;
      case SmaCPackage.FILE__EXPERIMENTAL_VERSION:
        return EXPERIMENTAL_VERSION_EDEFAULT == null ? experimentalVersion != null : !EXPERIMENTAL_VERSION_EDEFAULT.equals(experimentalVersion);
      case SmaCPackage.FILE__LIBRARY:
        return library != null && !library.isEmpty();
      case SmaCPackage.FILE__IMPORTS:
        return imports != null && !imports.isEmpty();
      case SmaCPackage.FILE__INTERFACES:
        return interfaces != null && !interfaces.isEmpty();
      case SmaCPackage.FILE__ABSTRACT_CONTRACTS:
        return abstractContracts != null && !abstractContracts.isEmpty();
      case SmaCPackage.FILE__CONTRACTS:
        return contracts != null && !contracts.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (experimentalVersion: ");
    result.append(experimentalVersion);
    result.append(')');
    return result.toString();
  }

} //FileImpl
