/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.smaC.SmaCPackage;
import org.xtext.smaC.Version;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Version</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaC.impl.VersionImpl#getSymbol <em>Symbol</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.VersionImpl#getNumberVersion <em>Number Version</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.VersionImpl#getSymbolComparation <em>Symbol Comparation</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.VersionImpl#getNumberVersion2 <em>Number Version2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VersionImpl extends MinimalEObjectImpl.Container implements Version
{
  /**
   * The default value of the '{@link #getSymbol() <em>Symbol</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSymbol()
   * @generated
   * @ordered
   */
  protected static final String SYMBOL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSymbol() <em>Symbol</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSymbol()
   * @generated
   * @ordered
   */
  protected String symbol = SYMBOL_EDEFAULT;

  /**
   * The default value of the '{@link #getNumberVersion() <em>Number Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumberVersion()
   * @generated
   * @ordered
   */
  protected static final String NUMBER_VERSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNumberVersion() <em>Number Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumberVersion()
   * @generated
   * @ordered
   */
  protected String numberVersion = NUMBER_VERSION_EDEFAULT;

  /**
   * The default value of the '{@link #getSymbolComparation() <em>Symbol Comparation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSymbolComparation()
   * @generated
   * @ordered
   */
  protected static final String SYMBOL_COMPARATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSymbolComparation() <em>Symbol Comparation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSymbolComparation()
   * @generated
   * @ordered
   */
  protected String symbolComparation = SYMBOL_COMPARATION_EDEFAULT;

  /**
   * The default value of the '{@link #getNumberVersion2() <em>Number Version2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumberVersion2()
   * @generated
   * @ordered
   */
  protected static final String NUMBER_VERSION2_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNumberVersion2() <em>Number Version2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumberVersion2()
   * @generated
   * @ordered
   */
  protected String numberVersion2 = NUMBER_VERSION2_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VersionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmaCPackage.Literals.VERSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSymbol()
  {
    return symbol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSymbol(String newSymbol)
  {
    String oldSymbol = symbol;
    symbol = newSymbol;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.VERSION__SYMBOL, oldSymbol, symbol));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNumberVersion()
  {
    return numberVersion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNumberVersion(String newNumberVersion)
  {
    String oldNumberVersion = numberVersion;
    numberVersion = newNumberVersion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.VERSION__NUMBER_VERSION, oldNumberVersion, numberVersion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSymbolComparation()
  {
    return symbolComparation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSymbolComparation(String newSymbolComparation)
  {
    String oldSymbolComparation = symbolComparation;
    symbolComparation = newSymbolComparation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.VERSION__SYMBOL_COMPARATION, oldSymbolComparation, symbolComparation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNumberVersion2()
  {
    return numberVersion2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNumberVersion2(String newNumberVersion2)
  {
    String oldNumberVersion2 = numberVersion2;
    numberVersion2 = newNumberVersion2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.VERSION__NUMBER_VERSION2, oldNumberVersion2, numberVersion2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmaCPackage.VERSION__SYMBOL:
        return getSymbol();
      case SmaCPackage.VERSION__NUMBER_VERSION:
        return getNumberVersion();
      case SmaCPackage.VERSION__SYMBOL_COMPARATION:
        return getSymbolComparation();
      case SmaCPackage.VERSION__NUMBER_VERSION2:
        return getNumberVersion2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmaCPackage.VERSION__SYMBOL:
        setSymbol((String)newValue);
        return;
      case SmaCPackage.VERSION__NUMBER_VERSION:
        setNumberVersion((String)newValue);
        return;
      case SmaCPackage.VERSION__SYMBOL_COMPARATION:
        setSymbolComparation((String)newValue);
        return;
      case SmaCPackage.VERSION__NUMBER_VERSION2:
        setNumberVersion2((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.VERSION__SYMBOL:
        setSymbol(SYMBOL_EDEFAULT);
        return;
      case SmaCPackage.VERSION__NUMBER_VERSION:
        setNumberVersion(NUMBER_VERSION_EDEFAULT);
        return;
      case SmaCPackage.VERSION__SYMBOL_COMPARATION:
        setSymbolComparation(SYMBOL_COMPARATION_EDEFAULT);
        return;
      case SmaCPackage.VERSION__NUMBER_VERSION2:
        setNumberVersion2(NUMBER_VERSION2_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.VERSION__SYMBOL:
        return SYMBOL_EDEFAULT == null ? symbol != null : !SYMBOL_EDEFAULT.equals(symbol);
      case SmaCPackage.VERSION__NUMBER_VERSION:
        return NUMBER_VERSION_EDEFAULT == null ? numberVersion != null : !NUMBER_VERSION_EDEFAULT.equals(numberVersion);
      case SmaCPackage.VERSION__SYMBOL_COMPARATION:
        return SYMBOL_COMPARATION_EDEFAULT == null ? symbolComparation != null : !SYMBOL_COMPARATION_EDEFAULT.equals(symbolComparation);
      case SmaCPackage.VERSION__NUMBER_VERSION2:
        return NUMBER_VERSION2_EDEFAULT == null ? numberVersion2 != null : !NUMBER_VERSION2_EDEFAULT.equals(numberVersion2);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (symbol: ");
    result.append(symbol);
    result.append(", numberVersion: ");
    result.append(numberVersion);
    result.append(", symbolComparation: ");
    result.append(symbolComparation);
    result.append(", numberVersion2: ");
    result.append(numberVersion2);
    result.append(')');
    return result.toString();
  }

} //VersionImpl
