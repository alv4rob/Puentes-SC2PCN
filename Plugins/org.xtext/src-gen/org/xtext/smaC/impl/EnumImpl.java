/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.EDataTypeImpl;
import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtext.smaC.SmaCPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Enum</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaC.impl.EnumImpl#getNameEnumerator <em>Name Enumerator</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.EnumImpl#getValues <em>Values</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EnumImpl extends EDataTypeImpl implements org.xtext.smaC.Enum
{
  /**
   * The default value of the '{@link #getNameEnumerator() <em>Name Enumerator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameEnumerator()
   * @generated
   * @ordered
   */
  protected static final String NAME_ENUMERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNameEnumerator() <em>Name Enumerator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameEnumerator()
   * @generated
   * @ordered
   */
  protected String nameEnumerator = NAME_ENUMERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getValues() <em>Values</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValues()
   * @generated
   * @ordered
   */
  protected EList<String> values;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EnumImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmaCPackage.Literals.ENUM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNameEnumerator()
  {
    return nameEnumerator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNameEnumerator(String newNameEnumerator)
  {
    String oldNameEnumerator = nameEnumerator;
    nameEnumerator = newNameEnumerator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.ENUM__NAME_ENUMERATOR, oldNameEnumerator, nameEnumerator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getValues()
  {
    if (values == null)
    {
      values = new EDataTypeEList<String>(String.class, this, SmaCPackage.ENUM__VALUES);
    }
    return values;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmaCPackage.ENUM__NAME_ENUMERATOR:
        return getNameEnumerator();
      case SmaCPackage.ENUM__VALUES:
        return getValues();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmaCPackage.ENUM__NAME_ENUMERATOR:
        setNameEnumerator((String)newValue);
        return;
      case SmaCPackage.ENUM__VALUES:
        getValues().clear();
        getValues().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.ENUM__NAME_ENUMERATOR:
        setNameEnumerator(NAME_ENUMERATOR_EDEFAULT);
        return;
      case SmaCPackage.ENUM__VALUES:
        getValues().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.ENUM__NAME_ENUMERATOR:
        return NAME_ENUMERATOR_EDEFAULT == null ? nameEnumerator != null : !NAME_ENUMERATOR_EDEFAULT.equals(nameEnumerator);
      case SmaCPackage.ENUM__VALUES:
        return values != null && !values.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (nameEnumerator: ");
    result.append(nameEnumerator);
    result.append(", values: ");
    result.append(values);
    result.append(')');
    return result.toString();
  }

} //EnumImpl
