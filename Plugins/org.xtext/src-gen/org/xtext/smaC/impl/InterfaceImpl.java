/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.smaC.DeclarationFunctionInterface;
import org.xtext.smaC.Event;
import org.xtext.smaC.Interface;
import org.xtext.smaC.SmaCPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Interface</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaC.impl.InterfaceImpl#getInterfaceEvents <em>Interface Events</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.InterfaceImpl#getInterfaceFunction <em>Interface Function</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InterfaceImpl extends ElementImpl implements Interface
{
  /**
   * The cached value of the '{@link #getInterfaceEvents() <em>Interface Events</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInterfaceEvents()
   * @generated
   * @ordered
   */
  protected EList<Event> interfaceEvents;

  /**
   * The cached value of the '{@link #getInterfaceFunction() <em>Interface Function</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInterfaceFunction()
   * @generated
   * @ordered
   */
  protected EList<DeclarationFunctionInterface> interfaceFunction;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InterfaceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmaCPackage.Literals.INTERFACE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Event> getInterfaceEvents()
  {
    if (interfaceEvents == null)
    {
      interfaceEvents = new EObjectContainmentEList<Event>(Event.class, this, SmaCPackage.INTERFACE__INTERFACE_EVENTS);
    }
    return interfaceEvents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DeclarationFunctionInterface> getInterfaceFunction()
  {
    if (interfaceFunction == null)
    {
      interfaceFunction = new EObjectContainmentEList<DeclarationFunctionInterface>(DeclarationFunctionInterface.class, this, SmaCPackage.INTERFACE__INTERFACE_FUNCTION);
    }
    return interfaceFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SmaCPackage.INTERFACE__INTERFACE_EVENTS:
        return ((InternalEList<?>)getInterfaceEvents()).basicRemove(otherEnd, msgs);
      case SmaCPackage.INTERFACE__INTERFACE_FUNCTION:
        return ((InternalEList<?>)getInterfaceFunction()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmaCPackage.INTERFACE__INTERFACE_EVENTS:
        return getInterfaceEvents();
      case SmaCPackage.INTERFACE__INTERFACE_FUNCTION:
        return getInterfaceFunction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmaCPackage.INTERFACE__INTERFACE_EVENTS:
        getInterfaceEvents().clear();
        getInterfaceEvents().addAll((Collection<? extends Event>)newValue);
        return;
      case SmaCPackage.INTERFACE__INTERFACE_FUNCTION:
        getInterfaceFunction().clear();
        getInterfaceFunction().addAll((Collection<? extends DeclarationFunctionInterface>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.INTERFACE__INTERFACE_EVENTS:
        getInterfaceEvents().clear();
        return;
      case SmaCPackage.INTERFACE__INTERFACE_FUNCTION:
        getInterfaceFunction().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.INTERFACE__INTERFACE_EVENTS:
        return interfaceEvents != null && !interfaceEvents.isEmpty();
      case SmaCPackage.INTERFACE__INTERFACE_FUNCTION:
        return interfaceFunction != null && !interfaceFunction.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //InterfaceImpl
