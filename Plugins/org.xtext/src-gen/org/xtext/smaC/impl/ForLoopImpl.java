/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.smaC.Condition;
import org.xtext.smaC.ForLoop;
import org.xtext.smaC.Properties;
import org.xtext.smaC.RestrictionClause;
import org.xtext.smaC.RestrictionGas;
import org.xtext.smaC.SmaCPackage;
import org.xtext.smaC.UnDeterminedLoop;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Loop</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaC.impl.ForLoopImpl#getTypeCounter <em>Type Counter</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ForLoopImpl#getNameCounter <em>Name Counter</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ForLoopImpl#getValue <em>Value</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ForLoopImpl#getValueCounter <em>Value Counter</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ForLoopImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ForLoopImpl#getGasrestriction <em>Gasrestriction</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ForLoopImpl#getRestriction <em>Restriction</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ForLoopImpl#getProperties <em>Properties</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ForLoopImpl#getConditions <em>Conditions</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ForLoopImpl#getUndeterminedloops <em>Undeterminedloops</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ForLoopImpl#getDeterminedloops <em>Determinedloops</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ForLoopImpl#getExpressions <em>Expressions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForLoopImpl extends MinimalEObjectImpl.Container implements ForLoop
{
  /**
   * The default value of the '{@link #getTypeCounter() <em>Type Counter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeCounter()
   * @generated
   * @ordered
   */
  protected static final String TYPE_COUNTER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTypeCounter() <em>Type Counter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeCounter()
   * @generated
   * @ordered
   */
  protected String typeCounter = TYPE_COUNTER_EDEFAULT;

  /**
   * The default value of the '{@link #getNameCounter() <em>Name Counter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameCounter()
   * @generated
   * @ordered
   */
  protected static final String NAME_COUNTER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNameCounter() <em>Name Counter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameCounter()
   * @generated
   * @ordered
   */
  protected String nameCounter = NAME_COUNTER_EDEFAULT;

  /**
   * The default value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected static final int VALUE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected int value = VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getValueCounter() <em>Value Counter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueCounter()
   * @generated
   * @ordered
   */
  protected static final char VALUE_COUNTER_EDEFAULT = '\u0000';

  /**
   * The cached value of the '{@link #getValueCounter() <em>Value Counter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueCounter()
   * @generated
   * @ordered
   */
  protected char valueCounter = VALUE_COUNTER_EDEFAULT;

  /**
   * The default value of the '{@link #getCondition() <em>Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected static final String CONDITION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected String condition = CONDITION_EDEFAULT;

  /**
   * The cached value of the '{@link #getGasrestriction() <em>Gasrestriction</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGasrestriction()
   * @generated
   * @ordered
   */
  protected EList<RestrictionGas> gasrestriction;

  /**
   * The cached value of the '{@link #getRestriction() <em>Restriction</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRestriction()
   * @generated
   * @ordered
   */
  protected EList<RestrictionClause> restriction;

  /**
   * The cached value of the '{@link #getProperties() <em>Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperties()
   * @generated
   * @ordered
   */
  protected EList<Properties> properties;

  /**
   * The cached value of the '{@link #getConditions() <em>Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditions()
   * @generated
   * @ordered
   */
  protected EList<Condition> conditions;

  /**
   * The cached value of the '{@link #getUndeterminedloops() <em>Undeterminedloops</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUndeterminedloops()
   * @generated
   * @ordered
   */
  protected EList<UnDeterminedLoop> undeterminedloops;

  /**
   * The cached value of the '{@link #getDeterminedloops() <em>Determinedloops</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeterminedloops()
   * @generated
   * @ordered
   */
  protected EList<ForLoop> determinedloops;

  /**
   * The cached value of the '{@link #getExpressions() <em>Expressions</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressions()
   * @generated
   * @ordered
   */
  protected EList<String> expressions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForLoopImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmaCPackage.Literals.FOR_LOOP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTypeCounter()
  {
    return typeCounter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTypeCounter(String newTypeCounter)
  {
    String oldTypeCounter = typeCounter;
    typeCounter = newTypeCounter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.FOR_LOOP__TYPE_COUNTER, oldTypeCounter, typeCounter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNameCounter()
  {
    return nameCounter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNameCounter(String newNameCounter)
  {
    String oldNameCounter = nameCounter;
    nameCounter = newNameCounter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.FOR_LOOP__NAME_COUNTER, oldNameCounter, nameCounter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValue(int newValue)
  {
    int oldValue = value;
    value = newValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.FOR_LOOP__VALUE, oldValue, value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public char getValueCounter()
  {
    return valueCounter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueCounter(char newValueCounter)
  {
    char oldValueCounter = valueCounter;
    valueCounter = newValueCounter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.FOR_LOOP__VALUE_COUNTER, oldValueCounter, valueCounter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(String newCondition)
  {
    String oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.FOR_LOOP__CONDITION, oldCondition, condition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RestrictionGas> getGasrestriction()
  {
    if (gasrestriction == null)
    {
      gasrestriction = new EObjectContainmentEList<RestrictionGas>(RestrictionGas.class, this, SmaCPackage.FOR_LOOP__GASRESTRICTION);
    }
    return gasrestriction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RestrictionClause> getRestriction()
  {
    if (restriction == null)
    {
      restriction = new EObjectContainmentEList<RestrictionClause>(RestrictionClause.class, this, SmaCPackage.FOR_LOOP__RESTRICTION);
    }
    return restriction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Properties> getProperties()
  {
    if (properties == null)
    {
      properties = new EObjectContainmentEList<Properties>(Properties.class, this, SmaCPackage.FOR_LOOP__PROPERTIES);
    }
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Condition> getConditions()
  {
    if (conditions == null)
    {
      conditions = new EObjectContainmentEList<Condition>(Condition.class, this, SmaCPackage.FOR_LOOP__CONDITIONS);
    }
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UnDeterminedLoop> getUndeterminedloops()
  {
    if (undeterminedloops == null)
    {
      undeterminedloops = new EObjectContainmentEList<UnDeterminedLoop>(UnDeterminedLoop.class, this, SmaCPackage.FOR_LOOP__UNDETERMINEDLOOPS);
    }
    return undeterminedloops;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ForLoop> getDeterminedloops()
  {
    if (determinedloops == null)
    {
      determinedloops = new EObjectContainmentEList<ForLoop>(ForLoop.class, this, SmaCPackage.FOR_LOOP__DETERMINEDLOOPS);
    }
    return determinedloops;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getExpressions()
  {
    if (expressions == null)
    {
      expressions = new EDataTypeEList<String>(String.class, this, SmaCPackage.FOR_LOOP__EXPRESSIONS);
    }
    return expressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SmaCPackage.FOR_LOOP__GASRESTRICTION:
        return ((InternalEList<?>)getGasrestriction()).basicRemove(otherEnd, msgs);
      case SmaCPackage.FOR_LOOP__RESTRICTION:
        return ((InternalEList<?>)getRestriction()).basicRemove(otherEnd, msgs);
      case SmaCPackage.FOR_LOOP__PROPERTIES:
        return ((InternalEList<?>)getProperties()).basicRemove(otherEnd, msgs);
      case SmaCPackage.FOR_LOOP__CONDITIONS:
        return ((InternalEList<?>)getConditions()).basicRemove(otherEnd, msgs);
      case SmaCPackage.FOR_LOOP__UNDETERMINEDLOOPS:
        return ((InternalEList<?>)getUndeterminedloops()).basicRemove(otherEnd, msgs);
      case SmaCPackage.FOR_LOOP__DETERMINEDLOOPS:
        return ((InternalEList<?>)getDeterminedloops()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmaCPackage.FOR_LOOP__TYPE_COUNTER:
        return getTypeCounter();
      case SmaCPackage.FOR_LOOP__NAME_COUNTER:
        return getNameCounter();
      case SmaCPackage.FOR_LOOP__VALUE:
        return getValue();
      case SmaCPackage.FOR_LOOP__VALUE_COUNTER:
        return getValueCounter();
      case SmaCPackage.FOR_LOOP__CONDITION:
        return getCondition();
      case SmaCPackage.FOR_LOOP__GASRESTRICTION:
        return getGasrestriction();
      case SmaCPackage.FOR_LOOP__RESTRICTION:
        return getRestriction();
      case SmaCPackage.FOR_LOOP__PROPERTIES:
        return getProperties();
      case SmaCPackage.FOR_LOOP__CONDITIONS:
        return getConditions();
      case SmaCPackage.FOR_LOOP__UNDETERMINEDLOOPS:
        return getUndeterminedloops();
      case SmaCPackage.FOR_LOOP__DETERMINEDLOOPS:
        return getDeterminedloops();
      case SmaCPackage.FOR_LOOP__EXPRESSIONS:
        return getExpressions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmaCPackage.FOR_LOOP__TYPE_COUNTER:
        setTypeCounter((String)newValue);
        return;
      case SmaCPackage.FOR_LOOP__NAME_COUNTER:
        setNameCounter((String)newValue);
        return;
      case SmaCPackage.FOR_LOOP__VALUE:
        setValue((Integer)newValue);
        return;
      case SmaCPackage.FOR_LOOP__VALUE_COUNTER:
        setValueCounter((Character)newValue);
        return;
      case SmaCPackage.FOR_LOOP__CONDITION:
        setCondition((String)newValue);
        return;
      case SmaCPackage.FOR_LOOP__GASRESTRICTION:
        getGasrestriction().clear();
        getGasrestriction().addAll((Collection<? extends RestrictionGas>)newValue);
        return;
      case SmaCPackage.FOR_LOOP__RESTRICTION:
        getRestriction().clear();
        getRestriction().addAll((Collection<? extends RestrictionClause>)newValue);
        return;
      case SmaCPackage.FOR_LOOP__PROPERTIES:
        getProperties().clear();
        getProperties().addAll((Collection<? extends Properties>)newValue);
        return;
      case SmaCPackage.FOR_LOOP__CONDITIONS:
        getConditions().clear();
        getConditions().addAll((Collection<? extends Condition>)newValue);
        return;
      case SmaCPackage.FOR_LOOP__UNDETERMINEDLOOPS:
        getUndeterminedloops().clear();
        getUndeterminedloops().addAll((Collection<? extends UnDeterminedLoop>)newValue);
        return;
      case SmaCPackage.FOR_LOOP__DETERMINEDLOOPS:
        getDeterminedloops().clear();
        getDeterminedloops().addAll((Collection<? extends ForLoop>)newValue);
        return;
      case SmaCPackage.FOR_LOOP__EXPRESSIONS:
        getExpressions().clear();
        getExpressions().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.FOR_LOOP__TYPE_COUNTER:
        setTypeCounter(TYPE_COUNTER_EDEFAULT);
        return;
      case SmaCPackage.FOR_LOOP__NAME_COUNTER:
        setNameCounter(NAME_COUNTER_EDEFAULT);
        return;
      case SmaCPackage.FOR_LOOP__VALUE:
        setValue(VALUE_EDEFAULT);
        return;
      case SmaCPackage.FOR_LOOP__VALUE_COUNTER:
        setValueCounter(VALUE_COUNTER_EDEFAULT);
        return;
      case SmaCPackage.FOR_LOOP__CONDITION:
        setCondition(CONDITION_EDEFAULT);
        return;
      case SmaCPackage.FOR_LOOP__GASRESTRICTION:
        getGasrestriction().clear();
        return;
      case SmaCPackage.FOR_LOOP__RESTRICTION:
        getRestriction().clear();
        return;
      case SmaCPackage.FOR_LOOP__PROPERTIES:
        getProperties().clear();
        return;
      case SmaCPackage.FOR_LOOP__CONDITIONS:
        getConditions().clear();
        return;
      case SmaCPackage.FOR_LOOP__UNDETERMINEDLOOPS:
        getUndeterminedloops().clear();
        return;
      case SmaCPackage.FOR_LOOP__DETERMINEDLOOPS:
        getDeterminedloops().clear();
        return;
      case SmaCPackage.FOR_LOOP__EXPRESSIONS:
        getExpressions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.FOR_LOOP__TYPE_COUNTER:
        return TYPE_COUNTER_EDEFAULT == null ? typeCounter != null : !TYPE_COUNTER_EDEFAULT.equals(typeCounter);
      case SmaCPackage.FOR_LOOP__NAME_COUNTER:
        return NAME_COUNTER_EDEFAULT == null ? nameCounter != null : !NAME_COUNTER_EDEFAULT.equals(nameCounter);
      case SmaCPackage.FOR_LOOP__VALUE:
        return value != VALUE_EDEFAULT;
      case SmaCPackage.FOR_LOOP__VALUE_COUNTER:
        return valueCounter != VALUE_COUNTER_EDEFAULT;
      case SmaCPackage.FOR_LOOP__CONDITION:
        return CONDITION_EDEFAULT == null ? condition != null : !CONDITION_EDEFAULT.equals(condition);
      case SmaCPackage.FOR_LOOP__GASRESTRICTION:
        return gasrestriction != null && !gasrestriction.isEmpty();
      case SmaCPackage.FOR_LOOP__RESTRICTION:
        return restriction != null && !restriction.isEmpty();
      case SmaCPackage.FOR_LOOP__PROPERTIES:
        return properties != null && !properties.isEmpty();
      case SmaCPackage.FOR_LOOP__CONDITIONS:
        return conditions != null && !conditions.isEmpty();
      case SmaCPackage.FOR_LOOP__UNDETERMINEDLOOPS:
        return undeterminedloops != null && !undeterminedloops.isEmpty();
      case SmaCPackage.FOR_LOOP__DETERMINEDLOOPS:
        return determinedloops != null && !determinedloops.isEmpty();
      case SmaCPackage.FOR_LOOP__EXPRESSIONS:
        return expressions != null && !expressions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (typeCounter: ");
    result.append(typeCounter);
    result.append(", nameCounter: ");
    result.append(nameCounter);
    result.append(", value: ");
    result.append(value);
    result.append(", valueCounter: ");
    result.append(valueCounter);
    result.append(", condition: ");
    result.append(condition);
    result.append(", expressions: ");
    result.append(expressions);
    result.append(')');
    return result.toString();
  }

} //ForLoopImpl
