/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.smaC.Condition;
import org.xtext.smaC.Constructor;
import org.xtext.smaC.Contract;
import org.xtext.smaC.ForLoop;
import org.xtext.smaC.InputParam;
import org.xtext.smaC.RestrictionClause;
import org.xtext.smaC.SmaCPackage;
import org.xtext.smaC.UnDeterminedLoop;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Constructor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaC.impl.ConstructorImpl#getInputParams <em>Input Params</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ConstructorImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ConstructorImpl#getConstructorContractInherance <em>Constructor Contract Inherance</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ConstructorImpl#getInputParamsConstructorContractInherance <em>Input Params Constructor Contract Inherance</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ConstructorImpl#getPayable <em>Payable</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ConstructorImpl#getRestrictions <em>Restrictions</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ConstructorImpl#getConditions <em>Conditions</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ConstructorImpl#getUndeterminedLoops <em>Undetermined Loops</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ConstructorImpl#getDeterminedLoops <em>Determined Loops</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.ConstructorImpl#getAttributesInitialization <em>Attributes Initialization</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConstructorImpl extends MinimalEObjectImpl.Container implements Constructor
{
  /**
   * The cached value of the '{@link #getInputParams() <em>Input Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputParams()
   * @generated
   * @ordered
   */
  protected EList<InputParam> inputParams;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getConstructorContractInherance() <em>Constructor Contract Inherance</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstructorContractInherance()
   * @generated
   * @ordered
   */
  protected EList<Contract> constructorContractInherance;

  /**
   * The cached value of the '{@link #getInputParamsConstructorContractInherance() <em>Input Params Constructor Contract Inherance</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputParamsConstructorContractInherance()
   * @generated
   * @ordered
   */
  protected EList<InputParam> inputParamsConstructorContractInherance;

  /**
   * The default value of the '{@link #getPayable() <em>Payable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPayable()
   * @generated
   * @ordered
   */
  protected static final String PAYABLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPayable() <em>Payable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPayable()
   * @generated
   * @ordered
   */
  protected String payable = PAYABLE_EDEFAULT;

  /**
   * The cached value of the '{@link #getRestrictions() <em>Restrictions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRestrictions()
   * @generated
   * @ordered
   */
  protected EList<RestrictionClause> restrictions;

  /**
   * The cached value of the '{@link #getConditions() <em>Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditions()
   * @generated
   * @ordered
   */
  protected EList<Condition> conditions;

  /**
   * The cached value of the '{@link #getUndeterminedLoops() <em>Undetermined Loops</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUndeterminedLoops()
   * @generated
   * @ordered
   */
  protected EList<UnDeterminedLoop> undeterminedLoops;

  /**
   * The cached value of the '{@link #getDeterminedLoops() <em>Determined Loops</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeterminedLoops()
   * @generated
   * @ordered
   */
  protected EList<ForLoop> determinedLoops;

  /**
   * The cached value of the '{@link #getAttributesInitialization() <em>Attributes Initialization</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributesInitialization()
   * @generated
   * @ordered
   */
  protected EList<String> attributesInitialization;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConstructorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmaCPackage.Literals.CONSTRUCTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InputParam> getInputParams()
  {
    if (inputParams == null)
    {
      inputParams = new EObjectContainmentEList<InputParam>(InputParam.class, this, SmaCPackage.CONSTRUCTOR__INPUT_PARAMS);
    }
    return inputParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.CONSTRUCTOR__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Contract> getConstructorContractInherance()
  {
    if (constructorContractInherance == null)
    {
      constructorContractInherance = new EObjectResolvingEList<Contract>(Contract.class, this, SmaCPackage.CONSTRUCTOR__CONSTRUCTOR_CONTRACT_INHERANCE);
    }
    return constructorContractInherance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InputParam> getInputParamsConstructorContractInherance()
  {
    if (inputParamsConstructorContractInherance == null)
    {
      inputParamsConstructorContractInherance = new EObjectContainmentEList<InputParam>(InputParam.class, this, SmaCPackage.CONSTRUCTOR__INPUT_PARAMS_CONSTRUCTOR_CONTRACT_INHERANCE);
    }
    return inputParamsConstructorContractInherance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPayable()
  {
    return payable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPayable(String newPayable)
  {
    String oldPayable = payable;
    payable = newPayable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.CONSTRUCTOR__PAYABLE, oldPayable, payable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RestrictionClause> getRestrictions()
  {
    if (restrictions == null)
    {
      restrictions = new EObjectContainmentEList<RestrictionClause>(RestrictionClause.class, this, SmaCPackage.CONSTRUCTOR__RESTRICTIONS);
    }
    return restrictions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Condition> getConditions()
  {
    if (conditions == null)
    {
      conditions = new EObjectContainmentEList<Condition>(Condition.class, this, SmaCPackage.CONSTRUCTOR__CONDITIONS);
    }
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UnDeterminedLoop> getUndeterminedLoops()
  {
    if (undeterminedLoops == null)
    {
      undeterminedLoops = new EObjectContainmentEList<UnDeterminedLoop>(UnDeterminedLoop.class, this, SmaCPackage.CONSTRUCTOR__UNDETERMINED_LOOPS);
    }
    return undeterminedLoops;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ForLoop> getDeterminedLoops()
  {
    if (determinedLoops == null)
    {
      determinedLoops = new EObjectContainmentEList<ForLoop>(ForLoop.class, this, SmaCPackage.CONSTRUCTOR__DETERMINED_LOOPS);
    }
    return determinedLoops;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getAttributesInitialization()
  {
    if (attributesInitialization == null)
    {
      attributesInitialization = new EDataTypeEList<String>(String.class, this, SmaCPackage.CONSTRUCTOR__ATTRIBUTES_INITIALIZATION);
    }
    return attributesInitialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SmaCPackage.CONSTRUCTOR__INPUT_PARAMS:
        return ((InternalEList<?>)getInputParams()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CONSTRUCTOR__INPUT_PARAMS_CONSTRUCTOR_CONTRACT_INHERANCE:
        return ((InternalEList<?>)getInputParamsConstructorContractInherance()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CONSTRUCTOR__RESTRICTIONS:
        return ((InternalEList<?>)getRestrictions()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CONSTRUCTOR__CONDITIONS:
        return ((InternalEList<?>)getConditions()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CONSTRUCTOR__UNDETERMINED_LOOPS:
        return ((InternalEList<?>)getUndeterminedLoops()).basicRemove(otherEnd, msgs);
      case SmaCPackage.CONSTRUCTOR__DETERMINED_LOOPS:
        return ((InternalEList<?>)getDeterminedLoops()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmaCPackage.CONSTRUCTOR__INPUT_PARAMS:
        return getInputParams();
      case SmaCPackage.CONSTRUCTOR__TYPE:
        return getType();
      case SmaCPackage.CONSTRUCTOR__CONSTRUCTOR_CONTRACT_INHERANCE:
        return getConstructorContractInherance();
      case SmaCPackage.CONSTRUCTOR__INPUT_PARAMS_CONSTRUCTOR_CONTRACT_INHERANCE:
        return getInputParamsConstructorContractInherance();
      case SmaCPackage.CONSTRUCTOR__PAYABLE:
        return getPayable();
      case SmaCPackage.CONSTRUCTOR__RESTRICTIONS:
        return getRestrictions();
      case SmaCPackage.CONSTRUCTOR__CONDITIONS:
        return getConditions();
      case SmaCPackage.CONSTRUCTOR__UNDETERMINED_LOOPS:
        return getUndeterminedLoops();
      case SmaCPackage.CONSTRUCTOR__DETERMINED_LOOPS:
        return getDeterminedLoops();
      case SmaCPackage.CONSTRUCTOR__ATTRIBUTES_INITIALIZATION:
        return getAttributesInitialization();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmaCPackage.CONSTRUCTOR__INPUT_PARAMS:
        getInputParams().clear();
        getInputParams().addAll((Collection<? extends InputParam>)newValue);
        return;
      case SmaCPackage.CONSTRUCTOR__TYPE:
        setType((String)newValue);
        return;
      case SmaCPackage.CONSTRUCTOR__CONSTRUCTOR_CONTRACT_INHERANCE:
        getConstructorContractInherance().clear();
        getConstructorContractInherance().addAll((Collection<? extends Contract>)newValue);
        return;
      case SmaCPackage.CONSTRUCTOR__INPUT_PARAMS_CONSTRUCTOR_CONTRACT_INHERANCE:
        getInputParamsConstructorContractInherance().clear();
        getInputParamsConstructorContractInherance().addAll((Collection<? extends InputParam>)newValue);
        return;
      case SmaCPackage.CONSTRUCTOR__PAYABLE:
        setPayable((String)newValue);
        return;
      case SmaCPackage.CONSTRUCTOR__RESTRICTIONS:
        getRestrictions().clear();
        getRestrictions().addAll((Collection<? extends RestrictionClause>)newValue);
        return;
      case SmaCPackage.CONSTRUCTOR__CONDITIONS:
        getConditions().clear();
        getConditions().addAll((Collection<? extends Condition>)newValue);
        return;
      case SmaCPackage.CONSTRUCTOR__UNDETERMINED_LOOPS:
        getUndeterminedLoops().clear();
        getUndeterminedLoops().addAll((Collection<? extends UnDeterminedLoop>)newValue);
        return;
      case SmaCPackage.CONSTRUCTOR__DETERMINED_LOOPS:
        getDeterminedLoops().clear();
        getDeterminedLoops().addAll((Collection<? extends ForLoop>)newValue);
        return;
      case SmaCPackage.CONSTRUCTOR__ATTRIBUTES_INITIALIZATION:
        getAttributesInitialization().clear();
        getAttributesInitialization().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.CONSTRUCTOR__INPUT_PARAMS:
        getInputParams().clear();
        return;
      case SmaCPackage.CONSTRUCTOR__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case SmaCPackage.CONSTRUCTOR__CONSTRUCTOR_CONTRACT_INHERANCE:
        getConstructorContractInherance().clear();
        return;
      case SmaCPackage.CONSTRUCTOR__INPUT_PARAMS_CONSTRUCTOR_CONTRACT_INHERANCE:
        getInputParamsConstructorContractInherance().clear();
        return;
      case SmaCPackage.CONSTRUCTOR__PAYABLE:
        setPayable(PAYABLE_EDEFAULT);
        return;
      case SmaCPackage.CONSTRUCTOR__RESTRICTIONS:
        getRestrictions().clear();
        return;
      case SmaCPackage.CONSTRUCTOR__CONDITIONS:
        getConditions().clear();
        return;
      case SmaCPackage.CONSTRUCTOR__UNDETERMINED_LOOPS:
        getUndeterminedLoops().clear();
        return;
      case SmaCPackage.CONSTRUCTOR__DETERMINED_LOOPS:
        getDeterminedLoops().clear();
        return;
      case SmaCPackage.CONSTRUCTOR__ATTRIBUTES_INITIALIZATION:
        getAttributesInitialization().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.CONSTRUCTOR__INPUT_PARAMS:
        return inputParams != null && !inputParams.isEmpty();
      case SmaCPackage.CONSTRUCTOR__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case SmaCPackage.CONSTRUCTOR__CONSTRUCTOR_CONTRACT_INHERANCE:
        return constructorContractInherance != null && !constructorContractInherance.isEmpty();
      case SmaCPackage.CONSTRUCTOR__INPUT_PARAMS_CONSTRUCTOR_CONTRACT_INHERANCE:
        return inputParamsConstructorContractInherance != null && !inputParamsConstructorContractInherance.isEmpty();
      case SmaCPackage.CONSTRUCTOR__PAYABLE:
        return PAYABLE_EDEFAULT == null ? payable != null : !PAYABLE_EDEFAULT.equals(payable);
      case SmaCPackage.CONSTRUCTOR__RESTRICTIONS:
        return restrictions != null && !restrictions.isEmpty();
      case SmaCPackage.CONSTRUCTOR__CONDITIONS:
        return conditions != null && !conditions.isEmpty();
      case SmaCPackage.CONSTRUCTOR__UNDETERMINED_LOOPS:
        return undeterminedLoops != null && !undeterminedLoops.isEmpty();
      case SmaCPackage.CONSTRUCTOR__DETERMINED_LOOPS:
        return determinedLoops != null && !determinedLoops.isEmpty();
      case SmaCPackage.CONSTRUCTOR__ATTRIBUTES_INITIALIZATION:
        return attributesInitialization != null && !attributesInitialization.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(", payable: ");
    result.append(payable);
    result.append(", attributesInitialization: ");
    result.append(attributesInitialization);
    result.append(')');
    return result.toString();
  }

} //ConstructorImpl
