/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.smaC.ComparationOperator;
import org.xtext.smaC.RestrictionClause;
import org.xtext.smaC.SmaCPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Restriction Clause</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaC.impl.RestrictionClauseImpl#getExpr1 <em>Expr1</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.RestrictionClauseImpl#getOperator <em>Operator</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RestrictionClauseImpl extends MinimalEObjectImpl.Container implements RestrictionClause
{
  /**
   * The default value of the '{@link #getExpr1() <em>Expr1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr1()
   * @generated
   * @ordered
   */
  protected static final String EXPR1_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExpr1() <em>Expr1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr1()
   * @generated
   * @ordered
   */
  protected String expr1 = EXPR1_EDEFAULT;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final ComparationOperator OPERATOR_EDEFAULT = ComparationOperator.GREATHER_THAN;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected ComparationOperator operator = OPERATOR_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RestrictionClauseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmaCPackage.Literals.RESTRICTION_CLAUSE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExpr1()
  {
    return expr1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpr1(String newExpr1)
  {
    String oldExpr1 = expr1;
    expr1 = newExpr1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.RESTRICTION_CLAUSE__EXPR1, oldExpr1, expr1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparationOperator getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(ComparationOperator newOperator)
  {
    ComparationOperator oldOperator = operator;
    operator = newOperator == null ? OPERATOR_EDEFAULT : newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.RESTRICTION_CLAUSE__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmaCPackage.RESTRICTION_CLAUSE__EXPR1:
        return getExpr1();
      case SmaCPackage.RESTRICTION_CLAUSE__OPERATOR:
        return getOperator();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmaCPackage.RESTRICTION_CLAUSE__EXPR1:
        setExpr1((String)newValue);
        return;
      case SmaCPackage.RESTRICTION_CLAUSE__OPERATOR:
        setOperator((ComparationOperator)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.RESTRICTION_CLAUSE__EXPR1:
        setExpr1(EXPR1_EDEFAULT);
        return;
      case SmaCPackage.RESTRICTION_CLAUSE__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.RESTRICTION_CLAUSE__EXPR1:
        return EXPR1_EDEFAULT == null ? expr1 != null : !EXPR1_EDEFAULT.equals(expr1);
      case SmaCPackage.RESTRICTION_CLAUSE__OPERATOR:
        return operator != OPERATOR_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (expr1: ");
    result.append(expr1);
    result.append(", operator: ");
    result.append(operator);
    result.append(')');
    return result.toString();
  }

} //RestrictionClauseImpl
