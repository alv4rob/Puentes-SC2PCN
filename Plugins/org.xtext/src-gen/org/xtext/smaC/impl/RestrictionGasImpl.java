/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.smaC.Coin;
import org.xtext.smaC.RestrictionGas;
import org.xtext.smaC.SmaCPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Restriction Gas</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaC.impl.RestrictionGasImpl#getAmount <em>Amount</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.RestrictionGasImpl#getTypeCoin <em>Type Coin</em>}</li>
 *   <li>{@link org.xtext.smaC.impl.RestrictionGasImpl#getMessage <em>Message</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RestrictionGasImpl extends RestrictionClauseImpl implements RestrictionGas
{
  /**
   * The default value of the '{@link #getAmount() <em>Amount</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAmount()
   * @generated
   * @ordered
   */
  protected static final String AMOUNT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAmount() <em>Amount</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAmount()
   * @generated
   * @ordered
   */
  protected String amount = AMOUNT_EDEFAULT;

  /**
   * The default value of the '{@link #getTypeCoin() <em>Type Coin</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeCoin()
   * @generated
   * @ordered
   */
  protected static final Coin TYPE_COIN_EDEFAULT = Coin.ETHER;

  /**
   * The cached value of the '{@link #getTypeCoin() <em>Type Coin</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeCoin()
   * @generated
   * @ordered
   */
  protected Coin typeCoin = TYPE_COIN_EDEFAULT;

  /**
   * The default value of the '{@link #getMessage() <em>Message</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessage()
   * @generated
   * @ordered
   */
  protected static final String MESSAGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMessage() <em>Message</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessage()
   * @generated
   * @ordered
   */
  protected String message = MESSAGE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RestrictionGasImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmaCPackage.Literals.RESTRICTION_GAS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAmount()
  {
    return amount;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAmount(String newAmount)
  {
    String oldAmount = amount;
    amount = newAmount;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.RESTRICTION_GAS__AMOUNT, oldAmount, amount));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Coin getTypeCoin()
  {
    return typeCoin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTypeCoin(Coin newTypeCoin)
  {
    Coin oldTypeCoin = typeCoin;
    typeCoin = newTypeCoin == null ? TYPE_COIN_EDEFAULT : newTypeCoin;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.RESTRICTION_GAS__TYPE_COIN, oldTypeCoin, typeCoin));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMessage()
  {
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMessage(String newMessage)
  {
    String oldMessage = message;
    message = newMessage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmaCPackage.RESTRICTION_GAS__MESSAGE, oldMessage, message));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmaCPackage.RESTRICTION_GAS__AMOUNT:
        return getAmount();
      case SmaCPackage.RESTRICTION_GAS__TYPE_COIN:
        return getTypeCoin();
      case SmaCPackage.RESTRICTION_GAS__MESSAGE:
        return getMessage();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmaCPackage.RESTRICTION_GAS__AMOUNT:
        setAmount((String)newValue);
        return;
      case SmaCPackage.RESTRICTION_GAS__TYPE_COIN:
        setTypeCoin((Coin)newValue);
        return;
      case SmaCPackage.RESTRICTION_GAS__MESSAGE:
        setMessage((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.RESTRICTION_GAS__AMOUNT:
        setAmount(AMOUNT_EDEFAULT);
        return;
      case SmaCPackage.RESTRICTION_GAS__TYPE_COIN:
        setTypeCoin(TYPE_COIN_EDEFAULT);
        return;
      case SmaCPackage.RESTRICTION_GAS__MESSAGE:
        setMessage(MESSAGE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmaCPackage.RESTRICTION_GAS__AMOUNT:
        return AMOUNT_EDEFAULT == null ? amount != null : !AMOUNT_EDEFAULT.equals(amount);
      case SmaCPackage.RESTRICTION_GAS__TYPE_COIN:
        return typeCoin != TYPE_COIN_EDEFAULT;
      case SmaCPackage.RESTRICTION_GAS__MESSAGE:
        return MESSAGE_EDEFAULT == null ? message != null : !MESSAGE_EDEFAULT.equals(message);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (amount: ");
    result.append(amount);
    result.append(", typeCoin: ");
    result.append(typeCoin);
    result.append(", message: ");
    result.append(message);
    result.append(')');
    return result.toString();
  }

} //RestrictionGasImpl
