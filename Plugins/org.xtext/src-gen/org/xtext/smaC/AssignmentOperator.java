/**
 * generated by Xtext 2.34.0
 */
package org.xtext.smaC;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Assignment Operator</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see org.xtext.smaC.SmaCPackage#getAssignmentOperator()
 * @model
 * @generated
 */
public enum AssignmentOperator implements Enumerator
{
  /**
   * The '<em><b>ASSIGNMENT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ASSIGNMENT_VALUE
   * @generated
   * @ordered
   */
  ASSIGNMENT(0, "ASSIGNMENT", "="),

  /**
   * The '<em><b>ADDASSIGNMENT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ADDASSIGNMENT_VALUE
   * @generated
   * @ordered
   */
  ADDASSIGNMENT(1, "ADDASSIGNMENT", "+="),

  /**
   * The '<em><b>LESSASSIGNMENT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #LESSASSIGNMENT_VALUE
   * @generated
   * @ordered
   */
  LESSASSIGNMENT(2, "LESSASSIGNMENT", "-="),

  /**
   * The '<em><b>MULTIPLYASSIGNMENT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MULTIPLYASSIGNMENT_VALUE
   * @generated
   * @ordered
   */
  MULTIPLYASSIGNMENT(3, "MULTIPLYASSIGNMENT", "*="),

  /**
   * The '<em><b>DIVIDEASSIGNMENT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DIVIDEASSIGNMENT_VALUE
   * @generated
   * @ordered
   */
  DIVIDEASSIGNMENT(4, "DIVIDEASSIGNMENT", "/="),

  /**
   * The '<em><b>MODULOASSIGNMENT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MODULOASSIGNMENT_VALUE
   * @generated
   * @ordered
   */
  MODULOASSIGNMENT(5, "MODULOASSIGNMENT", "%=");

  /**
   * The '<em><b>ASSIGNMENT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ASSIGNMENT
   * @model literal="="
   * @generated
   * @ordered
   */
  public static final int ASSIGNMENT_VALUE = 0;

  /**
   * The '<em><b>ADDASSIGNMENT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ADDASSIGNMENT
   * @model literal="+="
   * @generated
   * @ordered
   */
  public static final int ADDASSIGNMENT_VALUE = 1;

  /**
   * The '<em><b>LESSASSIGNMENT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #LESSASSIGNMENT
   * @model literal="-="
   * @generated
   * @ordered
   */
  public static final int LESSASSIGNMENT_VALUE = 2;

  /**
   * The '<em><b>MULTIPLYASSIGNMENT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MULTIPLYASSIGNMENT
   * @model literal="*="
   * @generated
   * @ordered
   */
  public static final int MULTIPLYASSIGNMENT_VALUE = 3;

  /**
   * The '<em><b>DIVIDEASSIGNMENT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DIVIDEASSIGNMENT
   * @model literal="/="
   * @generated
   * @ordered
   */
  public static final int DIVIDEASSIGNMENT_VALUE = 4;

  /**
   * The '<em><b>MODULOASSIGNMENT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MODULOASSIGNMENT
   * @model literal="%="
   * @generated
   * @ordered
   */
  public static final int MODULOASSIGNMENT_VALUE = 5;

  /**
   * An array of all the '<em><b>Assignment Operator</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final AssignmentOperator[] VALUES_ARRAY =
    new AssignmentOperator[]
    {
      ASSIGNMENT,
      ADDASSIGNMENT,
      LESSASSIGNMENT,
      MULTIPLYASSIGNMENT,
      DIVIDEASSIGNMENT,
      MODULOASSIGNMENT,
    };

  /**
   * A public read-only list of all the '<em><b>Assignment Operator</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<AssignmentOperator> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Assignment Operator</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static AssignmentOperator get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      AssignmentOperator result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Assignment Operator</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static AssignmentOperator getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      AssignmentOperator result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Assignment Operator</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static AssignmentOperator get(int value)
  {
    switch (value)
    {
      case ASSIGNMENT_VALUE: return ASSIGNMENT;
      case ADDASSIGNMENT_VALUE: return ADDASSIGNMENT;
      case LESSASSIGNMENT_VALUE: return LESSASSIGNMENT;
      case MULTIPLYASSIGNMENT_VALUE: return MULTIPLYASSIGNMENT;
      case DIVIDEASSIGNMENT_VALUE: return DIVIDEASSIGNMENT;
      case MODULOASSIGNMENT_VALUE: return MODULOASSIGNMENT;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private AssignmentOperator(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //AssignmentOperator
