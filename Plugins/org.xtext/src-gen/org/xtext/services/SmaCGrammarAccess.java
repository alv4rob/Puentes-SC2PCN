/*
 * generated by Xtext 2.34.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmaCGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVersionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVersionVersionParserRuleCall_0_0 = (RuleCall)cVersionAssignment_0.eContents().get(0);
		private final Assignment cExperimentalVersionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExperimentalVersionExperimentalVersionParserRuleCall_1_0 = (RuleCall)cExperimentalVersionAssignment_1.eContents().get(0);
		private final Assignment cLibraryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLibraryLibraryParserRuleCall_2_0 = (RuleCall)cLibraryAssignment_2.eContents().get(0);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cInterfacesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInterfacesInterfaceParserRuleCall_4_0 = (RuleCall)cInterfacesAssignment_4.eContents().get(0);
		private final Assignment cAbstractContractsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAbstractContractsAbstractContractParserRuleCall_5_0 = (RuleCall)cAbstractContractsAssignment_5.eContents().get(0);
		private final Assignment cContractsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cContractsContractParserRuleCall_6_0 = (RuleCall)cContractsAssignment_6.eContents().get(0);
		
		///*Hay cuatro cardinalidades posibles diferentes:
		// * exactamente uno (el predeterminado, ningún operador)
		// * cero o uno (operador ?)
		// * cero o más (operador *)
		// * uno o más (operador +)
		// */
		//File:
		//    version=Version
		//    experimentalVersion = ExperimentalVersion?
		//    library+=Library*
		//    imports += Import*
		//    interfaces += Interface*
		//    abstractContracts += AbstractContract*
		//    contracts += Contract+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//version=Version
		//experimentalVersion = ExperimentalVersion?
		//library+=Library*
		//imports += Import*
		//interfaces += Interface*
		//abstractContracts += AbstractContract*
		//contracts += Contract+
		public Group getGroup() { return cGroup; }
		
		//version=Version
		public Assignment getVersionAssignment_0() { return cVersionAssignment_0; }
		
		//Version
		public RuleCall getVersionVersionParserRuleCall_0_0() { return cVersionVersionParserRuleCall_0_0; }
		
		//experimentalVersion = ExperimentalVersion?
		public Assignment getExperimentalVersionAssignment_1() { return cExperimentalVersionAssignment_1; }
		
		//ExperimentalVersion
		public RuleCall getExperimentalVersionExperimentalVersionParserRuleCall_1_0() { return cExperimentalVersionExperimentalVersionParserRuleCall_1_0; }
		
		//library+=Library*
		public Assignment getLibraryAssignment_2() { return cLibraryAssignment_2; }
		
		//Library
		public RuleCall getLibraryLibraryParserRuleCall_2_0() { return cLibraryLibraryParserRuleCall_2_0; }
		
		//imports += Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//interfaces += Interface*
		public Assignment getInterfacesAssignment_4() { return cInterfacesAssignment_4; }
		
		//Interface
		public RuleCall getInterfacesInterfaceParserRuleCall_4_0() { return cInterfacesInterfaceParserRuleCall_4_0; }
		
		//abstractContracts += AbstractContract*
		public Assignment getAbstractContractsAssignment_5() { return cAbstractContractsAssignment_5; }
		
		//AbstractContract
		public RuleCall getAbstractContractsAbstractContractParserRuleCall_5_0() { return cAbstractContractsAbstractContractParserRuleCall_5_0; }
		
		//contracts += Contract+
		public Assignment getContractsAssignment_6() { return cContractsAssignment_6; }
		
		//Contract
		public RuleCall getContractsContractParserRuleCall_6_0() { return cContractsContractParserRuleCall_6_0; }
	}
	public class VersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Version");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPragmaSolidityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cSymbolAlternatives_1_0 = (Alternatives)cSymbolAssignment_1.eContents().get(0);
		private final Keyword cSymbolCircumflexAccentKeyword_1_0_0 = (Keyword)cSymbolAlternatives_1_0.eContents().get(0);
		private final Keyword cSymbolGreaterThanSignKeyword_1_0_1 = (Keyword)cSymbolAlternatives_1_0.eContents().get(1);
		private final Keyword cSymbolGreaterThanSignEqualsSignKeyword_1_0_2 = (Keyword)cSymbolAlternatives_1_0.eContents().get(2);
		private final Assignment cNumberVersionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNumberVersionNUMVERSIONTerminalRuleCall_2_0 = (RuleCall)cNumberVersionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSymbolComparationAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Alternatives cSymbolComparationAlternatives_3_0_0 = (Alternatives)cSymbolComparationAssignment_3_0.eContents().get(0);
		private final Keyword cSymbolComparationLessThanSignKeyword_3_0_0_0 = (Keyword)cSymbolComparationAlternatives_3_0_0.eContents().get(0);
		private final Keyword cSymbolComparationLessThanSignEqualsSignKeyword_3_0_0_1 = (Keyword)cSymbolComparationAlternatives_3_0_0.eContents().get(1);
		private final Assignment cNumberVersion2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNumberVersion2NUMVERSIONTerminalRuleCall_3_1_0 = (RuleCall)cNumberVersion2Assignment_3_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEOLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Version:
		//    "pragma solidity" symbol=('^'|'>'|">=") numberVersion=NUMVERSION (symbolComparation=('<'|"<=") numberVersion2=NUMVERSION)? SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"pragma solidity" symbol=('^'|'>'|">=") numberVersion=NUMVERSION (symbolComparation=('<'|"<=") numberVersion2=NUMVERSION)? SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"pragma solidity"
		public Keyword getPragmaSolidityKeyword_0() { return cPragmaSolidityKeyword_0; }
		
		//symbol=('^'|'>'|">=")
		public Assignment getSymbolAssignment_1() { return cSymbolAssignment_1; }
		
		//('^'|'>'|">=")
		public Alternatives getSymbolAlternatives_1_0() { return cSymbolAlternatives_1_0; }
		
		//'^'
		public Keyword getSymbolCircumflexAccentKeyword_1_0_0() { return cSymbolCircumflexAccentKeyword_1_0_0; }
		
		//'>'
		public Keyword getSymbolGreaterThanSignKeyword_1_0_1() { return cSymbolGreaterThanSignKeyword_1_0_1; }
		
		//">="
		public Keyword getSymbolGreaterThanSignEqualsSignKeyword_1_0_2() { return cSymbolGreaterThanSignEqualsSignKeyword_1_0_2; }
		
		//numberVersion=NUMVERSION
		public Assignment getNumberVersionAssignment_2() { return cNumberVersionAssignment_2; }
		
		//NUMVERSION
		public RuleCall getNumberVersionNUMVERSIONTerminalRuleCall_2_0() { return cNumberVersionNUMVERSIONTerminalRuleCall_2_0; }
		
		//(symbolComparation=('<'|"<=") numberVersion2=NUMVERSION)?
		public Group getGroup_3() { return cGroup_3; }
		
		//symbolComparation=('<'|"<=")
		public Assignment getSymbolComparationAssignment_3_0() { return cSymbolComparationAssignment_3_0; }
		
		//('<'|"<=")
		public Alternatives getSymbolComparationAlternatives_3_0_0() { return cSymbolComparationAlternatives_3_0_0; }
		
		//'<'
		public Keyword getSymbolComparationLessThanSignKeyword_3_0_0_0() { return cSymbolComparationLessThanSignKeyword_3_0_0_0; }
		
		//"<="
		public Keyword getSymbolComparationLessThanSignEqualsSignKeyword_3_0_0_1() { return cSymbolComparationLessThanSignEqualsSignKeyword_3_0_0_1; }
		
		//numberVersion2=NUMVERSION
		public Assignment getNumberVersion2Assignment_3_1() { return cNumberVersion2Assignment_3_1; }
		
		//NUMVERSION
		public RuleCall getNumberVersion2NUMVERSIONTerminalRuleCall_3_1_0() { return cNumberVersion2NUMVERSIONTerminalRuleCall_3_1_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_4() { return cSEMICOLONTerminalRuleCall_4; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_5() { return cEOLINETerminalRuleCall_5; }
	}
	public class ExperimentalVersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.ExperimentalVersion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPragmaExperimentalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cABIEncoderV2Keyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSMTCheckerKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cEOLINETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ExperimentalVersion:
		//    "pragma experimental" ("ABIEncoderV2"|"SMTChecker") SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"pragma experimental" ("ABIEncoderV2"|"SMTChecker") SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"pragma experimental"
		public Keyword getPragmaExperimentalKeyword_0() { return cPragmaExperimentalKeyword_0; }
		
		//("ABIEncoderV2"|"SMTChecker")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"ABIEncoderV2"
		public Keyword getABIEncoderV2Keyword_1_0() { return cABIEncoderV2Keyword_1_0; }
		
		//"SMTChecker"
		public Keyword getSMTCheckerKeyword_1_1() { return cSMTCheckerKeyword_1_1; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2() { return cSEMICOLONTerminalRuleCall_2; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_3() { return cEOLINETerminalRuleCall_3; }
	}
	public class LibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Library");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLibraryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOPENKEYTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cStructsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStructsPersonalizedStructParserRuleCall_3_0 = (RuleCall)cStructsAssignment_3.eContents().get(0);
		private final Assignment cEnumsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEnumsEnumParserRuleCall_4_0 = (RuleCall)cEnumsAssignment_4.eContents().get(0);
		private final Assignment cFunctionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFunctionsClauseParserRuleCall_5_0 = (RuleCall)cFunctionsAssignment_5.eContents().get(0);
		private final RuleCall cCLOSEKEYTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Library:
		//    "library" name = Identifier OPENKEY
		//        structs += PersonalizedStruct*
		//        enums += Enum*
		//        functions += Clause*
		//    CLOSEKEY
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"library" name = Identifier OPENKEY
		//    structs += PersonalizedStruct*
		//    enums += Enum*
		//    functions += Clause*
		//CLOSEKEY
		public Group getGroup() { return cGroup; }
		
		//"library"
		public Keyword getLibraryKeyword_0() { return cLibraryKeyword_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_2() { return cOPENKEYTerminalRuleCall_2; }
		
		//structs += PersonalizedStruct*
		public Assignment getStructsAssignment_3() { return cStructsAssignment_3; }
		
		//PersonalizedStruct
		public RuleCall getStructsPersonalizedStructParserRuleCall_3_0() { return cStructsPersonalizedStructParserRuleCall_3_0; }
		
		//enums += Enum*
		public Assignment getEnumsAssignment_4() { return cEnumsAssignment_4; }
		
		//Enum
		public RuleCall getEnumsEnumParserRuleCall_4_0() { return cEnumsEnumParserRuleCall_4_0; }
		
		//functions += Clause*
		public Assignment getFunctionsAssignment_5() { return cFunctionsAssignment_5; }
		
		//Clause
		public RuleCall getFunctionsClauseParserRuleCall_5_0() { return cFunctionsClauseParserRuleCall_5_0; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_6() { return cCLOSEKEYTerminalRuleCall_6; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Import");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cImportKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameSyntaxExpressionParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cEOLINETerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cImportKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cAsKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cAliasAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cAliasIdentifierParserRuleCall_1_3_0 = (RuleCall)cAliasAssignment_1_3.eContents().get(0);
		private final Keyword cFromKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cNameAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cNameSyntaxExpressionParserRuleCall_1_5_0 = (RuleCall)cNameAssignment_1_5.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_6 = (RuleCall)cGroup_1.eContents().get(6);
		private final RuleCall cEOLINETerminalRuleCall_1_7 = (RuleCall)cGroup_1.eContents().get(7);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cImportKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameSyntaxExpressionParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cAsKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cAliasAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cAliasIdentifierParserRuleCall_2_3_0 = (RuleCall)cAliasAssignment_2_3.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final RuleCall cEOLINETerminalRuleCall_2_5 = (RuleCall)cGroup_2.eContents().get(5);
		
		//Import:
		//    "import" name = SyntaxExpression SEMICOLON EOLINE? |"import" ID "as" alias=Identifier "from" name = SyntaxExpression SEMICOLON EOLINE? | "import" name = SyntaxExpression "as" alias = Identifier SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"import" name = SyntaxExpression SEMICOLON EOLINE? |"import" ID "as" alias=Identifier "from" name = SyntaxExpression SEMICOLON EOLINE? | "import" name = SyntaxExpression "as" alias = Identifier SEMICOLON EOLINE?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"import" name = SyntaxExpression SEMICOLON EOLINE?
		public Group getGroup_0() { return cGroup_0; }
		
		//"import"
		public Keyword getImportKeyword_0_0() { return cImportKeyword_0_0; }
		
		//name = SyntaxExpression
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//SyntaxExpression
		public RuleCall getNameSyntaxExpressionParserRuleCall_0_1_0() { return cNameSyntaxExpressionParserRuleCall_0_1_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_0_2() { return cSEMICOLONTerminalRuleCall_0_2; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_0_3() { return cEOLINETerminalRuleCall_0_3; }
		
		//"import" ID "as" alias=Identifier "from" name = SyntaxExpression SEMICOLON EOLINE?
		public Group getGroup_1() { return cGroup_1; }
		
		//"import"
		public Keyword getImportKeyword_1_0() { return cImportKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//"as"
		public Keyword getAsKeyword_1_2() { return cAsKeyword_1_2; }
		
		//alias=Identifier
		public Assignment getAliasAssignment_1_3() { return cAliasAssignment_1_3; }
		
		//Identifier
		public RuleCall getAliasIdentifierParserRuleCall_1_3_0() { return cAliasIdentifierParserRuleCall_1_3_0; }
		
		//"from"
		public Keyword getFromKeyword_1_4() { return cFromKeyword_1_4; }
		
		//name = SyntaxExpression
		public Assignment getNameAssignment_1_5() { return cNameAssignment_1_5; }
		
		//SyntaxExpression
		public RuleCall getNameSyntaxExpressionParserRuleCall_1_5_0() { return cNameSyntaxExpressionParserRuleCall_1_5_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_6() { return cSEMICOLONTerminalRuleCall_1_6; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_1_7() { return cEOLINETerminalRuleCall_1_7; }
		
		//"import" name = SyntaxExpression "as" alias = Identifier SEMICOLON EOLINE?
		public Group getGroup_2() { return cGroup_2; }
		
		//"import"
		public Keyword getImportKeyword_2_0() { return cImportKeyword_2_0; }
		
		//name = SyntaxExpression
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//SyntaxExpression
		public RuleCall getNameSyntaxExpressionParserRuleCall_2_1_0() { return cNameSyntaxExpressionParserRuleCall_2_1_0; }
		
		//"as"
		public Keyword getAsKeyword_2_2() { return cAsKeyword_2_2; }
		
		//alias = Identifier
		public Assignment getAliasAssignment_2_3() { return cAliasAssignment_2_3; }
		
		//Identifier
		public RuleCall getAliasIdentifierParserRuleCall_2_3_0() { return cAliasIdentifierParserRuleCall_2_3_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2_4() { return cSEMICOLONTerminalRuleCall_2_4; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_2_5() { return cEOLINETerminalRuleCall_2_5; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContractParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAbstractContractParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Element:
		//    Interface|Contract|AbstractContract
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Interface|Contract|AbstractContract
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Interface
		public RuleCall getInterfaceParserRuleCall_0() { return cInterfaceParserRuleCall_0; }
		
		//Contract
		public RuleCall getContractParserRuleCall_1() { return cContractParserRuleCall_1; }
		
		//AbstractContract
		public RuleCall getAbstractContractParserRuleCall_2() { return cAbstractContractParserRuleCall_2; }
	}
	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOPENKEYTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cEOLINETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cInterfaceEventsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInterfaceEventsEventParserRuleCall_4_0 = (RuleCall)cInterfaceEventsAssignment_4.eContents().get(0);
		private final Assignment cInterfaceFunctionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInterfaceFunctionDeclarationFunctionInterfaceParserRuleCall_5_0 = (RuleCall)cInterfaceFunctionAssignment_5.eContents().get(0);
		private final RuleCall cCLOSEKEYTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cEOLINETerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//Interface returns Interface:
		//    "interface" name = Identifier OPENKEY EOLINE?
		//        interfaceEvents += Event*
		//        interfaceFunction += DeclarationFunctionInterface+
		//    CLOSEKEY EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"interface" name = Identifier OPENKEY EOLINE?
		//    interfaceEvents += Event*
		//    interfaceFunction += DeclarationFunctionInterface+
		//CLOSEKEY EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_2() { return cOPENKEYTerminalRuleCall_2; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_3() { return cEOLINETerminalRuleCall_3; }
		
		//interfaceEvents += Event*
		public Assignment getInterfaceEventsAssignment_4() { return cInterfaceEventsAssignment_4; }
		
		//Event
		public RuleCall getInterfaceEventsEventParserRuleCall_4_0() { return cInterfaceEventsEventParserRuleCall_4_0; }
		
		//interfaceFunction += DeclarationFunctionInterface+
		public Assignment getInterfaceFunctionAssignment_5() { return cInterfaceFunctionAssignment_5; }
		
		//DeclarationFunctionInterface
		public RuleCall getInterfaceFunctionDeclarationFunctionInterfaceParserRuleCall_5_0() { return cInterfaceFunctionDeclarationFunctionInterfaceParserRuleCall_5_0; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_6() { return cCLOSEKEYTerminalRuleCall_6; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_7() { return cEOLINETerminalRuleCall_7; }
	}
	public class DeclarationFunctionInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.DeclarationFunctionInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cInputParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputParamsInputParamParserRuleCall_3_0 = (RuleCall)cInputParamsAssignment_3.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cExternalKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cModifierAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cModifierAlternatives_6_0 = (Alternatives)cModifierAssignment_6.eContents().get(0);
		private final Keyword cModifierViewKeyword_6_0_0 = (Keyword)cModifierAlternatives_6_0.eContents().get(0);
		private final Keyword cModifierPayableKeyword_6_0_1 = (Keyword)cModifierAlternatives_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cRETURNSTerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Assignment cOutputParamsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cOutputParamsOutputParamParserRuleCall_7_2_0 = (RuleCall)cOutputParamsAssignment_7_2.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_7_3 = (RuleCall)cGroup_7.eContents().get(3);
		private final RuleCall cSEMICOLONTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cEOLINETerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//DeclarationFunctionInterface:
		//    "function" name = Identifier OPENPARENTHESIS inputParams += InputParam* CLOSEPARENTHESIS "external"? modifier=("view"|"payable")?  (RETURNS OPENPARENTHESIS outputParams += OutputParam CLOSEPARENTHESIS)? SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"function" name = Identifier OPENPARENTHESIS inputParams += InputParam* CLOSEPARENTHESIS "external"? modifier=("view"|"payable")?  (RETURNS OPENPARENTHESIS outputParams += OutputParam CLOSEPARENTHESIS)? SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_2() { return cOPENPARENTHESISTerminalRuleCall_2; }
		
		//inputParams += InputParam*
		public Assignment getInputParamsAssignment_3() { return cInputParamsAssignment_3; }
		
		//InputParam
		public RuleCall getInputParamsInputParamParserRuleCall_3_0() { return cInputParamsInputParamParserRuleCall_3_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_4() { return cCLOSEPARENTHESISTerminalRuleCall_4; }
		
		//"external"?
		public Keyword getExternalKeyword_5() { return cExternalKeyword_5; }
		
		//modifier=("view"|"payable")?
		public Assignment getModifierAssignment_6() { return cModifierAssignment_6; }
		
		//("view"|"payable")
		public Alternatives getModifierAlternatives_6_0() { return cModifierAlternatives_6_0; }
		
		//"view"
		public Keyword getModifierViewKeyword_6_0_0() { return cModifierViewKeyword_6_0_0; }
		
		//"payable"
		public Keyword getModifierPayableKeyword_6_0_1() { return cModifierPayableKeyword_6_0_1; }
		
		//(RETURNS OPENPARENTHESIS outputParams += OutputParam CLOSEPARENTHESIS)?
		public Group getGroup_7() { return cGroup_7; }
		
		//RETURNS
		public RuleCall getRETURNSTerminalRuleCall_7_0() { return cRETURNSTerminalRuleCall_7_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_7_1() { return cOPENPARENTHESISTerminalRuleCall_7_1; }
		
		//outputParams += OutputParam
		public Assignment getOutputParamsAssignment_7_2() { return cOutputParamsAssignment_7_2; }
		
		//OutputParam
		public RuleCall getOutputParamsOutputParamParserRuleCall_7_2_0() { return cOutputParamsOutputParamParserRuleCall_7_2_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_7_3() { return cCLOSEPARENTHESISTerminalRuleCall_7_3; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_8() { return cSEMICOLONTerminalRuleCall_8; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_9() { return cEOLINETerminalRuleCall_9; }
	}
	public class MSGVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.MSGVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cMSGSENDERTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cMSGDATATerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cMSGSIGTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cMSGGASTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cMSGVALUETerminalRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_1_2_1_0 = (RuleCall)cAlternatives_1_2_1.eContents().get(0);
		private final RuleCall cNumberExpressionParserRuleCall_1_2_1_1 = (RuleCall)cAlternatives_1_2_1.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		
		//MSGVariables:
		//    (MSGSENDER | MSGDATA | MSGSIG | MSGGAS | MSGVALUE) (DOT Identifier (OPENPARENTHESIS (Identifier|NumberExpression)? CLOSEPARENTHESIS)?)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(MSGSENDER | MSGDATA | MSGSIG | MSGGAS | MSGVALUE) (DOT Identifier (OPENPARENTHESIS (Identifier|NumberExpression)? CLOSEPARENTHESIS)?)?
		public Group getGroup() { return cGroup; }
		
		//(MSGSENDER | MSGDATA | MSGSIG | MSGGAS | MSGVALUE)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//MSGSENDER
		public RuleCall getMSGSENDERTerminalRuleCall_0_0() { return cMSGSENDERTerminalRuleCall_0_0; }
		
		//MSGDATA
		public RuleCall getMSGDATATerminalRuleCall_0_1() { return cMSGDATATerminalRuleCall_0_1; }
		
		//MSGSIG
		public RuleCall getMSGSIGTerminalRuleCall_0_2() { return cMSGSIGTerminalRuleCall_0_2; }
		
		//MSGGAS
		public RuleCall getMSGGASTerminalRuleCall_0_3() { return cMSGGASTerminalRuleCall_0_3; }
		
		//MSGVALUE
		public RuleCall getMSGVALUETerminalRuleCall_0_4() { return cMSGVALUETerminalRuleCall_0_4; }
		
		//(DOT Identifier (OPENPARENTHESIS (Identifier|NumberExpression)? CLOSEPARENTHESIS)?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1_0() { return cDOTTerminalRuleCall_1_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1() { return cIdentifierParserRuleCall_1_1; }
		
		//(OPENPARENTHESIS (Identifier|NumberExpression)? CLOSEPARENTHESIS)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1_2_0() { return cOPENPARENTHESISTerminalRuleCall_1_2_0; }
		
		//(Identifier|NumberExpression)?
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_2_1_0() { return cIdentifierParserRuleCall_1_2_1_0; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_1_2_1_1() { return cNumberExpressionParserRuleCall_1_2_1_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_1_2_2() { return cCLOSEPARENTHESISTerminalRuleCall_1_2_2; }
	}
	public class BlockVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.BlockVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cBCKDIFFICULTYTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cBCKNUMBERTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cBCKCOINBASETerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cBCKTIMESTAMPTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cBCKGASLIMITTerminalRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cBCKBLOCKHASHTerminalRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cNumberExpressionParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//BlockVariables:
		//    (BCKDIFFICULTY  | BCKNUMBER  | BCKCOINBASE | BCKTIMESTAMP | BCKGASLIMIT | BCKBLOCKHASH) (OPENPARENTHESIS (Identifier|NumberExpression) CLOSEPARENTHESIS)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(BCKDIFFICULTY  | BCKNUMBER  | BCKCOINBASE | BCKTIMESTAMP | BCKGASLIMIT | BCKBLOCKHASH) (OPENPARENTHESIS (Identifier|NumberExpression) CLOSEPARENTHESIS)?
		public Group getGroup() { return cGroup; }
		
		//(BCKDIFFICULTY  | BCKNUMBER  | BCKCOINBASE | BCKTIMESTAMP | BCKGASLIMIT | BCKBLOCKHASH)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//BCKDIFFICULTY
		public RuleCall getBCKDIFFICULTYTerminalRuleCall_0_0() { return cBCKDIFFICULTYTerminalRuleCall_0_0; }
		
		//BCKNUMBER
		public RuleCall getBCKNUMBERTerminalRuleCall_0_1() { return cBCKNUMBERTerminalRuleCall_0_1; }
		
		//BCKCOINBASE
		public RuleCall getBCKCOINBASETerminalRuleCall_0_2() { return cBCKCOINBASETerminalRuleCall_0_2; }
		
		//BCKTIMESTAMP
		public RuleCall getBCKTIMESTAMPTerminalRuleCall_0_3() { return cBCKTIMESTAMPTerminalRuleCall_0_3; }
		
		//BCKGASLIMIT
		public RuleCall getBCKGASLIMITTerminalRuleCall_0_4() { return cBCKGASLIMITTerminalRuleCall_0_4; }
		
		//BCKBLOCKHASH
		public RuleCall getBCKBLOCKHASHTerminalRuleCall_0_5() { return cBCKBLOCKHASHTerminalRuleCall_0_5; }
		
		//(OPENPARENTHESIS (Identifier|NumberExpression) CLOSEPARENTHESIS)?
		public Group getGroup_1() { return cGroup_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1_0() { return cOPENPARENTHESISTerminalRuleCall_1_0; }
		
		//(Identifier|NumberExpression)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1_0() { return cIdentifierParserRuleCall_1_1_0; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_1_1_1() { return cNumberExpressionParserRuleCall_1_1_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_1_2() { return cCLOSEPARENTHESISTerminalRuleCall_1_2; }
	}
	public class TxVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TxVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cTXAMOUNTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cTXGASLEFTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cTXGASPRICETerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cTXORIGINTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cNumberExpressionParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//TxVariables:
		//    (TXAMOUNT | TXGASLEFT |TXGASPRICE | TXORIGIN)  (OPENPARENTHESIS (Identifier|NumberExpression) CLOSEPARENTHESIS)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(TXAMOUNT | TXGASLEFT |TXGASPRICE | TXORIGIN)  (OPENPARENTHESIS (Identifier|NumberExpression) CLOSEPARENTHESIS)?
		public Group getGroup() { return cGroup; }
		
		//(TXAMOUNT | TXGASLEFT |TXGASPRICE | TXORIGIN)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//TXAMOUNT
		public RuleCall getTXAMOUNTTerminalRuleCall_0_0() { return cTXAMOUNTTerminalRuleCall_0_0; }
		
		//TXGASLEFT
		public RuleCall getTXGASLEFTTerminalRuleCall_0_1() { return cTXGASLEFTTerminalRuleCall_0_1; }
		
		//TXGASPRICE
		public RuleCall getTXGASPRICETerminalRuleCall_0_2() { return cTXGASPRICETerminalRuleCall_0_2; }
		
		//TXORIGIN
		public RuleCall getTXORIGINTerminalRuleCall_0_3() { return cTXORIGINTerminalRuleCall_0_3; }
		
		//(OPENPARENTHESIS (Identifier|NumberExpression) CLOSEPARENTHESIS)?
		public Group getGroup_1() { return cGroup_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1_0() { return cOPENPARENTHESISTerminalRuleCall_1_0; }
		
		//(Identifier|NumberExpression)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1_0() { return cIdentifierParserRuleCall_1_1_0; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_1_1_1() { return cNumberExpressionParserRuleCall_1_1_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_1_2() { return cCLOSEPARENTHESISTerminalRuleCall_1_2; }
	}
	public class DeclarationFunctionAbstractContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.DeclarationFunctionAbstractContract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cInputParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputParamsInputParamParserRuleCall_3_0 = (RuleCall)cInputParamsAssignment_3.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cVisibilityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_5_0 = (RuleCall)cVisibilityAssignment_5.eContents().get(0);
		private final Assignment cModifierAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cModifierAlternatives_6_0 = (Alternatives)cModifierAssignment_6.eContents().get(0);
		private final Keyword cModifierViewKeyword_6_0_0 = (Keyword)cModifierAlternatives_6_0.eContents().get(0);
		private final Keyword cModifierPayableKeyword_6_0_1 = (Keyword)cModifierAlternatives_6_0.eContents().get(1);
		private final Assignment cVirtualAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVirtualVIRTUALTerminalRuleCall_7_0 = (RuleCall)cVirtualAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final RuleCall cRETURNSTerminalRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Assignment cOutputParamsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cOutputParamsOutputParamParserRuleCall_8_2_0 = (RuleCall)cOutputParamsAssignment_8_2.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_8_3 = (RuleCall)cGroup_8.eContents().get(3);
		private final RuleCall cSEMICOLONTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cEOLINETerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//DeclarationFunctionAbstractContract:
		//    "function" name = Identifier OPENPARENTHESIS inputParams += InputParam* CLOSEPARENTHESIS visibility=Visibility  modifier=("view"|"payable")?  virtual=VIRTUAL? (RETURNS OPENPARENTHESIS outputParams += OutputParam CLOSEPARENTHESIS)? SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"function" name = Identifier OPENPARENTHESIS inputParams += InputParam* CLOSEPARENTHESIS visibility=Visibility  modifier=("view"|"payable")?  virtual=VIRTUAL? (RETURNS OPENPARENTHESIS outputParams += OutputParam CLOSEPARENTHESIS)? SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_2() { return cOPENPARENTHESISTerminalRuleCall_2; }
		
		//inputParams += InputParam*
		public Assignment getInputParamsAssignment_3() { return cInputParamsAssignment_3; }
		
		//InputParam
		public RuleCall getInputParamsInputParamParserRuleCall_3_0() { return cInputParamsInputParamParserRuleCall_3_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_4() { return cCLOSEPARENTHESISTerminalRuleCall_4; }
		
		//visibility=Visibility
		public Assignment getVisibilityAssignment_5() { return cVisibilityAssignment_5; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_5_0() { return cVisibilityVisibilityEnumRuleCall_5_0; }
		
		//modifier=("view"|"payable")?
		public Assignment getModifierAssignment_6() { return cModifierAssignment_6; }
		
		//("view"|"payable")
		public Alternatives getModifierAlternatives_6_0() { return cModifierAlternatives_6_0; }
		
		//"view"
		public Keyword getModifierViewKeyword_6_0_0() { return cModifierViewKeyword_6_0_0; }
		
		//"payable"
		public Keyword getModifierPayableKeyword_6_0_1() { return cModifierPayableKeyword_6_0_1; }
		
		//virtual=VIRTUAL?
		public Assignment getVirtualAssignment_7() { return cVirtualAssignment_7; }
		
		//VIRTUAL
		public RuleCall getVirtualVIRTUALTerminalRuleCall_7_0() { return cVirtualVIRTUALTerminalRuleCall_7_0; }
		
		//(RETURNS OPENPARENTHESIS outputParams += OutputParam CLOSEPARENTHESIS)?
		public Group getGroup_8() { return cGroup_8; }
		
		//RETURNS
		public RuleCall getRETURNSTerminalRuleCall_8_0() { return cRETURNSTerminalRuleCall_8_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_8_1() { return cOPENPARENTHESISTerminalRuleCall_8_1; }
		
		//outputParams += OutputParam
		public Assignment getOutputParamsAssignment_8_2() { return cOutputParamsAssignment_8_2; }
		
		//OutputParam
		public RuleCall getOutputParamsOutputParamParserRuleCall_8_2_0() { return cOutputParamsOutputParamParserRuleCall_8_2_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_8_3() { return cCLOSEPARENTHESISTerminalRuleCall_8_3; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_9() { return cSEMICOLONTerminalRuleCall_9; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_10() { return cEOLINETerminalRuleCall_10; }
	}
	public class AbstractContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.AbstractContract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbstractContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cSuperTypeAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final CrossReference cSuperTypeElementCrossReference_2_1_0_0 = (CrossReference)cSuperTypeAssignment_2_1_0.eContents().get(0);
		private final RuleCall cSuperTypeElementIDTerminalRuleCall_2_1_0_0_1 = (RuleCall)cSuperTypeElementCrossReference_2_1_0_0.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final RuleCall cOPENKEYTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cEOLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cModifiersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cModifiersModifierParserRuleCall_5_0 = (RuleCall)cModifiersAssignment_5.eContents().get(0);
		private final Assignment cEventsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEventsEventParserRuleCall_6_0 = (RuleCall)cEventsAssignment_6.eContents().get(0);
		private final Assignment cErrorsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cErrorsErrorParserRuleCall_7_0 = (RuleCall)cErrorsAssignment_7.eContents().get(0);
		private final Assignment cClausesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cClausesDeclarationFunctionAbstractContractParserRuleCall_8_0 = (RuleCall)cClausesAssignment_8.eContents().get(0);
		private final RuleCall cCLOSEKEYTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cEOLINETerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//AbstractContract:
		//    "abstract contract" name = Identifier ("is" (superType += [Element] COMMA?)*)? OPENKEY EOLINE?
		//        modifiers += Modifier*
		//        events += Event*
		//        errors += Error*
		//        clauses += DeclarationFunctionAbstractContract*
		//    CLOSEKEY EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"abstract contract" name = Identifier ("is" (superType += [Element] COMMA?)*)? OPENKEY EOLINE?
		//    modifiers += Modifier*
		//    events += Event*
		//    errors += Error*
		//    clauses += DeclarationFunctionAbstractContract*
		//CLOSEKEY EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"abstract contract"
		public Keyword getAbstractContractKeyword_0() { return cAbstractContractKeyword_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//("is" (superType += [Element] COMMA?)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"is"
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }
		
		//(superType += [Element] COMMA?)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//superType += [Element]
		public Assignment getSuperTypeAssignment_2_1_0() { return cSuperTypeAssignment_2_1_0; }
		
		//[Element]
		public CrossReference getSuperTypeElementCrossReference_2_1_0_0() { return cSuperTypeElementCrossReference_2_1_0_0; }
		
		//ID
		public RuleCall getSuperTypeElementIDTerminalRuleCall_2_1_0_0_1() { return cSuperTypeElementIDTerminalRuleCall_2_1_0_0_1; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_2_1_1() { return cCOMMATerminalRuleCall_2_1_1; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_3() { return cOPENKEYTerminalRuleCall_3; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_4() { return cEOLINETerminalRuleCall_4; }
		
		//modifiers += Modifier*
		public Assignment getModifiersAssignment_5() { return cModifiersAssignment_5; }
		
		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_5_0() { return cModifiersModifierParserRuleCall_5_0; }
		
		//events += Event*
		public Assignment getEventsAssignment_6() { return cEventsAssignment_6; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_6_0() { return cEventsEventParserRuleCall_6_0; }
		
		//errors += Error*
		public Assignment getErrorsAssignment_7() { return cErrorsAssignment_7; }
		
		//Error
		public RuleCall getErrorsErrorParserRuleCall_7_0() { return cErrorsErrorParserRuleCall_7_0; }
		
		//clauses += DeclarationFunctionAbstractContract*
		public Assignment getClausesAssignment_8() { return cClausesAssignment_8; }
		
		//DeclarationFunctionAbstractContract
		public RuleCall getClausesDeclarationFunctionAbstractContractParserRuleCall_8_0() { return cClausesDeclarationFunctionAbstractContractParserRuleCall_8_0; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_9() { return cCLOSEKEYTerminalRuleCall_9; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_10() { return cEOLINETerminalRuleCall_10; }
	}
	public class ContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Contract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cSuperTypeAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final CrossReference cSuperTypeElementCrossReference_2_1_0_0 = (CrossReference)cSuperTypeAssignment_2_1_0.eContents().get(0);
		private final RuleCall cSuperTypeElementIDTerminalRuleCall_2_1_0_0_1 = (RuleCall)cSuperTypeElementCrossReference_2_1_0_0.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final RuleCall cOPENKEYTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cEOLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cLocalEnumeratorsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cLocalEnumeratorsEnumParserRuleCall_5_0_0 = (RuleCall)cLocalEnumeratorsAssignment_5_0.eContents().get(0);
		private final Assignment cLocalPropertiesAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cLocalPropertiesPropertiesParserRuleCall_5_1_0 = (RuleCall)cLocalPropertiesAssignment_5_1.eContents().get(0);
		private final Assignment cLocalMappingPropertiesAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cLocalMappingPropertiesMappingParserRuleCall_5_2_0 = (RuleCall)cLocalMappingPropertiesAssignment_5_2.eContents().get(0);
		private final Assignment cStructsAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cStructsPersonalizedStructParserRuleCall_5_3_0 = (RuleCall)cStructsAssignment_5_3.eContents().get(0);
		private final Assignment cStructUserAssignment_5_4 = (Assignment)cAlternatives_5.eContents().get(4);
		private final RuleCall cStructUserUserParserRuleCall_5_4_0 = (RuleCall)cStructUserAssignment_5_4.eContents().get(0);
		private final Assignment cStructCompanyAssignment_5_5 = (Assignment)cAlternatives_5.eContents().get(5);
		private final RuleCall cStructCompanyCompanyParserRuleCall_5_5_0 = (RuleCall)cStructCompanyAssignment_5_5.eContents().get(0);
		private final Group cGroup_5_6 = (Group)cAlternatives_5.eContents().get(6);
		private final Keyword cUsingKeyword_5_6_0 = (Keyword)cGroup_5_6.eContents().get(0);
		private final Assignment cLibrariesAssignment_5_6_1 = (Assignment)cGroup_5_6.eContents().get(1);
		private final CrossReference cLibrariesLibraryCrossReference_5_6_1_0 = (CrossReference)cLibrariesAssignment_5_6_1.eContents().get(0);
		private final RuleCall cLibrariesLibraryIDTerminalRuleCall_5_6_1_0_1 = (RuleCall)cLibrariesLibraryCrossReference_5_6_1_0.eContents().get(1);
		private final Keyword cForKeyword_5_6_2 = (Keyword)cGroup_5_6.eContents().get(2);
		private final Alternatives cAlternatives_5_6_3 = (Alternatives)cGroup_5_6.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_5_6_3_0 = (RuleCall)cAlternatives_5_6_3.eContents().get(0);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_5_6_3_1 = (RuleCall)cAlternatives_5_6_3.eContents().get(1);
		private final RuleCall cBracketExpressionParserRuleCall_5_6_3_2 = (RuleCall)cAlternatives_5_6_3.eContents().get(2);
		private final Keyword cAsteriskKeyword_5_6_3_3 = (Keyword)cAlternatives_5_6_3.eContents().get(3);
		private final RuleCall cSingularTypeParserRuleCall_5_6_3_4 = (RuleCall)cAlternatives_5_6_3.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_5_6_4 = (RuleCall)cGroup_5_6.eContents().get(4);
		private final RuleCall cEOLINETerminalRuleCall_5_6_5 = (RuleCall)cGroup_5_6.eContents().get(5);
		private final Assignment cConstructorsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConstructorsConstructorParserRuleCall_6_0 = (RuleCall)cConstructorsAssignment_6.eContents().get(0);
		private final Assignment cModifiersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cModifiersModifierParserRuleCall_7_0 = (RuleCall)cModifiersAssignment_7.eContents().get(0);
		private final Assignment cEventsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cEventsEventParserRuleCall_8_0 = (RuleCall)cEventsAssignment_8.eContents().get(0);
		private final Assignment cErrorsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cErrorsErrorParserRuleCall_9_0 = (RuleCall)cErrorsAssignment_9.eContents().get(0);
		private final Assignment cClausesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cClausesClauseParserRuleCall_10_0 = (RuleCall)cClausesAssignment_10.eContents().get(0);
		private final RuleCall cCLOSEKEYTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final RuleCall cEOLINETerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		
		//Contract:
		//    "contract" name = Identifier ("is" (superType += [Element] COMMA?)*)? OPENKEY EOLINE?
		//        (localEnumerators += Enum | localProperties += Properties | localMappingProperties += Mapping | structs += PersonalizedStruct | structUser = User | structCompany = Company | "using" libraries += [Library]+ "for" (Identifier|IdentifierValueExpression|BracketExpression|'*'|SingularType) SEMICOLON EOLINE?)*
		//        constructors += Constructor*
		//        modifiers += Modifier*
		//        events += Event*
		//        errors += Error*
		//        clauses += Clause*
		//    CLOSEKEY EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"contract" name = Identifier ("is" (superType += [Element] COMMA?)*)? OPENKEY EOLINE?
		//    (localEnumerators += Enum | localProperties += Properties | localMappingProperties += Mapping | structs += PersonalizedStruct | structUser = User | structCompany = Company | "using" libraries += [Library]+ "for" (Identifier|IdentifierValueExpression|BracketExpression|'*'|SingularType) SEMICOLON EOLINE?)*
		//    constructors += Constructor*
		//    modifiers += Modifier*
		//    events += Event*
		//    errors += Error*
		//    clauses += Clause*
		//CLOSEKEY EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"contract"
		public Keyword getContractKeyword_0() { return cContractKeyword_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//("is" (superType += [Element] COMMA?)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"is"
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }
		
		//(superType += [Element] COMMA?)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//superType += [Element]
		public Assignment getSuperTypeAssignment_2_1_0() { return cSuperTypeAssignment_2_1_0; }
		
		//[Element]
		public CrossReference getSuperTypeElementCrossReference_2_1_0_0() { return cSuperTypeElementCrossReference_2_1_0_0; }
		
		//ID
		public RuleCall getSuperTypeElementIDTerminalRuleCall_2_1_0_0_1() { return cSuperTypeElementIDTerminalRuleCall_2_1_0_0_1; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_2_1_1() { return cCOMMATerminalRuleCall_2_1_1; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_3() { return cOPENKEYTerminalRuleCall_3; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_4() { return cEOLINETerminalRuleCall_4; }
		
		//(localEnumerators += Enum | localProperties += Properties | localMappingProperties += Mapping | structs += PersonalizedStruct | structUser = User | structCompany = Company | "using" libraries += [Library]+ "for" (Identifier|IdentifierValueExpression|BracketExpression|'*'|SingularType) SEMICOLON EOLINE?)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//localEnumerators += Enum
		public Assignment getLocalEnumeratorsAssignment_5_0() { return cLocalEnumeratorsAssignment_5_0; }
		
		//Enum
		public RuleCall getLocalEnumeratorsEnumParserRuleCall_5_0_0() { return cLocalEnumeratorsEnumParserRuleCall_5_0_0; }
		
		//localProperties += Properties
		public Assignment getLocalPropertiesAssignment_5_1() { return cLocalPropertiesAssignment_5_1; }
		
		//Properties
		public RuleCall getLocalPropertiesPropertiesParserRuleCall_5_1_0() { return cLocalPropertiesPropertiesParserRuleCall_5_1_0; }
		
		//localMappingProperties += Mapping
		public Assignment getLocalMappingPropertiesAssignment_5_2() { return cLocalMappingPropertiesAssignment_5_2; }
		
		//Mapping
		public RuleCall getLocalMappingPropertiesMappingParserRuleCall_5_2_0() { return cLocalMappingPropertiesMappingParserRuleCall_5_2_0; }
		
		//structs += PersonalizedStruct
		public Assignment getStructsAssignment_5_3() { return cStructsAssignment_5_3; }
		
		//PersonalizedStruct
		public RuleCall getStructsPersonalizedStructParserRuleCall_5_3_0() { return cStructsPersonalizedStructParserRuleCall_5_3_0; }
		
		//structUser = User
		public Assignment getStructUserAssignment_5_4() { return cStructUserAssignment_5_4; }
		
		//User
		public RuleCall getStructUserUserParserRuleCall_5_4_0() { return cStructUserUserParserRuleCall_5_4_0; }
		
		//structCompany = Company
		public Assignment getStructCompanyAssignment_5_5() { return cStructCompanyAssignment_5_5; }
		
		//Company
		public RuleCall getStructCompanyCompanyParserRuleCall_5_5_0() { return cStructCompanyCompanyParserRuleCall_5_5_0; }
		
		//"using" libraries += [Library]+ "for" (Identifier|IdentifierValueExpression|BracketExpression|'*'|SingularType) SEMICOLON EOLINE?
		public Group getGroup_5_6() { return cGroup_5_6; }
		
		//"using"
		public Keyword getUsingKeyword_5_6_0() { return cUsingKeyword_5_6_0; }
		
		//libraries += [Library]+
		public Assignment getLibrariesAssignment_5_6_1() { return cLibrariesAssignment_5_6_1; }
		
		//[Library]
		public CrossReference getLibrariesLibraryCrossReference_5_6_1_0() { return cLibrariesLibraryCrossReference_5_6_1_0; }
		
		//ID
		public RuleCall getLibrariesLibraryIDTerminalRuleCall_5_6_1_0_1() { return cLibrariesLibraryIDTerminalRuleCall_5_6_1_0_1; }
		
		//"for"
		public Keyword getForKeyword_5_6_2() { return cForKeyword_5_6_2; }
		
		//(Identifier|IdentifierValueExpression|BracketExpression|'*'|SingularType)
		public Alternatives getAlternatives_5_6_3() { return cAlternatives_5_6_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_5_6_3_0() { return cIdentifierParserRuleCall_5_6_3_0; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_5_6_3_1() { return cIdentifierValueExpressionParserRuleCall_5_6_3_1; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_5_6_3_2() { return cBracketExpressionParserRuleCall_5_6_3_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_5_6_3_3() { return cAsteriskKeyword_5_6_3_3; }
		
		//SingularType
		public RuleCall getSingularTypeParserRuleCall_5_6_3_4() { return cSingularTypeParserRuleCall_5_6_3_4; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_5_6_4() { return cSEMICOLONTerminalRuleCall_5_6_4; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_5_6_5() { return cEOLINETerminalRuleCall_5_6_5; }
		
		//constructors += Constructor*
		public Assignment getConstructorsAssignment_6() { return cConstructorsAssignment_6; }
		
		//Constructor
		public RuleCall getConstructorsConstructorParserRuleCall_6_0() { return cConstructorsConstructorParserRuleCall_6_0; }
		
		//modifiers += Modifier*
		public Assignment getModifiersAssignment_7() { return cModifiersAssignment_7; }
		
		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_7_0() { return cModifiersModifierParserRuleCall_7_0; }
		
		//events += Event*
		public Assignment getEventsAssignment_8() { return cEventsAssignment_8; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_8_0() { return cEventsEventParserRuleCall_8_0; }
		
		//errors += Error*
		public Assignment getErrorsAssignment_9() { return cErrorsAssignment_9; }
		
		//Error
		public RuleCall getErrorsErrorParserRuleCall_9_0() { return cErrorsErrorParserRuleCall_9_0; }
		
		//clauses += Clause*
		public Assignment getClausesAssignment_10() { return cClausesAssignment_10; }
		
		//Clause
		public RuleCall getClausesClauseParserRuleCall_10_0() { return cClausesClauseParserRuleCall_10_0; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_11() { return cCLOSEKEYTerminalRuleCall_11; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_12() { return cEOLINETerminalRuleCall_12; }
	}
	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstructorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cInputParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputParamsInputParamParserRuleCall_2_0 = (RuleCall)cInputParamsAssignment_2.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cTypeAlternatives_4_0 = (Alternatives)cTypeAssignment_4.eContents().get(0);
		private final Keyword cTypePublicKeyword_4_0_0 = (Keyword)cTypeAlternatives_4_0.eContents().get(0);
		private final Keyword cTypeInternalKeyword_4_0_1 = (Keyword)cTypeAlternatives_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cConstructorContractInheranceAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final CrossReference cConstructorContractInheranceContractCrossReference_5_0_0 = (CrossReference)cConstructorContractInheranceAssignment_5_0.eContents().get(0);
		private final RuleCall cConstructorContractInheranceContractIDTerminalRuleCall_5_0_0_1 = (RuleCall)cConstructorContractInheranceContractCrossReference_5_0_0.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Assignment cInputParamsConstructorContractInheranceAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cInputParamsConstructorContractInheranceInputParamParserRuleCall_5_2_0 = (RuleCall)cInputParamsConstructorContractInheranceAssignment_5_2.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		private final Assignment cPayableAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cPayablePayableKeyword_6_0 = (Keyword)cPayableAssignment_6.eContents().get(0);
		private final RuleCall cOPENKEYTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Assignment cRestrictionsAssignment_9_0 = (Assignment)cAlternatives_9.eContents().get(0);
		private final Alternatives cRestrictionsAlternatives_9_0_0 = (Alternatives)cRestrictionsAssignment_9_0.eContents().get(0);
		private final RuleCall cRestrictionsRestrictionParserRuleCall_9_0_0_0 = (RuleCall)cRestrictionsAlternatives_9_0_0.eContents().get(0);
		private final RuleCall cRestrictionsRestrictionGasParserRuleCall_9_0_0_1 = (RuleCall)cRestrictionsAlternatives_9_0_0.eContents().get(1);
		private final RuleCall cRestrictionsAssertParserRuleCall_9_0_0_2 = (RuleCall)cRestrictionsAlternatives_9_0_0.eContents().get(2);
		private final Assignment cConditionsAssignment_9_1 = (Assignment)cAlternatives_9.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_9_1_0 = (RuleCall)cConditionsAssignment_9_1.eContents().get(0);
		private final Assignment cUndeterminedLoopsAssignment_9_2 = (Assignment)cAlternatives_9.eContents().get(2);
		private final RuleCall cUndeterminedLoopsUnDeterminedLoopParserRuleCall_9_2_0 = (RuleCall)cUndeterminedLoopsAssignment_9_2.eContents().get(0);
		private final Assignment cDeterminedLoopsAssignment_9_3 = (Assignment)cAlternatives_9.eContents().get(3);
		private final RuleCall cDeterminedLoopsForLoopParserRuleCall_9_3_0 = (RuleCall)cDeterminedLoopsAssignment_9_3.eContents().get(0);
		private final Group cGroup_9_4 = (Group)cAlternatives_9.eContents().get(4);
		private final Assignment cAttributesInitializationAssignment_9_4_0 = (Assignment)cGroup_9_4.eContents().get(0);
		private final RuleCall cAttributesInitializationExpressionParserRuleCall_9_4_0_0 = (RuleCall)cAttributesInitializationAssignment_9_4_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_9_4_1 = (RuleCall)cGroup_9_4.eContents().get(1);
		private final RuleCall cCLOSEKEYTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final RuleCall cEOLINETerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		
		//Constructor:
		//    "constructor" OPENPARENTHESIS inputParams += InputParam* CLOSEPARENTHESIS type = ("public"|"internal")? (constructorContractInherance +=[Contract] OPENPARENTHESIS  inputParamsConstructorContractInherance += InputParam* CLOSEPARENTHESIS)? payable="payable"? OPENKEY EOLINE?
		//         ((restrictions += (Restriction|RestrictionGas|Assert)|conditions += Condition | undeterminedLoops += UnDeterminedLoop  | determinedLoops += ForLoop| attributesInitialization += (Expression) SEMICOLON?))*
		//    CLOSEKEY EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"constructor" OPENPARENTHESIS inputParams += InputParam* CLOSEPARENTHESIS type = ("public"|"internal")? (constructorContractInherance +=[Contract] OPENPARENTHESIS  inputParamsConstructorContractInherance += InputParam* CLOSEPARENTHESIS)? payable="payable"? OPENKEY EOLINE?
		//     ((restrictions += (Restriction|RestrictionGas|Assert)|conditions += Condition | undeterminedLoops += UnDeterminedLoop  | determinedLoops += ForLoop| attributesInitialization += (Expression) SEMICOLON?))*
		//CLOSEKEY EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"constructor"
		public Keyword getConstructorKeyword_0() { return cConstructorKeyword_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//inputParams += InputParam*
		public Assignment getInputParamsAssignment_2() { return cInputParamsAssignment_2; }
		
		//InputParam
		public RuleCall getInputParamsInputParamParserRuleCall_2_0() { return cInputParamsInputParamParserRuleCall_2_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_3() { return cCLOSEPARENTHESISTerminalRuleCall_3; }
		
		//type = ("public"|"internal")?
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//("public"|"internal")
		public Alternatives getTypeAlternatives_4_0() { return cTypeAlternatives_4_0; }
		
		//"public"
		public Keyword getTypePublicKeyword_4_0_0() { return cTypePublicKeyword_4_0_0; }
		
		//"internal"
		public Keyword getTypeInternalKeyword_4_0_1() { return cTypeInternalKeyword_4_0_1; }
		
		//(constructorContractInherance +=[Contract] OPENPARENTHESIS  inputParamsConstructorContractInherance += InputParam* CLOSEPARENTHESIS)?
		public Group getGroup_5() { return cGroup_5; }
		
		//constructorContractInherance +=[Contract]
		public Assignment getConstructorContractInheranceAssignment_5_0() { return cConstructorContractInheranceAssignment_5_0; }
		
		//[Contract]
		public CrossReference getConstructorContractInheranceContractCrossReference_5_0_0() { return cConstructorContractInheranceContractCrossReference_5_0_0; }
		
		//ID
		public RuleCall getConstructorContractInheranceContractIDTerminalRuleCall_5_0_0_1() { return cConstructorContractInheranceContractIDTerminalRuleCall_5_0_0_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_5_1() { return cOPENPARENTHESISTerminalRuleCall_5_1; }
		
		//inputParamsConstructorContractInherance += InputParam*
		public Assignment getInputParamsConstructorContractInheranceAssignment_5_2() { return cInputParamsConstructorContractInheranceAssignment_5_2; }
		
		//InputParam
		public RuleCall getInputParamsConstructorContractInheranceInputParamParserRuleCall_5_2_0() { return cInputParamsConstructorContractInheranceInputParamParserRuleCall_5_2_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_5_3() { return cCLOSEPARENTHESISTerminalRuleCall_5_3; }
		
		//payable="payable"?
		public Assignment getPayableAssignment_6() { return cPayableAssignment_6; }
		
		//"payable"
		public Keyword getPayablePayableKeyword_6_0() { return cPayablePayableKeyword_6_0; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_7() { return cOPENKEYTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
		
		//((restrictions += (Restriction|RestrictionGas|Assert)|conditions += Condition | undeterminedLoops += UnDeterminedLoop  | determinedLoops += ForLoop| attributesInitialization += (Expression) SEMICOLON?))*
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//restrictions += (Restriction|RestrictionGas|Assert)
		public Assignment getRestrictionsAssignment_9_0() { return cRestrictionsAssignment_9_0; }
		
		//(Restriction|RestrictionGas|Assert)
		public Alternatives getRestrictionsAlternatives_9_0_0() { return cRestrictionsAlternatives_9_0_0; }
		
		//Restriction
		public RuleCall getRestrictionsRestrictionParserRuleCall_9_0_0_0() { return cRestrictionsRestrictionParserRuleCall_9_0_0_0; }
		
		//RestrictionGas
		public RuleCall getRestrictionsRestrictionGasParserRuleCall_9_0_0_1() { return cRestrictionsRestrictionGasParserRuleCall_9_0_0_1; }
		
		//Assert
		public RuleCall getRestrictionsAssertParserRuleCall_9_0_0_2() { return cRestrictionsAssertParserRuleCall_9_0_0_2; }
		
		//conditions += Condition
		public Assignment getConditionsAssignment_9_1() { return cConditionsAssignment_9_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_9_1_0() { return cConditionsConditionParserRuleCall_9_1_0; }
		
		//undeterminedLoops += UnDeterminedLoop
		public Assignment getUndeterminedLoopsAssignment_9_2() { return cUndeterminedLoopsAssignment_9_2; }
		
		//UnDeterminedLoop
		public RuleCall getUndeterminedLoopsUnDeterminedLoopParserRuleCall_9_2_0() { return cUndeterminedLoopsUnDeterminedLoopParserRuleCall_9_2_0; }
		
		//determinedLoops += ForLoop
		public Assignment getDeterminedLoopsAssignment_9_3() { return cDeterminedLoopsAssignment_9_3; }
		
		//ForLoop
		public RuleCall getDeterminedLoopsForLoopParserRuleCall_9_3_0() { return cDeterminedLoopsForLoopParserRuleCall_9_3_0; }
		
		//attributesInitialization += (Expression) SEMICOLON?
		public Group getGroup_9_4() { return cGroup_9_4; }
		
		//attributesInitialization += (Expression)
		public Assignment getAttributesInitializationAssignment_9_4_0() { return cAttributesInitializationAssignment_9_4_0; }
		
		//(Expression)
		public RuleCall getAttributesInitializationExpressionParserRuleCall_9_4_0_0() { return cAttributesInitializationExpressionParserRuleCall_9_4_0_0; }
		
		//SEMICOLON?
		public RuleCall getSEMICOLONTerminalRuleCall_9_4_1() { return cSEMICOLONTerminalRuleCall_9_4_1; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_10() { return cCLOSEKEYTerminalRuleCall_10; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_11() { return cEOLINETerminalRuleCall_11; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cInputParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputParamsInputParamParserRuleCall_3_0 = (RuleCall)cInputParamsAssignment_3.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cEOLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Event:
		//    "event" name = Identifier OPENPARENTHESIS (inputParams += InputParam)* CLOSEPARENTHESIS SEMICOLON EOLINE? //Falta incluir el "indexed" dentro de los parámetros de entrada del evento
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"event" name = Identifier OPENPARENTHESIS (inputParams += InputParam)* CLOSEPARENTHESIS SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_2() { return cOPENPARENTHESISTerminalRuleCall_2; }
		
		//(inputParams += InputParam)*
		public Assignment getInputParamsAssignment_3() { return cInputParamsAssignment_3; }
		
		//InputParam
		public RuleCall getInputParamsInputParamParserRuleCall_3_0() { return cInputParamsInputParamParserRuleCall_3_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_4() { return cCLOSEPARENTHESISTerminalRuleCall_4; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_5() { return cSEMICOLONTerminalRuleCall_5; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_6() { return cEOLINETerminalRuleCall_6; }
	}
	public class ErrorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Error");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cInputParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputParamsInputParamParserRuleCall_3_0 = (RuleCall)cInputParamsAssignment_3.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cEOLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Error:
		//    "error" name = Identifier OPENPARENTHESIS (inputParams += InputParam)* CLOSEPARENTHESIS SEMICOLON EOLINE? //Falta incluir el "indexed" dentro de los parámetros de entrada del evento
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"error" name = Identifier OPENPARENTHESIS (inputParams += InputParam)* CLOSEPARENTHESIS SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"error"
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_2() { return cOPENPARENTHESISTerminalRuleCall_2; }
		
		//(inputParams += InputParam)*
		public Assignment getInputParamsAssignment_3() { return cInputParamsAssignment_3; }
		
		//InputParam
		public RuleCall getInputParamsInputParamParserRuleCall_3_0() { return cInputParamsInputParamParserRuleCall_3_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_4() { return cCLOSEPARENTHESISTerminalRuleCall_4; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_5() { return cSEMICOLONTerminalRuleCall_5; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_6() { return cEOLINETerminalRuleCall_6; }
	}
	public class AttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Attributes");
		private final RuleCall cDataTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Attributes returns ecore::EObject:
		//     DataType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall() { return cDataTypeParserRuleCall; }
	}
	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Modifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cInputParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputParamsInputParamParserRuleCall_3_0 = (RuleCall)cInputParamsAssignment_3.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cOPENKEYTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cEOLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cConditionRestricionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cConditionRestricionAlternatives_7_0 = (Alternatives)cConditionRestricionAssignment_7.eContents().get(0);
		private final RuleCall cConditionRestricionRestrictionParserRuleCall_7_0_0 = (RuleCall)cConditionRestricionAlternatives_7_0.eContents().get(0);
		private final RuleCall cConditionRestricionRestrictionGasParserRuleCall_7_0_1 = (RuleCall)cConditionRestricionAlternatives_7_0.eContents().get(1);
		private final RuleCall cConditionRestricionAssertParserRuleCall_7_0_2 = (RuleCall)cConditionRestricionAlternatives_7_0.eContents().get(2);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Assignment cExpressionsAssignValueBeforeMarkAssignment_8_0_0 = (Assignment)cGroup_8_0.eContents().get(0);
		private final RuleCall cExpressionsAssignValueBeforeMarkAssignExpressionParserRuleCall_8_0_0_0 = (RuleCall)cExpressionsAssignValueBeforeMarkAssignment_8_0_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_8_0_1 = (RuleCall)cGroup_8_0.eContents().get(1);
		private final Assignment cConditionsBeforeMarkAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cConditionsBeforeMarkConditionParserRuleCall_8_1_0 = (RuleCall)cConditionsBeforeMarkAssignment_8_1.eContents().get(0);
		private final Keyword c_Keyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Group cGroup_10_0 = (Group)cAlternatives_10.eContents().get(0);
		private final Assignment cExpressionsAssignValueAfterMarkAssignment_10_0_0 = (Assignment)cGroup_10_0.eContents().get(0);
		private final RuleCall cExpressionsAssignValueAfterMarkAssignExpressionParserRuleCall_10_0_0_0 = (RuleCall)cExpressionsAssignValueAfterMarkAssignment_10_0_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_10_0_1 = (RuleCall)cGroup_10_0.eContents().get(1);
		private final Assignment cConditionsAfterMarkAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final RuleCall cConditionsAfterMarkConditionParserRuleCall_10_1_0 = (RuleCall)cConditionsAfterMarkAssignment_10_1.eContents().get(0);
		private final RuleCall cCLOSEKEYTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final RuleCall cEOLINETerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		
		//Modifier:
		//    "modifier" name = Identifier OPENPARENTHESIS inputParams += InputParam* CLOSEPARENTHESIS OPENKEY EOLINE?
		//        conditionRestricion += (Restriction|RestrictionGas|Assert)*
		//        (expressionsAssignValueBeforeMark += AssignExpression SEMICOLON? | conditionsBeforeMark += Condition)*
		//        "_;"
		//        (expressionsAssignValueAfterMark += AssignExpression SEMICOLON? | conditionsAfterMark += Condition)*
		//    CLOSEKEY EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"modifier" name = Identifier OPENPARENTHESIS inputParams += InputParam* CLOSEPARENTHESIS OPENKEY EOLINE?
		//    conditionRestricion += (Restriction|RestrictionGas|Assert)*
		//    (expressionsAssignValueBeforeMark += AssignExpression SEMICOLON? | conditionsBeforeMark += Condition)*
		//    "_;"
		//    (expressionsAssignValueAfterMark += AssignExpression SEMICOLON? | conditionsAfterMark += Condition)*
		//CLOSEKEY EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"modifier"
		public Keyword getModifierKeyword_0() { return cModifierKeyword_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_2() { return cOPENPARENTHESISTerminalRuleCall_2; }
		
		//inputParams += InputParam*
		public Assignment getInputParamsAssignment_3() { return cInputParamsAssignment_3; }
		
		//InputParam
		public RuleCall getInputParamsInputParamParserRuleCall_3_0() { return cInputParamsInputParamParserRuleCall_3_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_4() { return cCLOSEPARENTHESISTerminalRuleCall_4; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_5() { return cOPENKEYTerminalRuleCall_5; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_6() { return cEOLINETerminalRuleCall_6; }
		
		//conditionRestricion += (Restriction|RestrictionGas|Assert)*
		public Assignment getConditionRestricionAssignment_7() { return cConditionRestricionAssignment_7; }
		
		//(Restriction|RestrictionGas|Assert)
		public Alternatives getConditionRestricionAlternatives_7_0() { return cConditionRestricionAlternatives_7_0; }
		
		//Restriction
		public RuleCall getConditionRestricionRestrictionParserRuleCall_7_0_0() { return cConditionRestricionRestrictionParserRuleCall_7_0_0; }
		
		//RestrictionGas
		public RuleCall getConditionRestricionRestrictionGasParserRuleCall_7_0_1() { return cConditionRestricionRestrictionGasParserRuleCall_7_0_1; }
		
		//Assert
		public RuleCall getConditionRestricionAssertParserRuleCall_7_0_2() { return cConditionRestricionAssertParserRuleCall_7_0_2; }
		
		//(expressionsAssignValueBeforeMark += AssignExpression SEMICOLON? | conditionsBeforeMark += Condition)*
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//expressionsAssignValueBeforeMark += AssignExpression SEMICOLON?
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//expressionsAssignValueBeforeMark += AssignExpression
		public Assignment getExpressionsAssignValueBeforeMarkAssignment_8_0_0() { return cExpressionsAssignValueBeforeMarkAssignment_8_0_0; }
		
		//AssignExpression
		public RuleCall getExpressionsAssignValueBeforeMarkAssignExpressionParserRuleCall_8_0_0_0() { return cExpressionsAssignValueBeforeMarkAssignExpressionParserRuleCall_8_0_0_0; }
		
		//SEMICOLON?
		public RuleCall getSEMICOLONTerminalRuleCall_8_0_1() { return cSEMICOLONTerminalRuleCall_8_0_1; }
		
		//conditionsBeforeMark += Condition
		public Assignment getConditionsBeforeMarkAssignment_8_1() { return cConditionsBeforeMarkAssignment_8_1; }
		
		//Condition
		public RuleCall getConditionsBeforeMarkConditionParserRuleCall_8_1_0() { return cConditionsBeforeMarkConditionParserRuleCall_8_1_0; }
		
		//"_;"
		public Keyword get_Keyword_9() { return c_Keyword_9; }
		
		//(expressionsAssignValueAfterMark += AssignExpression SEMICOLON? | conditionsAfterMark += Condition)*
		public Alternatives getAlternatives_10() { return cAlternatives_10; }
		
		//expressionsAssignValueAfterMark += AssignExpression SEMICOLON?
		public Group getGroup_10_0() { return cGroup_10_0; }
		
		//expressionsAssignValueAfterMark += AssignExpression
		public Assignment getExpressionsAssignValueAfterMarkAssignment_10_0_0() { return cExpressionsAssignValueAfterMarkAssignment_10_0_0; }
		
		//AssignExpression
		public RuleCall getExpressionsAssignValueAfterMarkAssignExpressionParserRuleCall_10_0_0_0() { return cExpressionsAssignValueAfterMarkAssignExpressionParserRuleCall_10_0_0_0; }
		
		//SEMICOLON?
		public RuleCall getSEMICOLONTerminalRuleCall_10_0_1() { return cSEMICOLONTerminalRuleCall_10_0_1; }
		
		//conditionsAfterMark += Condition
		public Assignment getConditionsAfterMarkAssignment_10_1() { return cConditionsAfterMarkAssignment_10_1; }
		
		//Condition
		public RuleCall getConditionsAfterMarkConditionParserRuleCall_10_1_0() { return cConditionsAfterMarkConditionParserRuleCall_10_1_0; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_11() { return cCLOSEKEYTerminalRuleCall_11; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_12() { return cEOLINETerminalRuleCall_12; }
	}
	public class RestrictionClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.RestrictionClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRestrictionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRestrictionGasParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssertParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RestrictionClause:
		//    Restriction|RestrictionGas|Assert
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Restriction|RestrictionGas|Assert
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Restriction
		public RuleCall getRestrictionParserRuleCall_0() { return cRestrictionParserRuleCall_0; }
		
		//RestrictionGas
		public RuleCall getRestrictionGasParserRuleCall_1() { return cRestrictionGasParserRuleCall_1; }
		
		//Assert
		public RuleCall getAssertParserRuleCall_2() { return cAssertParserRuleCall_2; }
	}
	public class RestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Restriction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_0_0 = (Group)cAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cLogicalUnaryOperatorParserRuleCall_2_0_0_0_0 = (RuleCall)cGroup_2_0_0_0.eContents().get(0);
		private final Assignment cExpr1Assignment_2_0_0_0_1 = (Assignment)cGroup_2_0_0_0.eContents().get(1);
		private final Alternatives cExpr1Alternatives_2_0_0_0_1_0 = (Alternatives)cExpr1Assignment_2_0_0_0_1.eContents().get(0);
		private final RuleCall cExpr1SyntaxExpressionParserRuleCall_2_0_0_0_1_0_0 = (RuleCall)cExpr1Alternatives_2_0_0_0_1_0.eContents().get(0);
		private final RuleCall cExpr1IdentifierParserRuleCall_2_0_0_0_1_0_1 = (RuleCall)cExpr1Alternatives_2_0_0_0_1_0.eContents().get(1);
		private final RuleCall cExpr1NumberExpressionParserRuleCall_2_0_0_0_1_0_2 = (RuleCall)cExpr1Alternatives_2_0_0_0_1_0.eContents().get(2);
		private final RuleCall cExpr1ArithmeticalExpressionParserRuleCall_2_0_0_0_1_0_3 = (RuleCall)cExpr1Alternatives_2_0_0_0_1_0.eContents().get(3);
		private final RuleCall cExpr1BracketExpressionParserRuleCall_2_0_0_0_1_0_4 = (RuleCall)cExpr1Alternatives_2_0_0_0_1_0.eContents().get(4);
		private final Keyword cExpr1NowKeyword_2_0_0_0_1_0_5 = (Keyword)cExpr1Alternatives_2_0_0_0_1_0.eContents().get(5);
		private final RuleCall cExpr1IdentifierDotExpressionParserRuleCall_2_0_0_0_1_0_6 = (RuleCall)cExpr1Alternatives_2_0_0_0_1_0.eContents().get(6);
		private final RuleCall cExpr1MSGVariablesParserRuleCall_2_0_0_0_1_0_7 = (RuleCall)cExpr1Alternatives_2_0_0_0_1_0.eContents().get(7);
		private final RuleCall cExpr1TypeCastingExpressionParserRuleCall_2_0_0_0_1_0_8 = (RuleCall)cExpr1Alternatives_2_0_0_0_1_0.eContents().get(8);
		private final RuleCall cExpr1BCKTIMESTAMPTerminalRuleCall_2_0_0_0_1_0_9 = (RuleCall)cExpr1Alternatives_2_0_0_0_1_0.eContents().get(9);
		private final RuleCall cExpr1CallFunctionExpressionParserRuleCall_2_0_0_0_1_0_10 = (RuleCall)cExpr1Alternatives_2_0_0_0_1_0.eContents().get(10);
		private final RuleCall cExpr1BoolValueExpressionParserRuleCall_2_0_0_0_1_0_11 = (RuleCall)cExpr1Alternatives_2_0_0_0_1_0.eContents().get(11);
		private final Group cGroup_2_0_0_1 = (Group)cAlternatives_2_0_0.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_2_0_0_1_0 = (RuleCall)cGroup_2_0_0_1.eContents().get(0);
		private final Group cGroup_2_0_0_1_1 = (Group)cGroup_2_0_0_1.eContents().get(1);
		private final RuleCall cLogicalUnaryOperatorParserRuleCall_2_0_0_1_1_0 = (RuleCall)cGroup_2_0_0_1_1.eContents().get(0);
		private final Assignment cExpr1Assignment_2_0_0_1_1_1 = (Assignment)cGroup_2_0_0_1_1.eContents().get(1);
		private final Alternatives cExpr1Alternatives_2_0_0_1_1_1_0 = (Alternatives)cExpr1Assignment_2_0_0_1_1_1.eContents().get(0);
		private final RuleCall cExpr1BracketExpressionParserRuleCall_2_0_0_1_1_1_0_0 = (RuleCall)cExpr1Alternatives_2_0_0_1_1_1_0.eContents().get(0);
		private final RuleCall cExpr1IdentifierDotExpressionParserRuleCall_2_0_0_1_1_1_0_1 = (RuleCall)cExpr1Alternatives_2_0_0_1_1_1_0.eContents().get(1);
		private final RuleCall cExpr1SyntaxExpressionParserRuleCall_2_0_0_1_1_1_0_2 = (RuleCall)cExpr1Alternatives_2_0_0_1_1_1_0.eContents().get(2);
		private final RuleCall cExpr1IdentifierParserRuleCall_2_0_0_1_1_1_0_3 = (RuleCall)cExpr1Alternatives_2_0_0_1_1_1_0.eContents().get(3);
		private final RuleCall cExpr1NumberExpressionParserRuleCall_2_0_0_1_1_1_0_4 = (RuleCall)cExpr1Alternatives_2_0_0_1_1_1_0.eContents().get(4);
		private final RuleCall cExpr1ArithmeticalExpressionParserRuleCall_2_0_0_1_1_1_0_5 = (RuleCall)cExpr1Alternatives_2_0_0_1_1_1_0.eContents().get(5);
		private final RuleCall cExpr1MSGVariablesParserRuleCall_2_0_0_1_1_1_0_6 = (RuleCall)cExpr1Alternatives_2_0_0_1_1_1_0.eContents().get(6);
		private final RuleCall cExpr1BlockVariablesParserRuleCall_2_0_0_1_1_1_0_7 = (RuleCall)cExpr1Alternatives_2_0_0_1_1_1_0.eContents().get(7);
		private final Keyword cExpr1NowKeyword_2_0_0_1_1_1_0_8 = (Keyword)cExpr1Alternatives_2_0_0_1_1_1_0.eContents().get(8);
		private final RuleCall cExpr1TypeCastingExpressionParserRuleCall_2_0_0_1_1_1_0_9 = (RuleCall)cExpr1Alternatives_2_0_0_1_1_1_0.eContents().get(9);
		private final RuleCall cExpr1CallFunctionExpressionParserRuleCall_2_0_0_1_1_1_0_10 = (RuleCall)cExpr1Alternatives_2_0_0_1_1_1_0.eContents().get(10);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_2_0_0_1_2 = (RuleCall)cGroup_2_0_0_1.eContents().get(2);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cOperatorComparationOperatorEnumRuleCall_2_0_1_0_0 = (RuleCall)cOperatorAssignment_2_0_1_0.eContents().get(0);
		private final Assignment cExpr2Assignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final Alternatives cExpr2Alternatives_2_0_1_1_0 = (Alternatives)cExpr2Assignment_2_0_1_1.eContents().get(0);
		private final RuleCall cExpr2SyntaxExpressionParserRuleCall_2_0_1_1_0_0 = (RuleCall)cExpr2Alternatives_2_0_1_1_0.eContents().get(0);
		private final RuleCall cExpr2IdentifierParserRuleCall_2_0_1_1_0_1 = (RuleCall)cExpr2Alternatives_2_0_1_1_0.eContents().get(1);
		private final RuleCall cExpr2NumberExpressionParserRuleCall_2_0_1_1_0_2 = (RuleCall)cExpr2Alternatives_2_0_1_1_0.eContents().get(2);
		private final RuleCall cExpr2IdentifierDotExpressionParserRuleCall_2_0_1_1_0_3 = (RuleCall)cExpr2Alternatives_2_0_1_1_0.eContents().get(3);
		private final RuleCall cExpr2ArithmeticalExpressionParserRuleCall_2_0_1_1_0_4 = (RuleCall)cExpr2Alternatives_2_0_1_1_0.eContents().get(4);
		private final RuleCall cExpr2MSGVariablesParserRuleCall_2_0_1_1_0_5 = (RuleCall)cExpr2Alternatives_2_0_1_1_0.eContents().get(5);
		private final Keyword cExpr2NowKeyword_2_0_1_1_0_6 = (Keyword)cExpr2Alternatives_2_0_1_1_0.eContents().get(6);
		private final RuleCall cExpr2BracketExpressionParserRuleCall_2_0_1_1_0_7 = (RuleCall)cExpr2Alternatives_2_0_1_1_0.eContents().get(7);
		private final RuleCall cExpr2TypeCastingExpressionParserRuleCall_2_0_1_1_0_8 = (RuleCall)cExpr2Alternatives_2_0_1_1_0.eContents().get(8);
		private final RuleCall cExpr2CallFunctionExpressionParserRuleCall_2_0_1_1_0_9 = (RuleCall)cExpr2Alternatives_2_0_1_1_0.eContents().get(9);
		private final RuleCall cExpr2BoolValueExpressionParserRuleCall_2_0_1_1_0_10 = (RuleCall)cExpr2Alternatives_2_0_1_1_0.eContents().get(10);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Assignment cMessageAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMessageSyntaxExpressionParserRuleCall_2_1_1_0 = (RuleCall)cMessageAssignment_2_1_1.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSEMICOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEOLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Restriction:
		//    "require" OPENPARENTHESIS (((LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|"now"|IdentifierDotExpression|MSGVariables|TypeCastingExpression|BCKTIMESTAMP|CallFunctionExpression|BoolValueExpression)| OPENPARENTHESIS ( LogicalUnaryOperator? expr1=(BracketExpression|IdentifierDotExpression|SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGVariables|BlockVariables|"now"|TypeCastingExpression|CallFunctionExpression)) CLOSEPARENTHESIS)
		//    (operator=ComparationOperator expr2=(SyntaxExpression|Identifier|NumberExpression|IdentifierDotExpression|ArithmeticalExpression|MSGVariables|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression|BoolValueExpression))?
		//    ) (COMMA message=SyntaxExpression)?) CLOSEPARENTHESIS SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"require" OPENPARENTHESIS (((LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|"now"|IdentifierDotExpression|MSGVariables|TypeCastingExpression|BCKTIMESTAMP|CallFunctionExpression|BoolValueExpression)| OPENPARENTHESIS ( LogicalUnaryOperator? expr1=(BracketExpression|IdentifierDotExpression|SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGVariables|BlockVariables|"now"|TypeCastingExpression|CallFunctionExpression)) CLOSEPARENTHESIS)
		//(operator=ComparationOperator expr2=(SyntaxExpression|Identifier|NumberExpression|IdentifierDotExpression|ArithmeticalExpression|MSGVariables|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression|BoolValueExpression))?
		//) (COMMA message=SyntaxExpression)?) CLOSEPARENTHESIS SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"require"
		public Keyword getRequireKeyword_0() { return cRequireKeyword_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//(((LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|"now"|IdentifierDotExpression|MSGVariables|TypeCastingExpression|BCKTIMESTAMP|CallFunctionExpression|BoolValueExpression)| OPENPARENTHESIS ( LogicalUnaryOperator? expr1=(BracketExpression|IdentifierDotExpression|SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGVariables|BlockVariables|"now"|TypeCastingExpression|CallFunctionExpression)) CLOSEPARENTHESIS)
		//   (operator=ComparationOperator expr2=(SyntaxExpression|Identifier|NumberExpression|IdentifierDotExpression|ArithmeticalExpression|MSGVariables|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression|BoolValueExpression))?
		//   ) (COMMA message=SyntaxExpression)?)
		public Group getGroup_2() { return cGroup_2; }
		
		//((LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|"now"|IdentifierDotExpression|MSGVariables|TypeCastingExpression|BCKTIMESTAMP|CallFunctionExpression|BoolValueExpression)| OPENPARENTHESIS ( LogicalUnaryOperator? expr1=(BracketExpression|IdentifierDotExpression|SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGVariables|BlockVariables|"now"|TypeCastingExpression|CallFunctionExpression)) CLOSEPARENTHESIS)
		//    (operator=ComparationOperator expr2=(SyntaxExpression|Identifier|NumberExpression|IdentifierDotExpression|ArithmeticalExpression|MSGVariables|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression|BoolValueExpression))?
		//    )
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//(LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|"now"|IdentifierDotExpression|MSGVariables|TypeCastingExpression|BCKTIMESTAMP|CallFunctionExpression|BoolValueExpression)| OPENPARENTHESIS ( LogicalUnaryOperator? expr1=(BracketExpression|IdentifierDotExpression|SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGVariables|BlockVariables|"now"|TypeCastingExpression|CallFunctionExpression)) CLOSEPARENTHESIS)
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }
		
		//LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|"now"|IdentifierDotExpression|MSGVariables|TypeCastingExpression|BCKTIMESTAMP|CallFunctionExpression|BoolValueExpression)
		public Group getGroup_2_0_0_0() { return cGroup_2_0_0_0; }
		
		//LogicalUnaryOperator?
		public RuleCall getLogicalUnaryOperatorParserRuleCall_2_0_0_0_0() { return cLogicalUnaryOperatorParserRuleCall_2_0_0_0_0; }
		
		//expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|"now"|IdentifierDotExpression|MSGVariables|TypeCastingExpression|BCKTIMESTAMP|CallFunctionExpression|BoolValueExpression)
		public Assignment getExpr1Assignment_2_0_0_0_1() { return cExpr1Assignment_2_0_0_0_1; }
		
		//(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|"now"|IdentifierDotExpression|MSGVariables|TypeCastingExpression|BCKTIMESTAMP|CallFunctionExpression|BoolValueExpression)
		public Alternatives getExpr1Alternatives_2_0_0_0_1_0() { return cExpr1Alternatives_2_0_0_0_1_0; }
		
		//SyntaxExpression
		public RuleCall getExpr1SyntaxExpressionParserRuleCall_2_0_0_0_1_0_0() { return cExpr1SyntaxExpressionParserRuleCall_2_0_0_0_1_0_0; }
		
		//Identifier
		public RuleCall getExpr1IdentifierParserRuleCall_2_0_0_0_1_0_1() { return cExpr1IdentifierParserRuleCall_2_0_0_0_1_0_1; }
		
		//NumberExpression
		public RuleCall getExpr1NumberExpressionParserRuleCall_2_0_0_0_1_0_2() { return cExpr1NumberExpressionParserRuleCall_2_0_0_0_1_0_2; }
		
		//ArithmeticalExpression
		public RuleCall getExpr1ArithmeticalExpressionParserRuleCall_2_0_0_0_1_0_3() { return cExpr1ArithmeticalExpressionParserRuleCall_2_0_0_0_1_0_3; }
		
		//BracketExpression
		public RuleCall getExpr1BracketExpressionParserRuleCall_2_0_0_0_1_0_4() { return cExpr1BracketExpressionParserRuleCall_2_0_0_0_1_0_4; }
		
		//"now"
		public Keyword getExpr1NowKeyword_2_0_0_0_1_0_5() { return cExpr1NowKeyword_2_0_0_0_1_0_5; }
		
		//IdentifierDotExpression
		public RuleCall getExpr1IdentifierDotExpressionParserRuleCall_2_0_0_0_1_0_6() { return cExpr1IdentifierDotExpressionParserRuleCall_2_0_0_0_1_0_6; }
		
		//MSGVariables
		public RuleCall getExpr1MSGVariablesParserRuleCall_2_0_0_0_1_0_7() { return cExpr1MSGVariablesParserRuleCall_2_0_0_0_1_0_7; }
		
		//TypeCastingExpression
		public RuleCall getExpr1TypeCastingExpressionParserRuleCall_2_0_0_0_1_0_8() { return cExpr1TypeCastingExpressionParserRuleCall_2_0_0_0_1_0_8; }
		
		//BCKTIMESTAMP
		public RuleCall getExpr1BCKTIMESTAMPTerminalRuleCall_2_0_0_0_1_0_9() { return cExpr1BCKTIMESTAMPTerminalRuleCall_2_0_0_0_1_0_9; }
		
		//CallFunctionExpression
		public RuleCall getExpr1CallFunctionExpressionParserRuleCall_2_0_0_0_1_0_10() { return cExpr1CallFunctionExpressionParserRuleCall_2_0_0_0_1_0_10; }
		
		//BoolValueExpression
		public RuleCall getExpr1BoolValueExpressionParserRuleCall_2_0_0_0_1_0_11() { return cExpr1BoolValueExpressionParserRuleCall_2_0_0_0_1_0_11; }
		
		//OPENPARENTHESIS ( LogicalUnaryOperator? expr1=(BracketExpression|IdentifierDotExpression|SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGVariables|BlockVariables|"now"|TypeCastingExpression|CallFunctionExpression)) CLOSEPARENTHESIS
		public Group getGroup_2_0_0_1() { return cGroup_2_0_0_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_2_0_0_1_0() { return cOPENPARENTHESISTerminalRuleCall_2_0_0_1_0; }
		
		//( LogicalUnaryOperator? expr1=(BracketExpression|IdentifierDotExpression|SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGVariables|BlockVariables|"now"|TypeCastingExpression|CallFunctionExpression))
		public Group getGroup_2_0_0_1_1() { return cGroup_2_0_0_1_1; }
		
		//LogicalUnaryOperator?
		public RuleCall getLogicalUnaryOperatorParserRuleCall_2_0_0_1_1_0() { return cLogicalUnaryOperatorParserRuleCall_2_0_0_1_1_0; }
		
		//expr1=(BracketExpression|IdentifierDotExpression|SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGVariables|BlockVariables|"now"|TypeCastingExpression|CallFunctionExpression)
		public Assignment getExpr1Assignment_2_0_0_1_1_1() { return cExpr1Assignment_2_0_0_1_1_1; }
		
		//(BracketExpression|IdentifierDotExpression|SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGVariables|BlockVariables|"now"|TypeCastingExpression|CallFunctionExpression)
		public Alternatives getExpr1Alternatives_2_0_0_1_1_1_0() { return cExpr1Alternatives_2_0_0_1_1_1_0; }
		
		//BracketExpression
		public RuleCall getExpr1BracketExpressionParserRuleCall_2_0_0_1_1_1_0_0() { return cExpr1BracketExpressionParserRuleCall_2_0_0_1_1_1_0_0; }
		
		//IdentifierDotExpression
		public RuleCall getExpr1IdentifierDotExpressionParserRuleCall_2_0_0_1_1_1_0_1() { return cExpr1IdentifierDotExpressionParserRuleCall_2_0_0_1_1_1_0_1; }
		
		//SyntaxExpression
		public RuleCall getExpr1SyntaxExpressionParserRuleCall_2_0_0_1_1_1_0_2() { return cExpr1SyntaxExpressionParserRuleCall_2_0_0_1_1_1_0_2; }
		
		//Identifier
		public RuleCall getExpr1IdentifierParserRuleCall_2_0_0_1_1_1_0_3() { return cExpr1IdentifierParserRuleCall_2_0_0_1_1_1_0_3; }
		
		//NumberExpression
		public RuleCall getExpr1NumberExpressionParserRuleCall_2_0_0_1_1_1_0_4() { return cExpr1NumberExpressionParserRuleCall_2_0_0_1_1_1_0_4; }
		
		//ArithmeticalExpression
		public RuleCall getExpr1ArithmeticalExpressionParserRuleCall_2_0_0_1_1_1_0_5() { return cExpr1ArithmeticalExpressionParserRuleCall_2_0_0_1_1_1_0_5; }
		
		//MSGVariables
		public RuleCall getExpr1MSGVariablesParserRuleCall_2_0_0_1_1_1_0_6() { return cExpr1MSGVariablesParserRuleCall_2_0_0_1_1_1_0_6; }
		
		//BlockVariables
		public RuleCall getExpr1BlockVariablesParserRuleCall_2_0_0_1_1_1_0_7() { return cExpr1BlockVariablesParserRuleCall_2_0_0_1_1_1_0_7; }
		
		//"now"
		public Keyword getExpr1NowKeyword_2_0_0_1_1_1_0_8() { return cExpr1NowKeyword_2_0_0_1_1_1_0_8; }
		
		//TypeCastingExpression
		public RuleCall getExpr1TypeCastingExpressionParserRuleCall_2_0_0_1_1_1_0_9() { return cExpr1TypeCastingExpressionParserRuleCall_2_0_0_1_1_1_0_9; }
		
		//CallFunctionExpression
		public RuleCall getExpr1CallFunctionExpressionParserRuleCall_2_0_0_1_1_1_0_10() { return cExpr1CallFunctionExpressionParserRuleCall_2_0_0_1_1_1_0_10; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_2_0_0_1_2() { return cCLOSEPARENTHESISTerminalRuleCall_2_0_0_1_2; }
		
		//(operator=ComparationOperator expr2=(SyntaxExpression|Identifier|NumberExpression|IdentifierDotExpression|ArithmeticalExpression|MSGVariables|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression|BoolValueExpression))?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//operator=ComparationOperator
		public Assignment getOperatorAssignment_2_0_1_0() { return cOperatorAssignment_2_0_1_0; }
		
		//ComparationOperator
		public RuleCall getOperatorComparationOperatorEnumRuleCall_2_0_1_0_0() { return cOperatorComparationOperatorEnumRuleCall_2_0_1_0_0; }
		
		//expr2=(SyntaxExpression|Identifier|NumberExpression|IdentifierDotExpression|ArithmeticalExpression|MSGVariables|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression|BoolValueExpression)
		public Assignment getExpr2Assignment_2_0_1_1() { return cExpr2Assignment_2_0_1_1; }
		
		//(SyntaxExpression|Identifier|NumberExpression|IdentifierDotExpression|ArithmeticalExpression|MSGVariables|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression|BoolValueExpression)
		public Alternatives getExpr2Alternatives_2_0_1_1_0() { return cExpr2Alternatives_2_0_1_1_0; }
		
		//SyntaxExpression
		public RuleCall getExpr2SyntaxExpressionParserRuleCall_2_0_1_1_0_0() { return cExpr2SyntaxExpressionParserRuleCall_2_0_1_1_0_0; }
		
		//Identifier
		public RuleCall getExpr2IdentifierParserRuleCall_2_0_1_1_0_1() { return cExpr2IdentifierParserRuleCall_2_0_1_1_0_1; }
		
		//NumberExpression
		public RuleCall getExpr2NumberExpressionParserRuleCall_2_0_1_1_0_2() { return cExpr2NumberExpressionParserRuleCall_2_0_1_1_0_2; }
		
		//IdentifierDotExpression
		public RuleCall getExpr2IdentifierDotExpressionParserRuleCall_2_0_1_1_0_3() { return cExpr2IdentifierDotExpressionParserRuleCall_2_0_1_1_0_3; }
		
		//ArithmeticalExpression
		public RuleCall getExpr2ArithmeticalExpressionParserRuleCall_2_0_1_1_0_4() { return cExpr2ArithmeticalExpressionParserRuleCall_2_0_1_1_0_4; }
		
		//MSGVariables
		public RuleCall getExpr2MSGVariablesParserRuleCall_2_0_1_1_0_5() { return cExpr2MSGVariablesParserRuleCall_2_0_1_1_0_5; }
		
		//"now"
		public Keyword getExpr2NowKeyword_2_0_1_1_0_6() { return cExpr2NowKeyword_2_0_1_1_0_6; }
		
		//BracketExpression
		public RuleCall getExpr2BracketExpressionParserRuleCall_2_0_1_1_0_7() { return cExpr2BracketExpressionParserRuleCall_2_0_1_1_0_7; }
		
		//TypeCastingExpression
		public RuleCall getExpr2TypeCastingExpressionParserRuleCall_2_0_1_1_0_8() { return cExpr2TypeCastingExpressionParserRuleCall_2_0_1_1_0_8; }
		
		//CallFunctionExpression
		public RuleCall getExpr2CallFunctionExpressionParserRuleCall_2_0_1_1_0_9() { return cExpr2CallFunctionExpressionParserRuleCall_2_0_1_1_0_9; }
		
		//BoolValueExpression
		public RuleCall getExpr2BoolValueExpressionParserRuleCall_2_0_1_1_0_10() { return cExpr2BoolValueExpressionParserRuleCall_2_0_1_1_0_10; }
		
		//(COMMA message=SyntaxExpression)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_1_0() { return cCOMMATerminalRuleCall_2_1_0; }
		
		//message=SyntaxExpression
		public Assignment getMessageAssignment_2_1_1() { return cMessageAssignment_2_1_1; }
		
		//SyntaxExpression
		public RuleCall getMessageSyntaxExpressionParserRuleCall_2_1_1_0() { return cMessageSyntaxExpressionParserRuleCall_2_1_1_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_3() { return cCLOSEPARENTHESISTerminalRuleCall_3; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_4() { return cSEMICOLONTerminalRuleCall_4; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_5() { return cEOLINETerminalRuleCall_5; }
	}
	public class RestrictionGasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.RestrictionGas");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExpr1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cExpr1Alternatives_2_0 = (Alternatives)cExpr1Assignment_2.eContents().get(0);
		private final RuleCall cExpr1IdentifierParserRuleCall_2_0_0 = (RuleCall)cExpr1Alternatives_2_0.eContents().get(0);
		private final RuleCall cExpr1NumberExpressionParserRuleCall_2_0_1 = (RuleCall)cExpr1Alternatives_2_0.eContents().get(1);
		private final RuleCall cExpr1BracketExpressionParserRuleCall_2_0_2 = (RuleCall)cExpr1Alternatives_2_0.eContents().get(2);
		private final RuleCall cExpr1IdentifierDotExpressionParserRuleCall_2_0_3 = (RuleCall)cExpr1Alternatives_2_0.eContents().get(3);
		private final RuleCall cExpr1MSGVariablesParserRuleCall_2_0_4 = (RuleCall)cExpr1Alternatives_2_0.eContents().get(4);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorComparationOperatorEnumRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Assignment cAmountAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAmountNumberExpressionParserRuleCall_4_0 = (RuleCall)cAmountAssignment_4.eContents().get(0);
		private final Assignment cTypeCoinAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeCoinCoinEnumRuleCall_5_0 = (RuleCall)cTypeCoinAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final RuleCall cCOMMATerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Assignment cMessageAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMessageSyntaxExpressionParserRuleCall_6_1_0 = (RuleCall)cMessageAssignment_6_1.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cSEMICOLONTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cEOLINETerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//RestrictionGas:
		//    "require" OPENPARENTHESIS expr1=(Identifier|NumberExpression|BracketExpression|IdentifierDotExpression|MSGVariables) operator=ComparationOperator amount=NumberExpression typeCoin=Coin (COMMA message=SyntaxExpression)? CLOSEPARENTHESIS SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"require" OPENPARENTHESIS expr1=(Identifier|NumberExpression|BracketExpression|IdentifierDotExpression|MSGVariables) operator=ComparationOperator amount=NumberExpression typeCoin=Coin (COMMA message=SyntaxExpression)? CLOSEPARENTHESIS SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"require"
		public Keyword getRequireKeyword_0() { return cRequireKeyword_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//expr1=(Identifier|NumberExpression|BracketExpression|IdentifierDotExpression|MSGVariables)
		public Assignment getExpr1Assignment_2() { return cExpr1Assignment_2; }
		
		//(Identifier|NumberExpression|BracketExpression|IdentifierDotExpression|MSGVariables)
		public Alternatives getExpr1Alternatives_2_0() { return cExpr1Alternatives_2_0; }
		
		//Identifier
		public RuleCall getExpr1IdentifierParserRuleCall_2_0_0() { return cExpr1IdentifierParserRuleCall_2_0_0; }
		
		//NumberExpression
		public RuleCall getExpr1NumberExpressionParserRuleCall_2_0_1() { return cExpr1NumberExpressionParserRuleCall_2_0_1; }
		
		//BracketExpression
		public RuleCall getExpr1BracketExpressionParserRuleCall_2_0_2() { return cExpr1BracketExpressionParserRuleCall_2_0_2; }
		
		//IdentifierDotExpression
		public RuleCall getExpr1IdentifierDotExpressionParserRuleCall_2_0_3() { return cExpr1IdentifierDotExpressionParserRuleCall_2_0_3; }
		
		//MSGVariables
		public RuleCall getExpr1MSGVariablesParserRuleCall_2_0_4() { return cExpr1MSGVariablesParserRuleCall_2_0_4; }
		
		//operator=ComparationOperator
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//ComparationOperator
		public RuleCall getOperatorComparationOperatorEnumRuleCall_3_0() { return cOperatorComparationOperatorEnumRuleCall_3_0; }
		
		//amount=NumberExpression
		public Assignment getAmountAssignment_4() { return cAmountAssignment_4; }
		
		//NumberExpression
		public RuleCall getAmountNumberExpressionParserRuleCall_4_0() { return cAmountNumberExpressionParserRuleCall_4_0; }
		
		//typeCoin=Coin
		public Assignment getTypeCoinAssignment_5() { return cTypeCoinAssignment_5; }
		
		//Coin
		public RuleCall getTypeCoinCoinEnumRuleCall_5_0() { return cTypeCoinCoinEnumRuleCall_5_0; }
		
		//(COMMA message=SyntaxExpression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_6_0() { return cCOMMATerminalRuleCall_6_0; }
		
		//message=SyntaxExpression
		public Assignment getMessageAssignment_6_1() { return cMessageAssignment_6_1; }
		
		//SyntaxExpression
		public RuleCall getMessageSyntaxExpressionParserRuleCall_6_1_0() { return cMessageSyntaxExpressionParserRuleCall_6_1_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_7() { return cCLOSEPARENTHESISTerminalRuleCall_7; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_8() { return cSEMICOLONTerminalRuleCall_8; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_9() { return cEOLINETerminalRuleCall_9; }
	}
	public class AssertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Assert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cLogicalUnaryOperatorParserRuleCall_2_0_0_0 = (RuleCall)cGroup_2_0_0.eContents().get(0);
		private final Assignment cExpr1Assignment_2_0_0_1 = (Assignment)cGroup_2_0_0.eContents().get(1);
		private final Alternatives cExpr1Alternatives_2_0_0_1_0 = (Alternatives)cExpr1Assignment_2_0_0_1.eContents().get(0);
		private final RuleCall cExpr1SyntaxExpressionParserRuleCall_2_0_0_1_0_0 = (RuleCall)cExpr1Alternatives_2_0_0_1_0.eContents().get(0);
		private final RuleCall cExpr1IdentifierParserRuleCall_2_0_0_1_0_1 = (RuleCall)cExpr1Alternatives_2_0_0_1_0.eContents().get(1);
		private final RuleCall cExpr1NumberExpressionParserRuleCall_2_0_0_1_0_2 = (RuleCall)cExpr1Alternatives_2_0_0_1_0.eContents().get(2);
		private final RuleCall cExpr1ArithmeticalExpressionParserRuleCall_2_0_0_1_0_3 = (RuleCall)cExpr1Alternatives_2_0_0_1_0.eContents().get(3);
		private final RuleCall cExpr1BracketExpressionParserRuleCall_2_0_0_1_0_4 = (RuleCall)cExpr1Alternatives_2_0_0_1_0.eContents().get(4);
		private final RuleCall cExpr1MSGSENDERTerminalRuleCall_2_0_0_1_0_5 = (RuleCall)cExpr1Alternatives_2_0_0_1_0.eContents().get(5);
		private final RuleCall cExpr1MSGVALUETerminalRuleCall_2_0_0_1_0_6 = (RuleCall)cExpr1Alternatives_2_0_0_1_0.eContents().get(6);
		private final Keyword cExpr1NowKeyword_2_0_0_1_0_7 = (Keyword)cExpr1Alternatives_2_0_0_1_0.eContents().get(7);
		private final RuleCall cExpr1IdentifierValueExpressionParserRuleCall_2_0_0_1_0_8 = (RuleCall)cExpr1Alternatives_2_0_0_1_0.eContents().get(8);
		private final Group cGroup_2_0_1 = (Group)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_2_0_1_0 = (RuleCall)cGroup_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cLogicalUnaryOperatorParserRuleCall_2_0_1_1_0 = (RuleCall)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cExpr1Assignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final Alternatives cExpr1Alternatives_2_0_1_1_1_0 = (Alternatives)cExpr1Assignment_2_0_1_1_1.eContents().get(0);
		private final RuleCall cExpr1SyntaxExpressionParserRuleCall_2_0_1_1_1_0_0 = (RuleCall)cExpr1Alternatives_2_0_1_1_1_0.eContents().get(0);
		private final RuleCall cExpr1IdentifierParserRuleCall_2_0_1_1_1_0_1 = (RuleCall)cExpr1Alternatives_2_0_1_1_1_0.eContents().get(1);
		private final RuleCall cExpr1NumberExpressionParserRuleCall_2_0_1_1_1_0_2 = (RuleCall)cExpr1Alternatives_2_0_1_1_1_0.eContents().get(2);
		private final RuleCall cExpr1ArithmeticalExpressionParserRuleCall_2_0_1_1_1_0_3 = (RuleCall)cExpr1Alternatives_2_0_1_1_1_0.eContents().get(3);
		private final RuleCall cExpr1MSGSENDERTerminalRuleCall_2_0_1_1_1_0_4 = (RuleCall)cExpr1Alternatives_2_0_1_1_1_0.eContents().get(4);
		private final RuleCall cExpr1MSGVALUETerminalRuleCall_2_0_1_1_1_0_5 = (RuleCall)cExpr1Alternatives_2_0_1_1_1_0.eContents().get(5);
		private final RuleCall cExpr1BlockVariablesParserRuleCall_2_0_1_1_1_0_6 = (RuleCall)cExpr1Alternatives_2_0_1_1_1_0.eContents().get(6);
		private final Keyword cExpr1NowKeyword_2_0_1_1_1_0_7 = (Keyword)cExpr1Alternatives_2_0_1_1_1_0.eContents().get(7);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_2_0_1_2 = (RuleCall)cGroup_2_0_1.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cOperatorAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cOperatorComparationOperatorEnumRuleCall_2_1_0_0 = (RuleCall)cOperatorAssignment_2_1_0.eContents().get(0);
		private final Assignment cExpr2Assignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Alternatives cExpr2Alternatives_2_1_1_0 = (Alternatives)cExpr2Assignment_2_1_1.eContents().get(0);
		private final RuleCall cExpr2SyntaxExpressionParserRuleCall_2_1_1_0_0 = (RuleCall)cExpr2Alternatives_2_1_1_0.eContents().get(0);
		private final RuleCall cExpr2IdentifierParserRuleCall_2_1_1_0_1 = (RuleCall)cExpr2Alternatives_2_1_1_0.eContents().get(1);
		private final RuleCall cExpr2NumberExpressionParserRuleCall_2_1_1_0_2 = (RuleCall)cExpr2Alternatives_2_1_1_0.eContents().get(2);
		private final RuleCall cExpr2ArithmeticalExpressionParserRuleCall_2_1_1_0_3 = (RuleCall)cExpr2Alternatives_2_1_1_0.eContents().get(3);
		private final RuleCall cExpr2MSGSENDERTerminalRuleCall_2_1_1_0_4 = (RuleCall)cExpr2Alternatives_2_1_1_0.eContents().get(4);
		private final RuleCall cExpr2MSGVALUETerminalRuleCall_2_1_1_0_5 = (RuleCall)cExpr2Alternatives_2_1_1_0.eContents().get(5);
		private final Keyword cExpr2NowKeyword_2_1_1_0_6 = (Keyword)cExpr2Alternatives_2_1_1_0.eContents().get(6);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSEMICOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEOLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Assert:
		//    "assert" OPENPARENTHESIS (((LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|MSGSENDER|MSGVALUE|"now"|IdentifierValueExpression) | OPENPARENTHESIS ( LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|BlockVariables|"now")) CLOSEPARENTHESIS)
		//        (operator=ComparationOperator expr2=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|"now"))?
		//    )) CLOSEPARENTHESIS SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"assert" OPENPARENTHESIS (((LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|MSGSENDER|MSGVALUE|"now"|IdentifierValueExpression) | OPENPARENTHESIS ( LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|BlockVariables|"now")) CLOSEPARENTHESIS)
		//    (operator=ComparationOperator expr2=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|"now"))?
		//)) CLOSEPARENTHESIS SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"assert"
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//(((LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|MSGSENDER|MSGVALUE|"now"|IdentifierValueExpression) | OPENPARENTHESIS ( LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|BlockVariables|"now")) CLOSEPARENTHESIS)
		//       (operator=ComparationOperator expr2=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|"now"))?
		//   ))
		public Group getGroup_2() { return cGroup_2; }
		
		//(LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|MSGSENDER|MSGVALUE|"now"|IdentifierValueExpression) | OPENPARENTHESIS ( LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|BlockVariables|"now")) CLOSEPARENTHESIS)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|MSGSENDER|MSGVALUE|"now"|IdentifierValueExpression)
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//LogicalUnaryOperator?
		public RuleCall getLogicalUnaryOperatorParserRuleCall_2_0_0_0() { return cLogicalUnaryOperatorParserRuleCall_2_0_0_0; }
		
		//expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|MSGSENDER|MSGVALUE|"now"|IdentifierValueExpression)
		public Assignment getExpr1Assignment_2_0_0_1() { return cExpr1Assignment_2_0_0_1; }
		
		//(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|MSGSENDER|MSGVALUE|"now"|IdentifierValueExpression)
		public Alternatives getExpr1Alternatives_2_0_0_1_0() { return cExpr1Alternatives_2_0_0_1_0; }
		
		//SyntaxExpression
		public RuleCall getExpr1SyntaxExpressionParserRuleCall_2_0_0_1_0_0() { return cExpr1SyntaxExpressionParserRuleCall_2_0_0_1_0_0; }
		
		//Identifier
		public RuleCall getExpr1IdentifierParserRuleCall_2_0_0_1_0_1() { return cExpr1IdentifierParserRuleCall_2_0_0_1_0_1; }
		
		//NumberExpression
		public RuleCall getExpr1NumberExpressionParserRuleCall_2_0_0_1_0_2() { return cExpr1NumberExpressionParserRuleCall_2_0_0_1_0_2; }
		
		//ArithmeticalExpression
		public RuleCall getExpr1ArithmeticalExpressionParserRuleCall_2_0_0_1_0_3() { return cExpr1ArithmeticalExpressionParserRuleCall_2_0_0_1_0_3; }
		
		//BracketExpression
		public RuleCall getExpr1BracketExpressionParserRuleCall_2_0_0_1_0_4() { return cExpr1BracketExpressionParserRuleCall_2_0_0_1_0_4; }
		
		//MSGSENDER
		public RuleCall getExpr1MSGSENDERTerminalRuleCall_2_0_0_1_0_5() { return cExpr1MSGSENDERTerminalRuleCall_2_0_0_1_0_5; }
		
		//MSGVALUE
		public RuleCall getExpr1MSGVALUETerminalRuleCall_2_0_0_1_0_6() { return cExpr1MSGVALUETerminalRuleCall_2_0_0_1_0_6; }
		
		//"now"
		public Keyword getExpr1NowKeyword_2_0_0_1_0_7() { return cExpr1NowKeyword_2_0_0_1_0_7; }
		
		//IdentifierValueExpression
		public RuleCall getExpr1IdentifierValueExpressionParserRuleCall_2_0_0_1_0_8() { return cExpr1IdentifierValueExpressionParserRuleCall_2_0_0_1_0_8; }
		
		//OPENPARENTHESIS ( LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|BlockVariables|"now")) CLOSEPARENTHESIS
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_2_0_1_0() { return cOPENPARENTHESISTerminalRuleCall_2_0_1_0; }
		
		//( LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|BlockVariables|"now"))
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }
		
		//LogicalUnaryOperator?
		public RuleCall getLogicalUnaryOperatorParserRuleCall_2_0_1_1_0() { return cLogicalUnaryOperatorParserRuleCall_2_0_1_1_0; }
		
		//expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|BlockVariables|"now")
		public Assignment getExpr1Assignment_2_0_1_1_1() { return cExpr1Assignment_2_0_1_1_1; }
		
		//(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|BlockVariables|"now")
		public Alternatives getExpr1Alternatives_2_0_1_1_1_0() { return cExpr1Alternatives_2_0_1_1_1_0; }
		
		//SyntaxExpression
		public RuleCall getExpr1SyntaxExpressionParserRuleCall_2_0_1_1_1_0_0() { return cExpr1SyntaxExpressionParserRuleCall_2_0_1_1_1_0_0; }
		
		//Identifier
		public RuleCall getExpr1IdentifierParserRuleCall_2_0_1_1_1_0_1() { return cExpr1IdentifierParserRuleCall_2_0_1_1_1_0_1; }
		
		//NumberExpression
		public RuleCall getExpr1NumberExpressionParserRuleCall_2_0_1_1_1_0_2() { return cExpr1NumberExpressionParserRuleCall_2_0_1_1_1_0_2; }
		
		//ArithmeticalExpression
		public RuleCall getExpr1ArithmeticalExpressionParserRuleCall_2_0_1_1_1_0_3() { return cExpr1ArithmeticalExpressionParserRuleCall_2_0_1_1_1_0_3; }
		
		//MSGSENDER
		public RuleCall getExpr1MSGSENDERTerminalRuleCall_2_0_1_1_1_0_4() { return cExpr1MSGSENDERTerminalRuleCall_2_0_1_1_1_0_4; }
		
		//MSGVALUE
		public RuleCall getExpr1MSGVALUETerminalRuleCall_2_0_1_1_1_0_5() { return cExpr1MSGVALUETerminalRuleCall_2_0_1_1_1_0_5; }
		
		//BlockVariables
		public RuleCall getExpr1BlockVariablesParserRuleCall_2_0_1_1_1_0_6() { return cExpr1BlockVariablesParserRuleCall_2_0_1_1_1_0_6; }
		
		//"now"
		public Keyword getExpr1NowKeyword_2_0_1_1_1_0_7() { return cExpr1NowKeyword_2_0_1_1_1_0_7; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_2_0_1_2() { return cCLOSEPARENTHESISTerminalRuleCall_2_0_1_2; }
		
		//(operator=ComparationOperator expr2=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|"now"))?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//operator=ComparationOperator
		public Assignment getOperatorAssignment_2_1_0() { return cOperatorAssignment_2_1_0; }
		
		//ComparationOperator
		public RuleCall getOperatorComparationOperatorEnumRuleCall_2_1_0_0() { return cOperatorComparationOperatorEnumRuleCall_2_1_0_0; }
		
		//expr2=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|"now")
		public Assignment getExpr2Assignment_2_1_1() { return cExpr2Assignment_2_1_1; }
		
		//(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|"now")
		public Alternatives getExpr2Alternatives_2_1_1_0() { return cExpr2Alternatives_2_1_1_0; }
		
		//SyntaxExpression
		public RuleCall getExpr2SyntaxExpressionParserRuleCall_2_1_1_0_0() { return cExpr2SyntaxExpressionParserRuleCall_2_1_1_0_0; }
		
		//Identifier
		public RuleCall getExpr2IdentifierParserRuleCall_2_1_1_0_1() { return cExpr2IdentifierParserRuleCall_2_1_1_0_1; }
		
		//NumberExpression
		public RuleCall getExpr2NumberExpressionParserRuleCall_2_1_1_0_2() { return cExpr2NumberExpressionParserRuleCall_2_1_1_0_2; }
		
		//ArithmeticalExpression
		public RuleCall getExpr2ArithmeticalExpressionParserRuleCall_2_1_1_0_3() { return cExpr2ArithmeticalExpressionParserRuleCall_2_1_1_0_3; }
		
		//MSGSENDER
		public RuleCall getExpr2MSGSENDERTerminalRuleCall_2_1_1_0_4() { return cExpr2MSGSENDERTerminalRuleCall_2_1_1_0_4; }
		
		//MSGVALUE
		public RuleCall getExpr2MSGVALUETerminalRuleCall_2_1_1_0_5() { return cExpr2MSGVALUETerminalRuleCall_2_1_1_0_5; }
		
		//"now"
		public Keyword getExpr2NowKeyword_2_1_1_0_6() { return cExpr2NowKeyword_2_1_1_0_6; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_3() { return cCLOSEPARENTHESISTerminalRuleCall_3; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_4() { return cSEMICOLONTerminalRuleCall_4; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_5() { return cEOLINETerminalRuleCall_5; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.DataType");
		private final RuleCall cEnumParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DataType returns ecore::EDataType:
		//    Enum
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Enum
		public RuleCall getEnumParserRuleCall() { return cEnumParserRuleCall; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeMappingDeclarationParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantCONSTANTTerminalRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		private final Assignment cVisibilityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_3_0 = (RuleCall)cVisibilityAssignment_3.eContents().get(0);
		private final Assignment cStorageDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStorageDataStorageDataEnumRuleCall_4_0 = (RuleCall)cStorageDataAssignment_4.eContents().get(0);
		private final Assignment cNameMappingAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameMappingIdentifierParserRuleCall_5_0 = (RuleCall)cNameMappingAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInicializationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cInicializationAlternatives_6_1_0 = (Alternatives)cInicializationAssignment_6_1.eContents().get(0);
		private final RuleCall cInicializationIdentifierParserRuleCall_6_1_0_0 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(0);
		private final RuleCall cInicializationNumberExpressionParserRuleCall_6_1_0_1 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(1);
		private final RuleCall cInicializationSyntaxExpressionParserRuleCall_6_1_0_2 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(2);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//Mapping:
		//    type=MappingDeclaration array=Array? constant=CONSTANT? visibility = Visibility? storageData = StorageData? nameMapping=Identifier ('=' inicialization = (Identifier|NumberExpression|SyntaxExpression))? SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=MappingDeclaration array=Array? constant=CONSTANT? visibility = Visibility? storageData = StorageData? nameMapping=Identifier ('=' inicialization = (Identifier|NumberExpression|SyntaxExpression))? SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//type=MappingDeclaration
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//MappingDeclaration
		public RuleCall getTypeMappingDeclarationParserRuleCall_0_0() { return cTypeMappingDeclarationParserRuleCall_0_0; }
		
		//array=Array?
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0() { return cArrayArrayParserRuleCall_1_0; }
		
		//constant=CONSTANT?
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//CONSTANT
		public RuleCall getConstantCONSTANTTerminalRuleCall_2_0() { return cConstantCONSTANTTerminalRuleCall_2_0; }
		
		//visibility = Visibility?
		public Assignment getVisibilityAssignment_3() { return cVisibilityAssignment_3; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_3_0() { return cVisibilityVisibilityEnumRuleCall_3_0; }
		
		//storageData = StorageData?
		public Assignment getStorageDataAssignment_4() { return cStorageDataAssignment_4; }
		
		//StorageData
		public RuleCall getStorageDataStorageDataEnumRuleCall_4_0() { return cStorageDataStorageDataEnumRuleCall_4_0; }
		
		//nameMapping=Identifier
		public Assignment getNameMappingAssignment_5() { return cNameMappingAssignment_5; }
		
		//Identifier
		public RuleCall getNameMappingIdentifierParserRuleCall_5_0() { return cNameMappingIdentifierParserRuleCall_5_0; }
		
		//('=' inicialization = (Identifier|NumberExpression|SyntaxExpression))?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//inicialization = (Identifier|NumberExpression|SyntaxExpression)
		public Assignment getInicializationAssignment_6_1() { return cInicializationAssignment_6_1; }
		
		//(Identifier|NumberExpression|SyntaxExpression)
		public Alternatives getInicializationAlternatives_6_1_0() { return cInicializationAlternatives_6_1_0; }
		
		//Identifier
		public RuleCall getInicializationIdentifierParserRuleCall_6_1_0_0() { return cInicializationIdentifierParserRuleCall_6_1_0_0; }
		
		//NumberExpression
		public RuleCall getInicializationNumberExpressionParserRuleCall_6_1_0_1() { return cInicializationNumberExpressionParserRuleCall_6_1_0_1; }
		
		//SyntaxExpression
		public RuleCall getInicializationSyntaxExpressionParserRuleCall_6_1_0_2() { return cInicializationSyntaxExpressionParserRuleCall_6_1_0_2; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
	}
	public class MappingDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.MappingDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeMappingKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cKeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeySingularTypeParserRuleCall_2_0 = (RuleCall)cKeyAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cValueAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final Alternatives cValueAlternatives_4_0_0_0 = (Alternatives)cValueAssignment_4_0_0.eContents().get(0);
		private final RuleCall cValueSingularTypeParserRuleCall_4_0_0_0_0 = (RuleCall)cValueAlternatives_4_0_0_0.eContents().get(0);
		private final Keyword cValueUserKeyword_4_0_0_0_1 = (Keyword)cValueAlternatives_4_0_0_0.eContents().get(1);
		private final Keyword cValueCompanyKeyword_4_0_0_0_2 = (Keyword)cValueAlternatives_4_0_0_0.eContents().get(2);
		private final RuleCall cValueIdentifierParserRuleCall_4_0_0_0_3 = (RuleCall)cValueAlternatives_4_0_0_0.eContents().get(3);
		private final Assignment cArrayAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_4_0_1_0 = (RuleCall)cArrayAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cValueIdentifierAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cValueIdentifierMappingDeclarationParserRuleCall_4_1_0_0 = (RuleCall)cValueIdentifierAssignment_4_1_0.eContents().get(0);
		private final Assignment cArrayAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_4_1_1_0 = (RuleCall)cArrayAssignment_4_1_1.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//MappingDeclaration:
		//    type = "mapping" OPENPARENTHESIS key=SingularType "=>" (value=(SingularType|"User"|"Company"|Identifier) array=Array?|valueIdentifier=(MappingDeclaration) array=Array?) CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = "mapping" OPENPARENTHESIS key=SingularType "=>" (value=(SingularType|"User"|"Company"|Identifier) array=Array?|valueIdentifier=(MappingDeclaration) array=Array?) CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//type = "mapping"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//"mapping"
		public Keyword getTypeMappingKeyword_0_0() { return cTypeMappingKeyword_0_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//key=SingularType
		public Assignment getKeyAssignment_2() { return cKeyAssignment_2; }
		
		//SingularType
		public RuleCall getKeySingularTypeParserRuleCall_2_0() { return cKeySingularTypeParserRuleCall_2_0; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//(value=(SingularType|"User"|"Company"|Identifier) array=Array?|valueIdentifier=(MappingDeclaration) array=Array?)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//value=(SingularType|"User"|"Company"|Identifier) array=Array?
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//value=(SingularType|"User"|"Company"|Identifier)
		public Assignment getValueAssignment_4_0_0() { return cValueAssignment_4_0_0; }
		
		//(SingularType|"User"|"Company"|Identifier)
		public Alternatives getValueAlternatives_4_0_0_0() { return cValueAlternatives_4_0_0_0; }
		
		//SingularType
		public RuleCall getValueSingularTypeParserRuleCall_4_0_0_0_0() { return cValueSingularTypeParserRuleCall_4_0_0_0_0; }
		
		//"User"
		public Keyword getValueUserKeyword_4_0_0_0_1() { return cValueUserKeyword_4_0_0_0_1; }
		
		//"Company"
		public Keyword getValueCompanyKeyword_4_0_0_0_2() { return cValueCompanyKeyword_4_0_0_0_2; }
		
		//Identifier
		public RuleCall getValueIdentifierParserRuleCall_4_0_0_0_3() { return cValueIdentifierParserRuleCall_4_0_0_0_3; }
		
		//array=Array?
		public Assignment getArrayAssignment_4_0_1() { return cArrayAssignment_4_0_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_4_0_1_0() { return cArrayArrayParserRuleCall_4_0_1_0; }
		
		//valueIdentifier=(MappingDeclaration) array=Array?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//valueIdentifier=(MappingDeclaration)
		public Assignment getValueIdentifierAssignment_4_1_0() { return cValueIdentifierAssignment_4_1_0; }
		
		//(MappingDeclaration)
		public RuleCall getValueIdentifierMappingDeclarationParserRuleCall_4_1_0_0() { return cValueIdentifierMappingDeclarationParserRuleCall_4_1_0_0; }
		
		//array=Array?
		public Assignment getArrayAssignment_4_1_1() { return cArrayAssignment_4_1_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_4_1_1_0() { return cArrayArrayParserRuleCall_4_1_1_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_5() { return cCLOSEPARENTHESISTerminalRuleCall_5; }
	}
	public class PersonalizedStructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.PersonalizedStruct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOPENKEYTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cEOLINETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesPropertiesParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Assignment cMappingAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMappingMappingParserRuleCall_5_0 = (RuleCall)cMappingAssignment_5.eContents().get(0);
		private final Assignment cStructsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStructsPersonalizedStructParserRuleCall_6_0 = (RuleCall)cStructsAssignment_6.eContents().get(0);
		private final RuleCall cCLOSEKEYTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//PersonalizedStruct:
		//    "struct" name = Identifier OPENKEY EOLINE?
		//         properties += (Properties)*
		//         mapping += (Mapping)*
		//         structs += (PersonalizedStruct)*
		//    CLOSEKEY EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"struct" name = Identifier OPENKEY EOLINE?
		//     properties += (Properties)*
		//     mapping += (Mapping)*
		//     structs += (PersonalizedStruct)*
		//CLOSEKEY EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_2() { return cOPENKEYTerminalRuleCall_2; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_3() { return cEOLINETerminalRuleCall_3; }
		
		//properties += (Properties)*
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }
		
		//(Properties)
		public RuleCall getPropertiesPropertiesParserRuleCall_4_0() { return cPropertiesPropertiesParserRuleCall_4_0; }
		
		//mapping += (Mapping)*
		public Assignment getMappingAssignment_5() { return cMappingAssignment_5; }
		
		//(Mapping)
		public RuleCall getMappingMappingParserRuleCall_5_0() { return cMappingMappingParserRuleCall_5_0; }
		
		//structs += (PersonalizedStruct)*
		public Assignment getStructsAssignment_6() { return cStructsAssignment_6; }
		
		//(PersonalizedStruct)
		public RuleCall getStructsPersonalizedStructParserRuleCall_6_0() { return cStructsPersonalizedStructParserRuleCall_6_0; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_7() { return cCLOSEKEYTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
	}
	public class UserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.User");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUserAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNameUserKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		private final RuleCall cOPENKEYTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cEOLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cAddressKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAttributeAddressAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameAttributeAddressIdentifierParserRuleCall_6_0 = (RuleCall)cNameAttributeAddressAssignment_6.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Keyword cStringKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cNameAttributeUserAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cNameAttributeUserIdentifierParserRuleCall_10_0 = (RuleCall)cNameAttributeUserAssignment_10.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final RuleCall cEOLINETerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final Keyword cStringKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cNameAttributeSurnameUserAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cNameAttributeSurnameUserIdentifierParserRuleCall_14_0 = (RuleCall)cNameAttributeSurnameUserAssignment_14.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_15 = (RuleCall)cGroup.eContents().get(15);
		private final RuleCall cEOLINETerminalRuleCall_16 = (RuleCall)cGroup.eContents().get(16);
		private final Keyword cStringKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cEmailAttributeUserAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cEmailAttributeUserIdentifierParserRuleCall_18_0 = (RuleCall)cEmailAttributeUserAssignment_18.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_19 = (RuleCall)cGroup.eContents().get(19);
		private final RuleCall cEOLINETerminalRuleCall_20 = (RuleCall)cGroup.eContents().get(20);
		private final Assignment cPropertiesAssignment_21 = (Assignment)cGroup.eContents().get(21);
		private final RuleCall cPropertiesPropertiesParserRuleCall_21_0 = (RuleCall)cPropertiesAssignment_21.eContents().get(0);
		private final Assignment cMappingAssignment_22 = (Assignment)cGroup.eContents().get(22);
		private final RuleCall cMappingMappingParserRuleCall_22_0 = (RuleCall)cMappingAssignment_22.eContents().get(0);
		private final Assignment cStructsAssignment_23 = (Assignment)cGroup.eContents().get(23);
		private final RuleCall cStructsPersonalizedStructParserRuleCall_23_0 = (RuleCall)cStructsAssignment_23.eContents().get(0);
		private final RuleCall cCLOSEKEYTerminalRuleCall_24 = (RuleCall)cGroup.eContents().get(24);
		private final RuleCall cEOLINETerminalRuleCall_25 = (RuleCall)cGroup.eContents().get(25);
		
		//User:
		//    {User} "struct" name = "User" OPENKEY EOLINE?
		//         "address " nameAttributeAddress = Identifier  SEMICOLON EOLINE?
		//         "string" nameAttributeUser = Identifier SEMICOLON EOLINE?
		//         "string" nameAttributeSurnameUser = Identifier  SEMICOLON EOLINE?
		//         "string" emailAttributeUser = Identifier SEMICOLON EOLINE?
		//          properties += (Properties)*
		//          mapping += (Mapping)*
		//          structs += (PersonalizedStruct)*
		//    CLOSEKEY EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{User} "struct" name = "User" OPENKEY EOLINE?
		//     "address " nameAttributeAddress = Identifier  SEMICOLON EOLINE?
		//     "string" nameAttributeUser = Identifier SEMICOLON EOLINE?
		//     "string" nameAttributeSurnameUser = Identifier  SEMICOLON EOLINE?
		//     "string" emailAttributeUser = Identifier SEMICOLON EOLINE?
		//      properties += (Properties)*
		//      mapping += (Mapping)*
		//      structs += (PersonalizedStruct)*
		//CLOSEKEY EOLINE?
		public Group getGroup() { return cGroup; }
		
		//{User}
		public Action getUserAction_0() { return cUserAction_0; }
		
		//"struct"
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
		
		//name = "User"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//"User"
		public Keyword getNameUserKeyword_2_0() { return cNameUserKeyword_2_0; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_3() { return cOPENKEYTerminalRuleCall_3; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_4() { return cEOLINETerminalRuleCall_4; }
		
		//"address "
		public Keyword getAddressKeyword_5() { return cAddressKeyword_5; }
		
		//nameAttributeAddress = Identifier
		public Assignment getNameAttributeAddressAssignment_6() { return cNameAttributeAddressAssignment_6; }
		
		//Identifier
		public RuleCall getNameAttributeAddressIdentifierParserRuleCall_6_0() { return cNameAttributeAddressIdentifierParserRuleCall_6_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
		
		//"string"
		public Keyword getStringKeyword_9() { return cStringKeyword_9; }
		
		//nameAttributeUser = Identifier
		public Assignment getNameAttributeUserAssignment_10() { return cNameAttributeUserAssignment_10; }
		
		//Identifier
		public RuleCall getNameAttributeUserIdentifierParserRuleCall_10_0() { return cNameAttributeUserIdentifierParserRuleCall_10_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_11() { return cSEMICOLONTerminalRuleCall_11; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_12() { return cEOLINETerminalRuleCall_12; }
		
		//"string"
		public Keyword getStringKeyword_13() { return cStringKeyword_13; }
		
		//nameAttributeSurnameUser = Identifier
		public Assignment getNameAttributeSurnameUserAssignment_14() { return cNameAttributeSurnameUserAssignment_14; }
		
		//Identifier
		public RuleCall getNameAttributeSurnameUserIdentifierParserRuleCall_14_0() { return cNameAttributeSurnameUserIdentifierParserRuleCall_14_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_15() { return cSEMICOLONTerminalRuleCall_15; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_16() { return cEOLINETerminalRuleCall_16; }
		
		//"string"
		public Keyword getStringKeyword_17() { return cStringKeyword_17; }
		
		//emailAttributeUser = Identifier
		public Assignment getEmailAttributeUserAssignment_18() { return cEmailAttributeUserAssignment_18; }
		
		//Identifier
		public RuleCall getEmailAttributeUserIdentifierParserRuleCall_18_0() { return cEmailAttributeUserIdentifierParserRuleCall_18_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_19() { return cSEMICOLONTerminalRuleCall_19; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_20() { return cEOLINETerminalRuleCall_20; }
		
		//properties += (Properties)*
		public Assignment getPropertiesAssignment_21() { return cPropertiesAssignment_21; }
		
		//(Properties)
		public RuleCall getPropertiesPropertiesParserRuleCall_21_0() { return cPropertiesPropertiesParserRuleCall_21_0; }
		
		//mapping += (Mapping)*
		public Assignment getMappingAssignment_22() { return cMappingAssignment_22; }
		
		//(Mapping)
		public RuleCall getMappingMappingParserRuleCall_22_0() { return cMappingMappingParserRuleCall_22_0; }
		
		//structs += (PersonalizedStruct)*
		public Assignment getStructsAssignment_23() { return cStructsAssignment_23; }
		
		//(PersonalizedStruct)
		public RuleCall getStructsPersonalizedStructParserRuleCall_23_0() { return cStructsPersonalizedStructParserRuleCall_23_0; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_24() { return cCLOSEKEYTerminalRuleCall_24; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_25() { return cEOLINETerminalRuleCall_25; }
	}
	public class CompanyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Company");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompanyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNameCompanyKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		private final RuleCall cOPENKEYTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cEOLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cAddressKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAttributeAddressAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameAttributeAddressIdentifierParserRuleCall_6_0 = (RuleCall)cNameAttributeAddressAssignment_6.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Keyword cStringKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cNameAttributeCompanyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cNameAttributeCompanyIdentifierParserRuleCall_10_0 = (RuleCall)cNameAttributeCompanyAssignment_10.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final RuleCall cEOLINETerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final Keyword cStringKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cNameAttributeCityAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cNameAttributeCityIdentifierParserRuleCall_14_0 = (RuleCall)cNameAttributeCityAssignment_14.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_15 = (RuleCall)cGroup.eContents().get(15);
		private final RuleCall cEOLINETerminalRuleCall_16 = (RuleCall)cGroup.eContents().get(16);
		private final Keyword cStringKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cEmailAttributeCompanyAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cEmailAttributeCompanyIdentifierParserRuleCall_18_0 = (RuleCall)cEmailAttributeCompanyAssignment_18.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_19 = (RuleCall)cGroup.eContents().get(19);
		private final RuleCall cEOLINETerminalRuleCall_20 = (RuleCall)cGroup.eContents().get(20);
		private final Assignment cPropertiesAssignment_21 = (Assignment)cGroup.eContents().get(21);
		private final RuleCall cPropertiesPropertiesParserRuleCall_21_0 = (RuleCall)cPropertiesAssignment_21.eContents().get(0);
		private final Assignment cMappingAssignment_22 = (Assignment)cGroup.eContents().get(22);
		private final RuleCall cMappingMappingParserRuleCall_22_0 = (RuleCall)cMappingAssignment_22.eContents().get(0);
		private final Assignment cStructsAssignment_23 = (Assignment)cGroup.eContents().get(23);
		private final RuleCall cStructsPersonalizedStructParserRuleCall_23_0 = (RuleCall)cStructsAssignment_23.eContents().get(0);
		private final RuleCall cCLOSEKEYTerminalRuleCall_24 = (RuleCall)cGroup.eContents().get(24);
		private final RuleCall cEOLINETerminalRuleCall_25 = (RuleCall)cGroup.eContents().get(25);
		
		//Company:
		//    {Company} "struct" name = "Company" OPENKEY EOLINE?
		//         "address " nameAttributeAddress = Identifier  SEMICOLON EOLINE?
		//         "string" nameAttributeCompany = Identifier  SEMICOLON EOLINE?
		//         "string" nameAttributeCity = Identifier   SEMICOLON EOLINE?
		//         "string" emailAttributeCompany = Identifier  SEMICOLON EOLINE?
		//        properties += (Properties)*
		//         mapping += (Mapping)*
		//         structs += (PersonalizedStruct)*
		//    CLOSEKEY EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Company} "struct" name = "Company" OPENKEY EOLINE?
		//     "address " nameAttributeAddress = Identifier  SEMICOLON EOLINE?
		//     "string" nameAttributeCompany = Identifier  SEMICOLON EOLINE?
		//     "string" nameAttributeCity = Identifier   SEMICOLON EOLINE?
		//     "string" emailAttributeCompany = Identifier  SEMICOLON EOLINE?
		//    properties += (Properties)*
		//     mapping += (Mapping)*
		//     structs += (PersonalizedStruct)*
		//CLOSEKEY EOLINE?
		public Group getGroup() { return cGroup; }
		
		//{Company}
		public Action getCompanyAction_0() { return cCompanyAction_0; }
		
		//"struct"
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
		
		//name = "Company"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//"Company"
		public Keyword getNameCompanyKeyword_2_0() { return cNameCompanyKeyword_2_0; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_3() { return cOPENKEYTerminalRuleCall_3; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_4() { return cEOLINETerminalRuleCall_4; }
		
		//"address "
		public Keyword getAddressKeyword_5() { return cAddressKeyword_5; }
		
		//nameAttributeAddress = Identifier
		public Assignment getNameAttributeAddressAssignment_6() { return cNameAttributeAddressAssignment_6; }
		
		//Identifier
		public RuleCall getNameAttributeAddressIdentifierParserRuleCall_6_0() { return cNameAttributeAddressIdentifierParserRuleCall_6_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
		
		//"string"
		public Keyword getStringKeyword_9() { return cStringKeyword_9; }
		
		//nameAttributeCompany = Identifier
		public Assignment getNameAttributeCompanyAssignment_10() { return cNameAttributeCompanyAssignment_10; }
		
		//Identifier
		public RuleCall getNameAttributeCompanyIdentifierParserRuleCall_10_0() { return cNameAttributeCompanyIdentifierParserRuleCall_10_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_11() { return cSEMICOLONTerminalRuleCall_11; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_12() { return cEOLINETerminalRuleCall_12; }
		
		//"string"
		public Keyword getStringKeyword_13() { return cStringKeyword_13; }
		
		//nameAttributeCity = Identifier
		public Assignment getNameAttributeCityAssignment_14() { return cNameAttributeCityAssignment_14; }
		
		//Identifier
		public RuleCall getNameAttributeCityIdentifierParserRuleCall_14_0() { return cNameAttributeCityIdentifierParserRuleCall_14_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_15() { return cSEMICOLONTerminalRuleCall_15; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_16() { return cEOLINETerminalRuleCall_16; }
		
		//"string"
		public Keyword getStringKeyword_17() { return cStringKeyword_17; }
		
		//emailAttributeCompany = Identifier
		public Assignment getEmailAttributeCompanyAssignment_18() { return cEmailAttributeCompanyAssignment_18; }
		
		//Identifier
		public RuleCall getEmailAttributeCompanyIdentifierParserRuleCall_18_0() { return cEmailAttributeCompanyIdentifierParserRuleCall_18_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_19() { return cSEMICOLONTerminalRuleCall_19; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_20() { return cEOLINETerminalRuleCall_20; }
		
		//properties += (Properties)*
		public Assignment getPropertiesAssignment_21() { return cPropertiesAssignment_21; }
		
		//(Properties)
		public RuleCall getPropertiesPropertiesParserRuleCall_21_0() { return cPropertiesPropertiesParserRuleCall_21_0; }
		
		//mapping += (Mapping)*
		public Assignment getMappingAssignment_22() { return cMappingAssignment_22; }
		
		//(Mapping)
		public RuleCall getMappingMappingParserRuleCall_22_0() { return cMappingMappingParserRuleCall_22_0; }
		
		//structs += (PersonalizedStruct)*
		public Assignment getStructsAssignment_23() { return cStructsAssignment_23; }
		
		//(PersonalizedStruct)
		public RuleCall getStructsPersonalizedStructParserRuleCall_23_0() { return cStructsPersonalizedStructParserRuleCall_23_0; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_24() { return cCLOSEKEYTerminalRuleCall_24; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_25() { return cEOLINETerminalRuleCall_25; }
	}
	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameEnumeratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEnumeratorIdentifierParserRuleCall_1_0 = (RuleCall)cNameEnumeratorAssignment_1.eContents().get(0);
		private final RuleCall cOPENKEYTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cValuesIdentifierParserRuleCall_3_0_0 = (RuleCall)cValuesAssignment_3_0.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cCLOSEKEYTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEOLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Enum:
		//    "enum" nameEnumerator=Identifier OPENKEY (values += (Identifier) COMMA?)* CLOSEKEY EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"enum" nameEnumerator=Identifier OPENKEY (values += (Identifier) COMMA?)* CLOSEKEY EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//nameEnumerator=Identifier
		public Assignment getNameEnumeratorAssignment_1() { return cNameEnumeratorAssignment_1; }
		
		//Identifier
		public RuleCall getNameEnumeratorIdentifierParserRuleCall_1_0() { return cNameEnumeratorIdentifierParserRuleCall_1_0; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_2() { return cOPENKEYTerminalRuleCall_2; }
		
		//(values += (Identifier) COMMA?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//values += (Identifier)
		public Assignment getValuesAssignment_3_0() { return cValuesAssignment_3_0; }
		
		//(Identifier)
		public RuleCall getValuesIdentifierParserRuleCall_3_0_0() { return cValuesIdentifierParserRuleCall_3_0_0; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_3_1() { return cCOMMATerminalRuleCall_3_1; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_4() { return cCLOSEKEYTerminalRuleCall_4; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_5() { return cEOLINETerminalRuleCall_5; }
	}
	public class SingularTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.SingularType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeUintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeIntParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeAddressParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeDoubleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTypeBoolParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTypeBytesParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTypeStringParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//SingularType:
		//    TypeUint| TypeInt | TypeAddress | TypeDouble | TypeBool | TypeBytes |TypeString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeUint| TypeInt | TypeAddress | TypeDouble | TypeBool | TypeBytes |TypeString
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeUint
		public RuleCall getTypeUintParserRuleCall_0() { return cTypeUintParserRuleCall_0; }
		
		//TypeInt
		public RuleCall getTypeIntParserRuleCall_1() { return cTypeIntParserRuleCall_1; }
		
		//TypeAddress
		public RuleCall getTypeAddressParserRuleCall_2() { return cTypeAddressParserRuleCall_2; }
		
		//TypeDouble
		public RuleCall getTypeDoubleParserRuleCall_3() { return cTypeDoubleParserRuleCall_3; }
		
		//TypeBool
		public RuleCall getTypeBoolParserRuleCall_4() { return cTypeBoolParserRuleCall_4; }
		
		//TypeBytes
		public RuleCall getTypeBytesParserRuleCall_5() { return cTypeBytesParserRuleCall_5; }
		
		//TypeString
		public RuleCall getTypeStringParserRuleCall_6() { return cTypeStringParserRuleCall_6; }
	}
	public class TypeUintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TypeUint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cUintKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUint2Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cUint3Keyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cUint4Keyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUint5Keyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cUint6Keyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cUint8Keyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cUint10Keyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cUint12Keyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cUint14Keyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cUint15Keyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cUint16Keyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cUint18Keyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cUint20Keyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cUint22Keyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cUint24Keyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cUint25Keyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cUint28Keyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cUint30Keyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cUint32Keyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cUint34Keyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cUint35Keyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cUint36Keyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cUint38Keyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cUint40Keyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cUint48Keyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cUint56Keyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cUint64Keyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cUint80Keyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cUint88Keyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cUint96Keyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cUint104Keyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cUint112Keyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cUint114Keyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cUint120Keyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cUint128Keyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cUint160Keyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cUint200Keyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cUint256Keyword_38 = (Keyword)cAlternatives.eContents().get(38);
		
		//TypeUint:
		//    "uint"|"uint2"|"uint3"|"uint4"|"uint5"|"uint6"|"uint8"|"uint10"|"uint12"|"uint14"|"uint15"|"uint16"|"uint18"|"uint20"|"uint22"|"uint24"|"uint25"|"uint28"|"uint30"|"uint32"|"uint34"|"uint35"|"uint36"|"uint38"|"uint40"|"uint48"|"uint56"|"uint64"| "uint80"|"uint88"|"uint96"|"uint104"|"uint112"|"uint114"|"uint120"|"uint128" |"uint160"|"uint200"|"uint256"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"uint"|"uint2"|"uint3"|"uint4"|"uint5"|"uint6"|"uint8"|"uint10"|"uint12"|"uint14"|"uint15"|"uint16"|"uint18"|"uint20"|"uint22"|"uint24"|"uint25"|"uint28"|"uint30"|"uint32"|"uint34"|"uint35"|"uint36"|"uint38"|"uint40"|"uint48"|"uint56"|"uint64"| "uint80"|"uint88"|"uint96"|"uint104"|"uint112"|"uint114"|"uint120"|"uint128" |"uint160"|"uint200"|"uint256"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"uint"
		public Keyword getUintKeyword_0() { return cUintKeyword_0; }
		
		//"uint2"
		public Keyword getUint2Keyword_1() { return cUint2Keyword_1; }
		
		//"uint3"
		public Keyword getUint3Keyword_2() { return cUint3Keyword_2; }
		
		//"uint4"
		public Keyword getUint4Keyword_3() { return cUint4Keyword_3; }
		
		//"uint5"
		public Keyword getUint5Keyword_4() { return cUint5Keyword_4; }
		
		//"uint6"
		public Keyword getUint6Keyword_5() { return cUint6Keyword_5; }
		
		//"uint8"
		public Keyword getUint8Keyword_6() { return cUint8Keyword_6; }
		
		//"uint10"
		public Keyword getUint10Keyword_7() { return cUint10Keyword_7; }
		
		//"uint12"
		public Keyword getUint12Keyword_8() { return cUint12Keyword_8; }
		
		//"uint14"
		public Keyword getUint14Keyword_9() { return cUint14Keyword_9; }
		
		//"uint15"
		public Keyword getUint15Keyword_10() { return cUint15Keyword_10; }
		
		//"uint16"
		public Keyword getUint16Keyword_11() { return cUint16Keyword_11; }
		
		//"uint18"
		public Keyword getUint18Keyword_12() { return cUint18Keyword_12; }
		
		//"uint20"
		public Keyword getUint20Keyword_13() { return cUint20Keyword_13; }
		
		//"uint22"
		public Keyword getUint22Keyword_14() { return cUint22Keyword_14; }
		
		//"uint24"
		public Keyword getUint24Keyword_15() { return cUint24Keyword_15; }
		
		//"uint25"
		public Keyword getUint25Keyword_16() { return cUint25Keyword_16; }
		
		//"uint28"
		public Keyword getUint28Keyword_17() { return cUint28Keyword_17; }
		
		//"uint30"
		public Keyword getUint30Keyword_18() { return cUint30Keyword_18; }
		
		//"uint32"
		public Keyword getUint32Keyword_19() { return cUint32Keyword_19; }
		
		//"uint34"
		public Keyword getUint34Keyword_20() { return cUint34Keyword_20; }
		
		//"uint35"
		public Keyword getUint35Keyword_21() { return cUint35Keyword_21; }
		
		//"uint36"
		public Keyword getUint36Keyword_22() { return cUint36Keyword_22; }
		
		//"uint38"
		public Keyword getUint38Keyword_23() { return cUint38Keyword_23; }
		
		//"uint40"
		public Keyword getUint40Keyword_24() { return cUint40Keyword_24; }
		
		//"uint48"
		public Keyword getUint48Keyword_25() { return cUint48Keyword_25; }
		
		//"uint56"
		public Keyword getUint56Keyword_26() { return cUint56Keyword_26; }
		
		//"uint64"
		public Keyword getUint64Keyword_27() { return cUint64Keyword_27; }
		
		//"uint80"
		public Keyword getUint80Keyword_28() { return cUint80Keyword_28; }
		
		//"uint88"
		public Keyword getUint88Keyword_29() { return cUint88Keyword_29; }
		
		//"uint96"
		public Keyword getUint96Keyword_30() { return cUint96Keyword_30; }
		
		//"uint104"
		public Keyword getUint104Keyword_31() { return cUint104Keyword_31; }
		
		//"uint112"
		public Keyword getUint112Keyword_32() { return cUint112Keyword_32; }
		
		//"uint114"
		public Keyword getUint114Keyword_33() { return cUint114Keyword_33; }
		
		//"uint120"
		public Keyword getUint120Keyword_34() { return cUint120Keyword_34; }
		
		//"uint128"
		public Keyword getUint128Keyword_35() { return cUint128Keyword_35; }
		
		//"uint160"
		public Keyword getUint160Keyword_36() { return cUint160Keyword_36; }
		
		//"uint200"
		public Keyword getUint200Keyword_37() { return cUint200Keyword_37; }
		
		//"uint256"
		public Keyword getUint256Keyword_38() { return cUint256Keyword_38; }
	}
	public class TypeAddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TypeAddress");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAddressKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAddressPayableKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//TypeAddress:
		//    "address " | "address payable"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"address " | "address payable"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"address "
		public Keyword getAddressKeyword_0() { return cAddressKeyword_0; }
		
		//"address payable"
		public Keyword getAddressPayableKeyword_1() { return cAddressPayableKeyword_1; }
	}
	public class TypeDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TypeDouble");
		private final Keyword cDoubleKeyword = (Keyword)rule.eContents().get(1);
		
		//TypeDouble:
		//    "double"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"double"
		public Keyword getDoubleKeyword() { return cDoubleKeyword; }
	}
	public class TypeBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TypeBool");
		private final Keyword cBoolKeyword = (Keyword)rule.eContents().get(1);
		
		//TypeBool:
		//    "bool"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"bool"
		public Keyword getBoolKeyword() { return cBoolKeyword; }
	}
	public class TypeIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TypeInt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInt2Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInt3Keyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInt4Keyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cInt5Keyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cInt6Keyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cInt8Keyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cInt10Keyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cInt12Keyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cInt14Keyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cInt15Keyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cInt16Keyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cInt18Keyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cInt20Keyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cInt22Keyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cInt24Keyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cInt28Keyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cInt30Keyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cInt32Keyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cInt34Keyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cInt35Keyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cInt36Keyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cInt38Keyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cInt40Keyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cInt48Keyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cInt56Keyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cInt64Keyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cInt80Keyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cInt88Keyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cInt96Keyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cInt104Keyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cInt128Keyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cInt160Keyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cInt200Keyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cInt256Keyword_34 = (Keyword)cAlternatives.eContents().get(34);
		
		//TypeInt:
		//    "int" |"int2"|"int3"|"int4"|"int5"|"int6"|"int8"|"int10"|"int12"|"int14"|"int15"|"int16"|"int18"|"int20"|"int22"|"int24"|"int28"|"int30"|"int32"|"int34"|"int35"|"int36"|"int38"|"int40"|"int48"|"int56"|"int64"|"int80"|"int88"|"int96"|"int104"|"int128"|"int160"|"int200"|"int256"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"int" |"int2"|"int3"|"int4"|"int5"|"int6"|"int8"|"int10"|"int12"|"int14"|"int15"|"int16"|"int18"|"int20"|"int22"|"int24"|"int28"|"int30"|"int32"|"int34"|"int35"|"int36"|"int38"|"int40"|"int48"|"int56"|"int64"|"int80"|"int88"|"int96"|"int104"|"int128"|"int160"|"int200"|"int256"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//"int2"
		public Keyword getInt2Keyword_1() { return cInt2Keyword_1; }
		
		//"int3"
		public Keyword getInt3Keyword_2() { return cInt3Keyword_2; }
		
		//"int4"
		public Keyword getInt4Keyword_3() { return cInt4Keyword_3; }
		
		//"int5"
		public Keyword getInt5Keyword_4() { return cInt5Keyword_4; }
		
		//"int6"
		public Keyword getInt6Keyword_5() { return cInt6Keyword_5; }
		
		//"int8"
		public Keyword getInt8Keyword_6() { return cInt8Keyword_6; }
		
		//"int10"
		public Keyword getInt10Keyword_7() { return cInt10Keyword_7; }
		
		//"int12"
		public Keyword getInt12Keyword_8() { return cInt12Keyword_8; }
		
		//"int14"
		public Keyword getInt14Keyword_9() { return cInt14Keyword_9; }
		
		//"int15"
		public Keyword getInt15Keyword_10() { return cInt15Keyword_10; }
		
		//"int16"
		public Keyword getInt16Keyword_11() { return cInt16Keyword_11; }
		
		//"int18"
		public Keyword getInt18Keyword_12() { return cInt18Keyword_12; }
		
		//"int20"
		public Keyword getInt20Keyword_13() { return cInt20Keyword_13; }
		
		//"int22"
		public Keyword getInt22Keyword_14() { return cInt22Keyword_14; }
		
		//"int24"
		public Keyword getInt24Keyword_15() { return cInt24Keyword_15; }
		
		//"int28"
		public Keyword getInt28Keyword_16() { return cInt28Keyword_16; }
		
		//"int30"
		public Keyword getInt30Keyword_17() { return cInt30Keyword_17; }
		
		//"int32"
		public Keyword getInt32Keyword_18() { return cInt32Keyword_18; }
		
		//"int34"
		public Keyword getInt34Keyword_19() { return cInt34Keyword_19; }
		
		//"int35"
		public Keyword getInt35Keyword_20() { return cInt35Keyword_20; }
		
		//"int36"
		public Keyword getInt36Keyword_21() { return cInt36Keyword_21; }
		
		//"int38"
		public Keyword getInt38Keyword_22() { return cInt38Keyword_22; }
		
		//"int40"
		public Keyword getInt40Keyword_23() { return cInt40Keyword_23; }
		
		//"int48"
		public Keyword getInt48Keyword_24() { return cInt48Keyword_24; }
		
		//"int56"
		public Keyword getInt56Keyword_25() { return cInt56Keyword_25; }
		
		//"int64"
		public Keyword getInt64Keyword_26() { return cInt64Keyword_26; }
		
		//"int80"
		public Keyword getInt80Keyword_27() { return cInt80Keyword_27; }
		
		//"int88"
		public Keyword getInt88Keyword_28() { return cInt88Keyword_28; }
		
		//"int96"
		public Keyword getInt96Keyword_29() { return cInt96Keyword_29; }
		
		//"int104"
		public Keyword getInt104Keyword_30() { return cInt104Keyword_30; }
		
		//"int128"
		public Keyword getInt128Keyword_31() { return cInt128Keyword_31; }
		
		//"int160"
		public Keyword getInt160Keyword_32() { return cInt160Keyword_32; }
		
		//"int200"
		public Keyword getInt200Keyword_33() { return cInt200Keyword_33; }
		
		//"int256"
		public Keyword getInt256Keyword_34() { return cInt256Keyword_34; }
	}
	public class TypeBytesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TypeBytes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBytesKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBytes2Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBytes3Keyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBytes4Keyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBytes5Keyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBytes6Keyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cBytes7Keyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cBytes8Keyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cBytes10Keyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cBytes12Keyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cBytes14Keyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cBytes16Keyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cBytes18Keyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cBytes20Keyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cBytes22Keyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cBytes24Keyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cBytes25Keyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cBytes26Keyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cBytes28Keyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cBytes30Keyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cBytes32Keyword_20 = (Keyword)cAlternatives.eContents().get(20);
		
		//TypeBytes:
		//    "bytes"|"bytes2"|"bytes3"|"bytes4"|"bytes5"|"bytes6"|"bytes7"|"bytes8"|"bytes10"|"bytes12"|"bytes14"|"bytes16"|"bytes18"|"bytes20"|"bytes22"|"bytes24"|"bytes25"|"bytes26"|"bytes28"|"bytes30"|"bytes32"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"bytes"|"bytes2"|"bytes3"|"bytes4"|"bytes5"|"bytes6"|"bytes7"|"bytes8"|"bytes10"|"bytes12"|"bytes14"|"bytes16"|"bytes18"|"bytes20"|"bytes22"|"bytes24"|"bytes25"|"bytes26"|"bytes28"|"bytes30"|"bytes32"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"bytes"
		public Keyword getBytesKeyword_0() { return cBytesKeyword_0; }
		
		//"bytes2"
		public Keyword getBytes2Keyword_1() { return cBytes2Keyword_1; }
		
		//"bytes3"
		public Keyword getBytes3Keyword_2() { return cBytes3Keyword_2; }
		
		//"bytes4"
		public Keyword getBytes4Keyword_3() { return cBytes4Keyword_3; }
		
		//"bytes5"
		public Keyword getBytes5Keyword_4() { return cBytes5Keyword_4; }
		
		//"bytes6"
		public Keyword getBytes6Keyword_5() { return cBytes6Keyword_5; }
		
		//"bytes7"
		public Keyword getBytes7Keyword_6() { return cBytes7Keyword_6; }
		
		//"bytes8"
		public Keyword getBytes8Keyword_7() { return cBytes8Keyword_7; }
		
		//"bytes10"
		public Keyword getBytes10Keyword_8() { return cBytes10Keyword_8; }
		
		//"bytes12"
		public Keyword getBytes12Keyword_9() { return cBytes12Keyword_9; }
		
		//"bytes14"
		public Keyword getBytes14Keyword_10() { return cBytes14Keyword_10; }
		
		//"bytes16"
		public Keyword getBytes16Keyword_11() { return cBytes16Keyword_11; }
		
		//"bytes18"
		public Keyword getBytes18Keyword_12() { return cBytes18Keyword_12; }
		
		//"bytes20"
		public Keyword getBytes20Keyword_13() { return cBytes20Keyword_13; }
		
		//"bytes22"
		public Keyword getBytes22Keyword_14() { return cBytes22Keyword_14; }
		
		//"bytes24"
		public Keyword getBytes24Keyword_15() { return cBytes24Keyword_15; }
		
		//"bytes25"
		public Keyword getBytes25Keyword_16() { return cBytes25Keyword_16; }
		
		//"bytes26"
		public Keyword getBytes26Keyword_17() { return cBytes26Keyword_17; }
		
		//"bytes28"
		public Keyword getBytes28Keyword_18() { return cBytes28Keyword_18; }
		
		//"bytes30"
		public Keyword getBytes30Keyword_19() { return cBytes30Keyword_19; }
		
		//"bytes32"
		public Keyword getBytes32Keyword_20() { return cBytes32Keyword_20; }
	}
	public class TypeStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TypeString");
		private final Keyword cStringKeyword = (Keyword)rule.eContents().get(1);
		
		//TypeString:
		//    "string"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"string"
		public Keyword getStringKeyword() { return cStringKeyword; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCHARTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Identifier returns ecore::EString:
		//    (ID|CHAR)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID|CHAR)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//CHAR
		public RuleCall getCHARTerminalRuleCall_1() { return cCHARTerminalRuleCall_1; }
	}
	public class OverrideModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.OverrideModifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOverrideModifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOverrideKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cInputparamsOverrideAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInputparamsOverrideInputParamParserRuleCall_2_1_0 = (RuleCall)cInputparamsOverrideAssignment_2_1.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//OverrideModifier:
		//  {OverrideModifier} "override" (OPENPARENTHESIS inputparamsOverride += InputParam* CLOSEPARENTHESIS)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{OverrideModifier} "override" (OPENPARENTHESIS inputparamsOverride += InputParam* CLOSEPARENTHESIS)
		public Group getGroup() { return cGroup; }
		
		//{OverrideModifier}
		public Action getOverrideModifierAction_0() { return cOverrideModifierAction_0; }
		
		//"override"
		public Keyword getOverrideKeyword_1() { return cOverrideKeyword_1; }
		
		//(OPENPARENTHESIS inputparamsOverride += InputParam* CLOSEPARENTHESIS)
		public Group getGroup_2() { return cGroup_2; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_2_0() { return cOPENPARENTHESISTerminalRuleCall_2_0; }
		
		//inputparamsOverride += InputParam*
		public Assignment getInputparamsOverrideAssignment_2_1() { return cInputparamsOverrideAssignment_2_1; }
		
		//InputParam
		public RuleCall getInputparamsOverrideInputParamParserRuleCall_2_1_0() { return cInputparamsOverrideInputParamParserRuleCall_2_1_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_2_2() { return cCLOSEPARENTHESISTerminalRuleCall_2_2; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//Array:
		//    (("[]" | '[' (INT) ']')( "[]" | '[' (INT)  ']')*)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(("[]" | '[' (INT) ']')( "[]" | '[' (INT)  ']')*)
		public Group getGroup() { return cGroup; }
		
		//("[]" | '[' (INT) ']')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_0_0() { return cLeftSquareBracketRightSquareBracketKeyword_0_0; }
		
		//'[' (INT) ']'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1_0() { return cLeftSquareBracketKeyword_0_1_0; }
		
		//(INT)
		public RuleCall getINTTerminalRuleCall_0_1_1() { return cINTTerminalRuleCall_0_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1_2() { return cRightSquareBracketKeyword_0_1_2; }
		
		//( "[]" | '[' (INT)  ']')*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_0() { return cLeftSquareBracketRightSquareBracketKeyword_1_0; }
		
		//'[' (INT)  ']'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }
		
		//(INT)
		public RuleCall getINTTerminalRuleCall_1_1_1() { return cINTTerminalRuleCall_1_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_2() { return cRightSquareBracketKeyword_1_1_2; }
	}
	public class PropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Properties");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyBooleanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPropertyIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPropertyUIntegerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPropertyFloatParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPropertyAddressParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPropertyBytesParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPropertyIdentifierParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPropertyUserParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cPropertyCompanyParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Properties:
		//    PropertyString|PropertyBoolean|PropertyInteger|PropertyUInteger|PropertyFloat|PropertyAddress|PropertyBytes|PropertyIdentifier|PropertyUser|PropertyCompany
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PropertyString|PropertyBoolean|PropertyInteger|PropertyUInteger|PropertyFloat|PropertyAddress|PropertyBytes|PropertyIdentifier|PropertyUser|PropertyCompany
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PropertyString
		public RuleCall getPropertyStringParserRuleCall_0() { return cPropertyStringParserRuleCall_0; }
		
		//PropertyBoolean
		public RuleCall getPropertyBooleanParserRuleCall_1() { return cPropertyBooleanParserRuleCall_1; }
		
		//PropertyInteger
		public RuleCall getPropertyIntegerParserRuleCall_2() { return cPropertyIntegerParserRuleCall_2; }
		
		//PropertyUInteger
		public RuleCall getPropertyUIntegerParserRuleCall_3() { return cPropertyUIntegerParserRuleCall_3; }
		
		//PropertyFloat
		public RuleCall getPropertyFloatParserRuleCall_4() { return cPropertyFloatParserRuleCall_4; }
		
		//PropertyAddress
		public RuleCall getPropertyAddressParserRuleCall_5() { return cPropertyAddressParserRuleCall_5; }
		
		//PropertyBytes
		public RuleCall getPropertyBytesParserRuleCall_6() { return cPropertyBytesParserRuleCall_6; }
		
		//PropertyIdentifier
		public RuleCall getPropertyIdentifierParserRuleCall_7() { return cPropertyIdentifierParserRuleCall_7; }
		
		//PropertyUser
		public RuleCall getPropertyUserParserRuleCall_8() { return cPropertyUserParserRuleCall_8; }
		
		//PropertyCompany
		public RuleCall getPropertyCompanyParserRuleCall_9() { return cPropertyCompanyParserRuleCall_9; }
	}
	public class PropertyStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.PropertyString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeStringParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantCONSTANTTerminalRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		private final Assignment cVisibilityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_3_0 = (RuleCall)cVisibilityAssignment_3.eContents().get(0);
		private final Assignment cStorageDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStorageDataStorageDataEnumRuleCall_4_0 = (RuleCall)cStorageDataAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIdentifierParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInicializationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cInicializationAlternatives_6_1_0 = (Alternatives)cInicializationAssignment_6_1.eContents().get(0);
		private final RuleCall cInicializationSyntaxExpressionParserRuleCall_6_1_0_0 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(0);
		private final RuleCall cInicializationIdentifierParserRuleCall_6_1_0_1 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(1);
		private final RuleCall cInicializationIdentifierDotExpressionParserRuleCall_6_1_0_2 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(2);
		private final RuleCall cInicializationBracketExpressionParserRuleCall_6_1_0_3 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(3);
		private final RuleCall cInicializationCallFunctionExpressionParserRuleCall_6_1_0_4 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(4);
		private final RuleCall cInicializationCreateStringObjectExpressionParserRuleCall_6_1_0_5 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(5);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//PropertyString:
		//    type = TypeString array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? name = Identifier ('=' inicialization = (SyntaxExpression|Identifier|IdentifierDotExpression|BracketExpression|CallFunctionExpression|CreateStringObjectExpression))? SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = TypeString array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? name = Identifier ('=' inicialization = (SyntaxExpression|Identifier|IdentifierDotExpression|BracketExpression|CallFunctionExpression|CreateStringObjectExpression))? SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//type = TypeString
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TypeString
		public RuleCall getTypeTypeStringParserRuleCall_0_0() { return cTypeTypeStringParserRuleCall_0_0; }
		
		//array=Array?
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0() { return cArrayArrayParserRuleCall_1_0; }
		
		//constant=CONSTANT?
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//CONSTANT
		public RuleCall getConstantCONSTANTTerminalRuleCall_2_0() { return cConstantCONSTANTTerminalRuleCall_2_0; }
		
		//visibility = Visibility?
		public Assignment getVisibilityAssignment_3() { return cVisibilityAssignment_3; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_3_0() { return cVisibilityVisibilityEnumRuleCall_3_0; }
		
		//(storageData = StorageData)?
		public Assignment getStorageDataAssignment_4() { return cStorageDataAssignment_4; }
		
		//StorageData
		public RuleCall getStorageDataStorageDataEnumRuleCall_4_0() { return cStorageDataStorageDataEnumRuleCall_4_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_5_0() { return cNameIdentifierParserRuleCall_5_0; }
		
		//('=' inicialization = (SyntaxExpression|Identifier|IdentifierDotExpression|BracketExpression|CallFunctionExpression|CreateStringObjectExpression))?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//inicialization = (SyntaxExpression|Identifier|IdentifierDotExpression|BracketExpression|CallFunctionExpression|CreateStringObjectExpression)
		public Assignment getInicializationAssignment_6_1() { return cInicializationAssignment_6_1; }
		
		//(SyntaxExpression|Identifier|IdentifierDotExpression|BracketExpression|CallFunctionExpression|CreateStringObjectExpression)
		public Alternatives getInicializationAlternatives_6_1_0() { return cInicializationAlternatives_6_1_0; }
		
		//SyntaxExpression
		public RuleCall getInicializationSyntaxExpressionParserRuleCall_6_1_0_0() { return cInicializationSyntaxExpressionParserRuleCall_6_1_0_0; }
		
		//Identifier
		public RuleCall getInicializationIdentifierParserRuleCall_6_1_0_1() { return cInicializationIdentifierParserRuleCall_6_1_0_1; }
		
		//IdentifierDotExpression
		public RuleCall getInicializationIdentifierDotExpressionParserRuleCall_6_1_0_2() { return cInicializationIdentifierDotExpressionParserRuleCall_6_1_0_2; }
		
		//BracketExpression
		public RuleCall getInicializationBracketExpressionParserRuleCall_6_1_0_3() { return cInicializationBracketExpressionParserRuleCall_6_1_0_3; }
		
		//CallFunctionExpression
		public RuleCall getInicializationCallFunctionExpressionParserRuleCall_6_1_0_4() { return cInicializationCallFunctionExpressionParserRuleCall_6_1_0_4; }
		
		//CreateStringObjectExpression
		public RuleCall getInicializationCreateStringObjectExpressionParserRuleCall_6_1_0_5() { return cInicializationCreateStringObjectExpressionParserRuleCall_6_1_0_5; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
	}
	public class PropertyIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.PropertyInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeIntParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantCONSTANTTerminalRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		private final Assignment cVisibilityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_3_0 = (RuleCall)cVisibilityAssignment_3.eContents().get(0);
		private final Assignment cStorageDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStorageDataStorageDataEnumRuleCall_4_0 = (RuleCall)cStorageDataAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIdentifierParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInicializationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cInicializationAlternatives_6_1_0 = (Alternatives)cInicializationAssignment_6_1.eContents().get(0);
		private final RuleCall cInicializationNumberExpressionParserRuleCall_6_1_0_0 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(0);
		private final RuleCall cInicializationIdentifierParserRuleCall_6_1_0_1 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(1);
		private final RuleCall cInicializationIdentifierDotExpressionParserRuleCall_6_1_0_2 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(2);
		private final RuleCall cInicializationArithmeticalExpressionParserRuleCall_6_1_0_3 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(3);
		private final Keyword cInicializationNowKeyword_6_1_0_4 = (Keyword)cInicializationAlternatives_6_1_0.eContents().get(4);
		private final RuleCall cInicializationBracketExpressionParserRuleCall_6_1_0_5 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(5);
		private final RuleCall cInicializationTypeCastingExpressionParserRuleCall_6_1_0_6 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(6);
		private final RuleCall cInicializationCallFunctionExpressionParserRuleCall_6_1_0_7 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(7);
		private final RuleCall cInicializationCreateIntObjectExpressionParserRuleCall_6_1_0_8 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(8);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//PropertyInteger:
		//    type = TypeInt array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? name = Identifier ('=' inicialization =  (NumberExpression|Identifier|IdentifierDotExpression|ArithmeticalExpression|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression|CreateIntObjectExpression))? SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = TypeInt array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? name = Identifier ('=' inicialization =  (NumberExpression|Identifier|IdentifierDotExpression|ArithmeticalExpression|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression|CreateIntObjectExpression))? SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//type = TypeInt
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TypeInt
		public RuleCall getTypeTypeIntParserRuleCall_0_0() { return cTypeTypeIntParserRuleCall_0_0; }
		
		//array=Array?
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0() { return cArrayArrayParserRuleCall_1_0; }
		
		//constant=CONSTANT?
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//CONSTANT
		public RuleCall getConstantCONSTANTTerminalRuleCall_2_0() { return cConstantCONSTANTTerminalRuleCall_2_0; }
		
		//visibility = Visibility?
		public Assignment getVisibilityAssignment_3() { return cVisibilityAssignment_3; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_3_0() { return cVisibilityVisibilityEnumRuleCall_3_0; }
		
		//(storageData = StorageData)?
		public Assignment getStorageDataAssignment_4() { return cStorageDataAssignment_4; }
		
		//StorageData
		public RuleCall getStorageDataStorageDataEnumRuleCall_4_0() { return cStorageDataStorageDataEnumRuleCall_4_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_5_0() { return cNameIdentifierParserRuleCall_5_0; }
		
		//('=' inicialization =  (NumberExpression|Identifier|IdentifierDotExpression|ArithmeticalExpression|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression|CreateIntObjectExpression))?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//inicialization =  (NumberExpression|Identifier|IdentifierDotExpression|ArithmeticalExpression|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression|CreateIntObjectExpression)
		public Assignment getInicializationAssignment_6_1() { return cInicializationAssignment_6_1; }
		
		//(NumberExpression|Identifier|IdentifierDotExpression|ArithmeticalExpression|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression|CreateIntObjectExpression)
		public Alternatives getInicializationAlternatives_6_1_0() { return cInicializationAlternatives_6_1_0; }
		
		//NumberExpression
		public RuleCall getInicializationNumberExpressionParserRuleCall_6_1_0_0() { return cInicializationNumberExpressionParserRuleCall_6_1_0_0; }
		
		//Identifier
		public RuleCall getInicializationIdentifierParserRuleCall_6_1_0_1() { return cInicializationIdentifierParserRuleCall_6_1_0_1; }
		
		//IdentifierDotExpression
		public RuleCall getInicializationIdentifierDotExpressionParserRuleCall_6_1_0_2() { return cInicializationIdentifierDotExpressionParserRuleCall_6_1_0_2; }
		
		//ArithmeticalExpression
		public RuleCall getInicializationArithmeticalExpressionParserRuleCall_6_1_0_3() { return cInicializationArithmeticalExpressionParserRuleCall_6_1_0_3; }
		
		//"now"
		public Keyword getInicializationNowKeyword_6_1_0_4() { return cInicializationNowKeyword_6_1_0_4; }
		
		//BracketExpression
		public RuleCall getInicializationBracketExpressionParserRuleCall_6_1_0_5() { return cInicializationBracketExpressionParserRuleCall_6_1_0_5; }
		
		//TypeCastingExpression
		public RuleCall getInicializationTypeCastingExpressionParserRuleCall_6_1_0_6() { return cInicializationTypeCastingExpressionParserRuleCall_6_1_0_6; }
		
		//CallFunctionExpression
		public RuleCall getInicializationCallFunctionExpressionParserRuleCall_6_1_0_7() { return cInicializationCallFunctionExpressionParserRuleCall_6_1_0_7; }
		
		//CreateIntObjectExpression
		public RuleCall getInicializationCreateIntObjectExpressionParserRuleCall_6_1_0_8() { return cInicializationCreateIntObjectExpressionParserRuleCall_6_1_0_8; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
	}
	public class PropertyFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.PropertyFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeFloatKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantCONSTANTTerminalRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		private final Assignment cVisibilityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_3_0 = (RuleCall)cVisibilityAssignment_3.eContents().get(0);
		private final Assignment cStorageDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStorageDataStorageDataEnumRuleCall_4_0 = (RuleCall)cStorageDataAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIdentifierParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInicializationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cInicializationAlternatives_6_1_0 = (Alternatives)cInicializationAssignment_6_1.eContents().get(0);
		private final RuleCall cInicializationNumberExpressionParserRuleCall_6_1_0_0 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(0);
		private final RuleCall cInicializationIdentifierParserRuleCall_6_1_0_1 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(1);
		private final RuleCall cInicializationIdentifierDotExpressionParserRuleCall_6_1_0_2 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(2);
		private final RuleCall cInicializationArithmeticalExpressionParserRuleCall_6_1_0_3 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(3);
		private final Keyword cInicializationNowKeyword_6_1_0_4 = (Keyword)cInicializationAlternatives_6_1_0.eContents().get(4);
		private final RuleCall cInicializationBracketExpressionParserRuleCall_6_1_0_5 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(5);
		private final RuleCall cInicializationTypeCastingExpressionParserRuleCall_6_1_0_6 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(6);
		private final RuleCall cInicializationCallFunctionExpressionParserRuleCall_6_1_0_7 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(7);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//PropertyFloat:
		//    type = "float" array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? name = Identifier  ('=' inicialization =  (NumberExpression|Identifier|IdentifierDotExpression|ArithmeticalExpression|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression))? SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = "float" array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? name = Identifier  ('=' inicialization =  (NumberExpression|Identifier|IdentifierDotExpression|ArithmeticalExpression|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression))? SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//type = "float"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//"float"
		public Keyword getTypeFloatKeyword_0_0() { return cTypeFloatKeyword_0_0; }
		
		//array=Array?
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0() { return cArrayArrayParserRuleCall_1_0; }
		
		//constant=CONSTANT?
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//CONSTANT
		public RuleCall getConstantCONSTANTTerminalRuleCall_2_0() { return cConstantCONSTANTTerminalRuleCall_2_0; }
		
		//visibility = Visibility?
		public Assignment getVisibilityAssignment_3() { return cVisibilityAssignment_3; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_3_0() { return cVisibilityVisibilityEnumRuleCall_3_0; }
		
		//(storageData = StorageData)?
		public Assignment getStorageDataAssignment_4() { return cStorageDataAssignment_4; }
		
		//StorageData
		public RuleCall getStorageDataStorageDataEnumRuleCall_4_0() { return cStorageDataStorageDataEnumRuleCall_4_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_5_0() { return cNameIdentifierParserRuleCall_5_0; }
		
		//('=' inicialization =  (NumberExpression|Identifier|IdentifierDotExpression|ArithmeticalExpression|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression))?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//inicialization =  (NumberExpression|Identifier|IdentifierDotExpression|ArithmeticalExpression|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression)
		public Assignment getInicializationAssignment_6_1() { return cInicializationAssignment_6_1; }
		
		//(NumberExpression|Identifier|IdentifierDotExpression|ArithmeticalExpression|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression)
		public Alternatives getInicializationAlternatives_6_1_0() { return cInicializationAlternatives_6_1_0; }
		
		//NumberExpression
		public RuleCall getInicializationNumberExpressionParserRuleCall_6_1_0_0() { return cInicializationNumberExpressionParserRuleCall_6_1_0_0; }
		
		//Identifier
		public RuleCall getInicializationIdentifierParserRuleCall_6_1_0_1() { return cInicializationIdentifierParserRuleCall_6_1_0_1; }
		
		//IdentifierDotExpression
		public RuleCall getInicializationIdentifierDotExpressionParserRuleCall_6_1_0_2() { return cInicializationIdentifierDotExpressionParserRuleCall_6_1_0_2; }
		
		//ArithmeticalExpression
		public RuleCall getInicializationArithmeticalExpressionParserRuleCall_6_1_0_3() { return cInicializationArithmeticalExpressionParserRuleCall_6_1_0_3; }
		
		//"now"
		public Keyword getInicializationNowKeyword_6_1_0_4() { return cInicializationNowKeyword_6_1_0_4; }
		
		//BracketExpression
		public RuleCall getInicializationBracketExpressionParserRuleCall_6_1_0_5() { return cInicializationBracketExpressionParserRuleCall_6_1_0_5; }
		
		//TypeCastingExpression
		public RuleCall getInicializationTypeCastingExpressionParserRuleCall_6_1_0_6() { return cInicializationTypeCastingExpressionParserRuleCall_6_1_0_6; }
		
		//CallFunctionExpression
		public RuleCall getInicializationCallFunctionExpressionParserRuleCall_6_1_0_7() { return cInicializationCallFunctionExpressionParserRuleCall_6_1_0_7; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
	}
	public class PropertyUIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.PropertyUInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeUintParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantCONSTANTTerminalRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		private final Assignment cVisibilityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_3_0 = (RuleCall)cVisibilityAssignment_3.eContents().get(0);
		private final Assignment cStorageDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStorageDataStorageDataEnumRuleCall_4_0 = (RuleCall)cStorageDataAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIdentifierParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInicializationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cInicializationAlternatives_6_1_0 = (Alternatives)cInicializationAssignment_6_1.eContents().get(0);
		private final RuleCall cInicializationNumberExpressionParserRuleCall_6_1_0_0 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(0);
		private final RuleCall cInicializationIdentifierParserRuleCall_6_1_0_1 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(1);
		private final RuleCall cInicializationIdentifierValueExpressionParserRuleCall_6_1_0_2 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(2);
		private final RuleCall cInicializationArithmeticalExpressionParserRuleCall_6_1_0_3 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(3);
		private final Keyword cInicializationNowKeyword_6_1_0_4 = (Keyword)cInicializationAlternatives_6_1_0.eContents().get(4);
		private final RuleCall cInicializationBracketExpressionParserRuleCall_6_1_0_5 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(5);
		private final RuleCall cInicializationBCKTIMESTAMPTerminalRuleCall_6_1_0_6 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(6);
		private final RuleCall cInicializationTypeCastingExpressionParserRuleCall_6_1_0_7 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(7);
		private final RuleCall cInicializationCallFunctionExpressionParserRuleCall_6_1_0_8 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(8);
		private final RuleCall cInicializationCreateUintObjectExpressionParserRuleCall_6_1_0_9 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(9);
		private final RuleCall cInicializationArrayExpressionParserRuleCall_6_1_0_10 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(10);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//PropertyUInteger:
		//    type = TypeUint array=Array? constant=CONSTANT? visibility = Visibility?  (storageData = StorageData)? name = Identifier  ('=' inicialization =  (NumberExpression|Identifier|IdentifierValueExpression|ArithmeticalExpression|"now"|BracketExpression|BCKTIMESTAMP|TypeCastingExpression|CallFunctionExpression|CreateUintObjectExpression|ArrayExpression))? SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = TypeUint array=Array? constant=CONSTANT? visibility = Visibility?  (storageData = StorageData)? name = Identifier  ('=' inicialization =  (NumberExpression|Identifier|IdentifierValueExpression|ArithmeticalExpression|"now"|BracketExpression|BCKTIMESTAMP|TypeCastingExpression|CallFunctionExpression|CreateUintObjectExpression|ArrayExpression))? SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//type = TypeUint
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TypeUint
		public RuleCall getTypeTypeUintParserRuleCall_0_0() { return cTypeTypeUintParserRuleCall_0_0; }
		
		//array=Array?
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0() { return cArrayArrayParserRuleCall_1_0; }
		
		//constant=CONSTANT?
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//CONSTANT
		public RuleCall getConstantCONSTANTTerminalRuleCall_2_0() { return cConstantCONSTANTTerminalRuleCall_2_0; }
		
		//visibility = Visibility?
		public Assignment getVisibilityAssignment_3() { return cVisibilityAssignment_3; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_3_0() { return cVisibilityVisibilityEnumRuleCall_3_0; }
		
		//(storageData = StorageData)?
		public Assignment getStorageDataAssignment_4() { return cStorageDataAssignment_4; }
		
		//StorageData
		public RuleCall getStorageDataStorageDataEnumRuleCall_4_0() { return cStorageDataStorageDataEnumRuleCall_4_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_5_0() { return cNameIdentifierParserRuleCall_5_0; }
		
		//('=' inicialization =  (NumberExpression|Identifier|IdentifierValueExpression|ArithmeticalExpression|"now"|BracketExpression|BCKTIMESTAMP|TypeCastingExpression|CallFunctionExpression|CreateUintObjectExpression|ArrayExpression))?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//inicialization =  (NumberExpression|Identifier|IdentifierValueExpression|ArithmeticalExpression|"now"|BracketExpression|BCKTIMESTAMP|TypeCastingExpression|CallFunctionExpression|CreateUintObjectExpression|ArrayExpression)
		public Assignment getInicializationAssignment_6_1() { return cInicializationAssignment_6_1; }
		
		//(NumberExpression|Identifier|IdentifierValueExpression|ArithmeticalExpression|"now"|BracketExpression|BCKTIMESTAMP|TypeCastingExpression|CallFunctionExpression|CreateUintObjectExpression|ArrayExpression)
		public Alternatives getInicializationAlternatives_6_1_0() { return cInicializationAlternatives_6_1_0; }
		
		//NumberExpression
		public RuleCall getInicializationNumberExpressionParserRuleCall_6_1_0_0() { return cInicializationNumberExpressionParserRuleCall_6_1_0_0; }
		
		//Identifier
		public RuleCall getInicializationIdentifierParserRuleCall_6_1_0_1() { return cInicializationIdentifierParserRuleCall_6_1_0_1; }
		
		//IdentifierValueExpression
		public RuleCall getInicializationIdentifierValueExpressionParserRuleCall_6_1_0_2() { return cInicializationIdentifierValueExpressionParserRuleCall_6_1_0_2; }
		
		//ArithmeticalExpression
		public RuleCall getInicializationArithmeticalExpressionParserRuleCall_6_1_0_3() { return cInicializationArithmeticalExpressionParserRuleCall_6_1_0_3; }
		
		//"now"
		public Keyword getInicializationNowKeyword_6_1_0_4() { return cInicializationNowKeyword_6_1_0_4; }
		
		//BracketExpression
		public RuleCall getInicializationBracketExpressionParserRuleCall_6_1_0_5() { return cInicializationBracketExpressionParserRuleCall_6_1_0_5; }
		
		//BCKTIMESTAMP
		public RuleCall getInicializationBCKTIMESTAMPTerminalRuleCall_6_1_0_6() { return cInicializationBCKTIMESTAMPTerminalRuleCall_6_1_0_6; }
		
		//TypeCastingExpression
		public RuleCall getInicializationTypeCastingExpressionParserRuleCall_6_1_0_7() { return cInicializationTypeCastingExpressionParserRuleCall_6_1_0_7; }
		
		//CallFunctionExpression
		public RuleCall getInicializationCallFunctionExpressionParserRuleCall_6_1_0_8() { return cInicializationCallFunctionExpressionParserRuleCall_6_1_0_8; }
		
		//CreateUintObjectExpression
		public RuleCall getInicializationCreateUintObjectExpressionParserRuleCall_6_1_0_9() { return cInicializationCreateUintObjectExpressionParserRuleCall_6_1_0_9; }
		
		//ArrayExpression
		public RuleCall getInicializationArrayExpressionParserRuleCall_6_1_0_10() { return cInicializationArrayExpressionParserRuleCall_6_1_0_10; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
	}
	public class PropertyBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.PropertyBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeBoolParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantCONSTANTTerminalRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		private final Assignment cVisibilityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_3_0 = (RuleCall)cVisibilityAssignment_3.eContents().get(0);
		private final Assignment cStorageDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStorageDataStorageDataEnumRuleCall_4_0 = (RuleCall)cStorageDataAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIdentifierParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInicializationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cInicializationAlternatives_6_1_0 = (Alternatives)cInicializationAssignment_6_1.eContents().get(0);
		private final RuleCall cInicializationIdentifierParserRuleCall_6_1_0_0 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(0);
		private final RuleCall cInicializationIdentifierValueExpressionParserRuleCall_6_1_0_1 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(1);
		private final RuleCall cInicializationBoolValueExpressionParserRuleCall_6_1_0_2 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(2);
		private final RuleCall cInicializationCallFunctionExpressionParserRuleCall_6_1_0_3 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(3);
		private final RuleCall cInicializationCreateBoolObjectExpressionParserRuleCall_6_1_0_4 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//PropertyBoolean:
		//    type = TypeBool array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? name = Identifier ('=' inicialization = (Identifier|IdentifierValueExpression|BoolValueExpression|CallFunctionExpression|CreateBoolObjectExpression) )? SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = TypeBool array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? name = Identifier ('=' inicialization = (Identifier|IdentifierValueExpression|BoolValueExpression|CallFunctionExpression|CreateBoolObjectExpression) )? SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//type = TypeBool
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TypeBool
		public RuleCall getTypeTypeBoolParserRuleCall_0_0() { return cTypeTypeBoolParserRuleCall_0_0; }
		
		//array=Array?
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0() { return cArrayArrayParserRuleCall_1_0; }
		
		//constant=CONSTANT?
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//CONSTANT
		public RuleCall getConstantCONSTANTTerminalRuleCall_2_0() { return cConstantCONSTANTTerminalRuleCall_2_0; }
		
		//visibility = Visibility?
		public Assignment getVisibilityAssignment_3() { return cVisibilityAssignment_3; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_3_0() { return cVisibilityVisibilityEnumRuleCall_3_0; }
		
		//(storageData = StorageData)?
		public Assignment getStorageDataAssignment_4() { return cStorageDataAssignment_4; }
		
		//StorageData
		public RuleCall getStorageDataStorageDataEnumRuleCall_4_0() { return cStorageDataStorageDataEnumRuleCall_4_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_5_0() { return cNameIdentifierParserRuleCall_5_0; }
		
		//('=' inicialization = (Identifier|IdentifierValueExpression|BoolValueExpression|CallFunctionExpression|CreateBoolObjectExpression) )?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//inicialization = (Identifier|IdentifierValueExpression|BoolValueExpression|CallFunctionExpression|CreateBoolObjectExpression)
		public Assignment getInicializationAssignment_6_1() { return cInicializationAssignment_6_1; }
		
		//(Identifier|IdentifierValueExpression|BoolValueExpression|CallFunctionExpression|CreateBoolObjectExpression)
		public Alternatives getInicializationAlternatives_6_1_0() { return cInicializationAlternatives_6_1_0; }
		
		//Identifier
		public RuleCall getInicializationIdentifierParserRuleCall_6_1_0_0() { return cInicializationIdentifierParserRuleCall_6_1_0_0; }
		
		//IdentifierValueExpression
		public RuleCall getInicializationIdentifierValueExpressionParserRuleCall_6_1_0_1() { return cInicializationIdentifierValueExpressionParserRuleCall_6_1_0_1; }
		
		//BoolValueExpression
		public RuleCall getInicializationBoolValueExpressionParserRuleCall_6_1_0_2() { return cInicializationBoolValueExpressionParserRuleCall_6_1_0_2; }
		
		//CallFunctionExpression
		public RuleCall getInicializationCallFunctionExpressionParserRuleCall_6_1_0_3() { return cInicializationCallFunctionExpressionParserRuleCall_6_1_0_3; }
		
		//CreateBoolObjectExpression
		public RuleCall getInicializationCreateBoolObjectExpressionParserRuleCall_6_1_0_4() { return cInicializationCreateBoolObjectExpressionParserRuleCall_6_1_0_4; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
	}
	public class PropertyAddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.PropertyAddress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeAddressParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantCONSTANTTerminalRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		private final Assignment cVisibilityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_3_0 = (RuleCall)cVisibilityAssignment_3.eContents().get(0);
		private final Assignment cStorageDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStorageDataStorageDataEnumRuleCall_4_0 = (RuleCall)cStorageDataAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIdentifierParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInicializationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cInicializationAlternatives_6_1_0 = (Alternatives)cInicializationAssignment_6_1.eContents().get(0);
		private final RuleCall cInicializationIdentifierParserRuleCall_6_1_0_0 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(0);
		private final RuleCall cInicializationIdentifierValueExpressionParserRuleCall_6_1_0_1 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(1);
		private final RuleCall cInicializationADDRESSEXPRESIONTerminalRuleCall_6_1_0_2 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(2);
		private final RuleCall cInicializationMSGSENDERTerminalRuleCall_6_1_0_3 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(3);
		private final RuleCall cInicializationBracketExpressionParserRuleCall_6_1_0_4 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(4);
		private final RuleCall cInicializationTypeCastingExpressionParserRuleCall_6_1_0_5 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(5);
		private final RuleCall cInicializationCallFunctionExpressionParserRuleCall_6_1_0_6 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(6);
		private final RuleCall cInicializationCreateAddressObjectExpressionParserRuleCall_6_1_0_7 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(7);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//PropertyAddress:
		//    type = TypeAddress array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? name = Identifier ('=' inicialization = (Identifier|IdentifierValueExpression|ADDRESSEXPRESION|MSGSENDER|BracketExpression|TypeCastingExpression|CallFunctionExpression|CreateAddressObjectExpression))? SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = TypeAddress array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? name = Identifier ('=' inicialization = (Identifier|IdentifierValueExpression|ADDRESSEXPRESION|MSGSENDER|BracketExpression|TypeCastingExpression|CallFunctionExpression|CreateAddressObjectExpression))? SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//type = TypeAddress
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TypeAddress
		public RuleCall getTypeTypeAddressParserRuleCall_0_0() { return cTypeTypeAddressParserRuleCall_0_0; }
		
		//array=Array?
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0() { return cArrayArrayParserRuleCall_1_0; }
		
		//constant=CONSTANT?
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//CONSTANT
		public RuleCall getConstantCONSTANTTerminalRuleCall_2_0() { return cConstantCONSTANTTerminalRuleCall_2_0; }
		
		//visibility = Visibility?
		public Assignment getVisibilityAssignment_3() { return cVisibilityAssignment_3; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_3_0() { return cVisibilityVisibilityEnumRuleCall_3_0; }
		
		//(storageData = StorageData)?
		public Assignment getStorageDataAssignment_4() { return cStorageDataAssignment_4; }
		
		//StorageData
		public RuleCall getStorageDataStorageDataEnumRuleCall_4_0() { return cStorageDataStorageDataEnumRuleCall_4_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_5_0() { return cNameIdentifierParserRuleCall_5_0; }
		
		//('=' inicialization = (Identifier|IdentifierValueExpression|ADDRESSEXPRESION|MSGSENDER|BracketExpression|TypeCastingExpression|CallFunctionExpression|CreateAddressObjectExpression))?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//inicialization = (Identifier|IdentifierValueExpression|ADDRESSEXPRESION|MSGSENDER|BracketExpression|TypeCastingExpression|CallFunctionExpression|CreateAddressObjectExpression)
		public Assignment getInicializationAssignment_6_1() { return cInicializationAssignment_6_1; }
		
		//(Identifier|IdentifierValueExpression|ADDRESSEXPRESION|MSGSENDER|BracketExpression|TypeCastingExpression|CallFunctionExpression|CreateAddressObjectExpression)
		public Alternatives getInicializationAlternatives_6_1_0() { return cInicializationAlternatives_6_1_0; }
		
		//Identifier
		public RuleCall getInicializationIdentifierParserRuleCall_6_1_0_0() { return cInicializationIdentifierParserRuleCall_6_1_0_0; }
		
		//IdentifierValueExpression
		public RuleCall getInicializationIdentifierValueExpressionParserRuleCall_6_1_0_1() { return cInicializationIdentifierValueExpressionParserRuleCall_6_1_0_1; }
		
		//ADDRESSEXPRESION
		public RuleCall getInicializationADDRESSEXPRESIONTerminalRuleCall_6_1_0_2() { return cInicializationADDRESSEXPRESIONTerminalRuleCall_6_1_0_2; }
		
		//MSGSENDER
		public RuleCall getInicializationMSGSENDERTerminalRuleCall_6_1_0_3() { return cInicializationMSGSENDERTerminalRuleCall_6_1_0_3; }
		
		//BracketExpression
		public RuleCall getInicializationBracketExpressionParserRuleCall_6_1_0_4() { return cInicializationBracketExpressionParserRuleCall_6_1_0_4; }
		
		//TypeCastingExpression
		public RuleCall getInicializationTypeCastingExpressionParserRuleCall_6_1_0_5() { return cInicializationTypeCastingExpressionParserRuleCall_6_1_0_5; }
		
		//CallFunctionExpression
		public RuleCall getInicializationCallFunctionExpressionParserRuleCall_6_1_0_6() { return cInicializationCallFunctionExpressionParserRuleCall_6_1_0_6; }
		
		//CreateAddressObjectExpression
		public RuleCall getInicializationCreateAddressObjectExpressionParserRuleCall_6_1_0_7() { return cInicializationCreateAddressObjectExpressionParserRuleCall_6_1_0_7; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
	}
	public class PropertyIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.PropertyIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeIdentifierParserRuleCall_0_0_0 = (RuleCall)cTypeAlternatives_0_0.eContents().get(0);
		private final RuleCall cTypeIdentifierValueExpressionParserRuleCall_0_0_1 = (RuleCall)cTypeAlternatives_0_0.eContents().get(1);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantCONSTANTTerminalRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		private final Assignment cVisibilityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_3_0 = (RuleCall)cVisibilityAssignment_3.eContents().get(0);
		private final Assignment cStorageDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStorageDataStorageDataEnumRuleCall_4_0 = (RuleCall)cStorageDataAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIdentifierParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInicializationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cInicializationAlternatives_6_1_0 = (Alternatives)cInicializationAssignment_6_1.eContents().get(0);
		private final RuleCall cInicializationIdentifierParserRuleCall_6_1_0_0 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(0);
		private final RuleCall cInicializationIdentifierValueExpressionParserRuleCall_6_1_0_1 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(1);
		private final RuleCall cInicializationStructInicializationKeyExpressionParserRuleCall_6_1_0_2 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(2);
		private final RuleCall cInicializationBracketExpressionParserRuleCall_6_1_0_3 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(3);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//PropertyIdentifier:
		//    type = (Identifier|IdentifierValueExpression) array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? (name= Identifier)  ('=' inicialization = (Identifier|IdentifierValueExpression|StructInicializationKeyExpression|BracketExpression))? SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = (Identifier|IdentifierValueExpression) array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? (name= Identifier)  ('=' inicialization = (Identifier|IdentifierValueExpression|StructInicializationKeyExpression|BracketExpression))? SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//type = (Identifier|IdentifierValueExpression)
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//(Identifier|IdentifierValueExpression)
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }
		
		//Identifier
		public RuleCall getTypeIdentifierParserRuleCall_0_0_0() { return cTypeIdentifierParserRuleCall_0_0_0; }
		
		//IdentifierValueExpression
		public RuleCall getTypeIdentifierValueExpressionParserRuleCall_0_0_1() { return cTypeIdentifierValueExpressionParserRuleCall_0_0_1; }
		
		//array=Array?
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0() { return cArrayArrayParserRuleCall_1_0; }
		
		//constant=CONSTANT?
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//CONSTANT
		public RuleCall getConstantCONSTANTTerminalRuleCall_2_0() { return cConstantCONSTANTTerminalRuleCall_2_0; }
		
		//visibility = Visibility?
		public Assignment getVisibilityAssignment_3() { return cVisibilityAssignment_3; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_3_0() { return cVisibilityVisibilityEnumRuleCall_3_0; }
		
		//(storageData = StorageData)?
		public Assignment getStorageDataAssignment_4() { return cStorageDataAssignment_4; }
		
		//StorageData
		public RuleCall getStorageDataStorageDataEnumRuleCall_4_0() { return cStorageDataStorageDataEnumRuleCall_4_0; }
		
		//(name= Identifier)
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_5_0() { return cNameIdentifierParserRuleCall_5_0; }
		
		//('=' inicialization = (Identifier|IdentifierValueExpression|StructInicializationKeyExpression|BracketExpression))?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//inicialization = (Identifier|IdentifierValueExpression|StructInicializationKeyExpression|BracketExpression)
		public Assignment getInicializationAssignment_6_1() { return cInicializationAssignment_6_1; }
		
		//(Identifier|IdentifierValueExpression|StructInicializationKeyExpression|BracketExpression)
		public Alternatives getInicializationAlternatives_6_1_0() { return cInicializationAlternatives_6_1_0; }
		
		//Identifier
		public RuleCall getInicializationIdentifierParserRuleCall_6_1_0_0() { return cInicializationIdentifierParserRuleCall_6_1_0_0; }
		
		//IdentifierValueExpression
		public RuleCall getInicializationIdentifierValueExpressionParserRuleCall_6_1_0_1() { return cInicializationIdentifierValueExpressionParserRuleCall_6_1_0_1; }
		
		//StructInicializationKeyExpression
		public RuleCall getInicializationStructInicializationKeyExpressionParserRuleCall_6_1_0_2() { return cInicializationStructInicializationKeyExpressionParserRuleCall_6_1_0_2; }
		
		//BracketExpression
		public RuleCall getInicializationBracketExpressionParserRuleCall_6_1_0_3() { return cInicializationBracketExpressionParserRuleCall_6_1_0_3; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
	}
	public class PropertyUserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.PropertyUser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeUserKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantCONSTANTTerminalRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		private final Assignment cVisibilityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_3_0 = (RuleCall)cVisibilityAssignment_3.eContents().get(0);
		private final Assignment cStorageDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStorageDataStorageDataEnumRuleCall_4_0 = (RuleCall)cStorageDataAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIdentifierParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInicializationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cInicializationAlternatives_6_1_0 = (Alternatives)cInicializationAssignment_6_1.eContents().get(0);
		private final RuleCall cInicializationIdentifierParserRuleCall_6_1_0_0 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(0);
		private final RuleCall cInicializationIdentifierValueExpressionParserRuleCall_6_1_0_1 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(1);
		private final RuleCall cInicializationBracketExpressionParserRuleCall_6_1_0_2 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(2);
		private final RuleCall cInicializationPersonalizedTypeUserInicializationParserRuleCall_6_1_0_3 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(3);
		private final RuleCall cInicializationNewPersonalizedTypeUserInicializationParserRuleCall_6_1_0_4 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//PropertyUser:
		//    type = "User" array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? (name= Identifier)  ('=' inicialization = (Identifier|IdentifierValueExpression|BracketExpression|PersonalizedTypeUserInicialization|NewPersonalizedTypeUserInicialization))? SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = "User" array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? (name= Identifier)  ('=' inicialization = (Identifier|IdentifierValueExpression|BracketExpression|PersonalizedTypeUserInicialization|NewPersonalizedTypeUserInicialization))? SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//type = "User"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//"User"
		public Keyword getTypeUserKeyword_0_0() { return cTypeUserKeyword_0_0; }
		
		//array=Array?
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0() { return cArrayArrayParserRuleCall_1_0; }
		
		//constant=CONSTANT?
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//CONSTANT
		public RuleCall getConstantCONSTANTTerminalRuleCall_2_0() { return cConstantCONSTANTTerminalRuleCall_2_0; }
		
		//visibility = Visibility?
		public Assignment getVisibilityAssignment_3() { return cVisibilityAssignment_3; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_3_0() { return cVisibilityVisibilityEnumRuleCall_3_0; }
		
		//(storageData = StorageData)?
		public Assignment getStorageDataAssignment_4() { return cStorageDataAssignment_4; }
		
		//StorageData
		public RuleCall getStorageDataStorageDataEnumRuleCall_4_0() { return cStorageDataStorageDataEnumRuleCall_4_0; }
		
		//(name= Identifier)
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_5_0() { return cNameIdentifierParserRuleCall_5_0; }
		
		//('=' inicialization = (Identifier|IdentifierValueExpression|BracketExpression|PersonalizedTypeUserInicialization|NewPersonalizedTypeUserInicialization))?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//inicialization = (Identifier|IdentifierValueExpression|BracketExpression|PersonalizedTypeUserInicialization|NewPersonalizedTypeUserInicialization)
		public Assignment getInicializationAssignment_6_1() { return cInicializationAssignment_6_1; }
		
		//(Identifier|IdentifierValueExpression|BracketExpression|PersonalizedTypeUserInicialization|NewPersonalizedTypeUserInicialization)
		public Alternatives getInicializationAlternatives_6_1_0() { return cInicializationAlternatives_6_1_0; }
		
		//Identifier
		public RuleCall getInicializationIdentifierParserRuleCall_6_1_0_0() { return cInicializationIdentifierParserRuleCall_6_1_0_0; }
		
		//IdentifierValueExpression
		public RuleCall getInicializationIdentifierValueExpressionParserRuleCall_6_1_0_1() { return cInicializationIdentifierValueExpressionParserRuleCall_6_1_0_1; }
		
		//BracketExpression
		public RuleCall getInicializationBracketExpressionParserRuleCall_6_1_0_2() { return cInicializationBracketExpressionParserRuleCall_6_1_0_2; }
		
		//PersonalizedTypeUserInicialization
		public RuleCall getInicializationPersonalizedTypeUserInicializationParserRuleCall_6_1_0_3() { return cInicializationPersonalizedTypeUserInicializationParserRuleCall_6_1_0_3; }
		
		//NewPersonalizedTypeUserInicialization
		public RuleCall getInicializationNewPersonalizedTypeUserInicializationParserRuleCall_6_1_0_4() { return cInicializationNewPersonalizedTypeUserInicializationParserRuleCall_6_1_0_4; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
	}
	public class PropertyCompanyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.PropertyCompany");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeCompanyKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantCONSTANTTerminalRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		private final Assignment cVisibilityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_3_0 = (RuleCall)cVisibilityAssignment_3.eContents().get(0);
		private final Assignment cStorageDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStorageDataStorageDataEnumRuleCall_4_0 = (RuleCall)cStorageDataAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIdentifierParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInicializationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cInicializationAlternatives_6_1_0 = (Alternatives)cInicializationAssignment_6_1.eContents().get(0);
		private final RuleCall cInicializationIdentifierParserRuleCall_6_1_0_0 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(0);
		private final RuleCall cInicializationIdentifierValueExpressionParserRuleCall_6_1_0_1 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(1);
		private final RuleCall cInicializationBracketExpressionParserRuleCall_6_1_0_2 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(2);
		private final RuleCall cInicializationPersonalizedTypeCompanyInicializationParserRuleCall_6_1_0_3 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(3);
		private final RuleCall cInicializationNewPersonalizedTypeCompanyInicializationParserRuleCall_6_1_0_4 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//PropertyCompany:
		//    type = "Company" array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? (name= Identifier)  ('=' inicialization = (Identifier|IdentifierValueExpression|BracketExpression|PersonalizedTypeCompanyInicialization|NewPersonalizedTypeCompanyInicialization))? SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = "Company" array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? (name= Identifier)  ('=' inicialization = (Identifier|IdentifierValueExpression|BracketExpression|PersonalizedTypeCompanyInicialization|NewPersonalizedTypeCompanyInicialization))? SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//type = "Company"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//"Company"
		public Keyword getTypeCompanyKeyword_0_0() { return cTypeCompanyKeyword_0_0; }
		
		//array=Array?
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0() { return cArrayArrayParserRuleCall_1_0; }
		
		//constant=CONSTANT?
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//CONSTANT
		public RuleCall getConstantCONSTANTTerminalRuleCall_2_0() { return cConstantCONSTANTTerminalRuleCall_2_0; }
		
		//visibility = Visibility?
		public Assignment getVisibilityAssignment_3() { return cVisibilityAssignment_3; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_3_0() { return cVisibilityVisibilityEnumRuleCall_3_0; }
		
		//(storageData = StorageData)?
		public Assignment getStorageDataAssignment_4() { return cStorageDataAssignment_4; }
		
		//StorageData
		public RuleCall getStorageDataStorageDataEnumRuleCall_4_0() { return cStorageDataStorageDataEnumRuleCall_4_0; }
		
		//(name= Identifier)
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_5_0() { return cNameIdentifierParserRuleCall_5_0; }
		
		//('=' inicialization = (Identifier|IdentifierValueExpression|BracketExpression|PersonalizedTypeCompanyInicialization|NewPersonalizedTypeCompanyInicialization))?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//inicialization = (Identifier|IdentifierValueExpression|BracketExpression|PersonalizedTypeCompanyInicialization|NewPersonalizedTypeCompanyInicialization)
		public Assignment getInicializationAssignment_6_1() { return cInicializationAssignment_6_1; }
		
		//(Identifier|IdentifierValueExpression|BracketExpression|PersonalizedTypeCompanyInicialization|NewPersonalizedTypeCompanyInicialization)
		public Alternatives getInicializationAlternatives_6_1_0() { return cInicializationAlternatives_6_1_0; }
		
		//Identifier
		public RuleCall getInicializationIdentifierParserRuleCall_6_1_0_0() { return cInicializationIdentifierParserRuleCall_6_1_0_0; }
		
		//IdentifierValueExpression
		public RuleCall getInicializationIdentifierValueExpressionParserRuleCall_6_1_0_1() { return cInicializationIdentifierValueExpressionParserRuleCall_6_1_0_1; }
		
		//BracketExpression
		public RuleCall getInicializationBracketExpressionParserRuleCall_6_1_0_2() { return cInicializationBracketExpressionParserRuleCall_6_1_0_2; }
		
		//PersonalizedTypeCompanyInicialization
		public RuleCall getInicializationPersonalizedTypeCompanyInicializationParserRuleCall_6_1_0_3() { return cInicializationPersonalizedTypeCompanyInicializationParserRuleCall_6_1_0_3; }
		
		//NewPersonalizedTypeCompanyInicialization
		public RuleCall getInicializationNewPersonalizedTypeCompanyInicializationParserRuleCall_6_1_0_4() { return cInicializationNewPersonalizedTypeCompanyInicializationParserRuleCall_6_1_0_4; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
	}
	public class PropertyBytesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.PropertyBytes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeBytesParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantCONSTANTTerminalRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		private final Assignment cVisibilityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_3_0 = (RuleCall)cVisibilityAssignment_3.eContents().get(0);
		private final Assignment cStorageDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStorageDataStorageDataEnumRuleCall_4_0 = (RuleCall)cStorageDataAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIdentifierParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInicializationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cInicializationAlternatives_6_1_0 = (Alternatives)cInicializationAssignment_6_1.eContents().get(0);
		private final RuleCall cInicializationHEXEXPRESSIONTerminalRuleCall_6_1_0_0 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(0);
		private final RuleCall cInicializationIdentifierParserRuleCall_6_1_0_1 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(1);
		private final RuleCall cInicializationIdentifierValueExpressionParserRuleCall_6_1_0_2 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(2);
		private final RuleCall cInicializationADDRESSEXPRESIONTerminalRuleCall_6_1_0_3 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(3);
		private final RuleCall cInicializationAbyExpressionParserRuleCall_6_1_0_4 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(4);
		private final RuleCall cInicializationTypeCastingExpressionParserRuleCall_6_1_0_5 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(5);
		private final RuleCall cInicializationCallFunctionExpressionParserRuleCall_6_1_0_6 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(6);
		private final RuleCall cInicializationCreateByteObjectExpressionParserRuleCall_6_1_0_7 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(7);
		private final RuleCall cInicializationSha256ExpressionParserRuleCall_6_1_0_8 = (RuleCall)cInicializationAlternatives_6_1_0.eContents().get(8);
		private final RuleCall cSEMICOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//PropertyBytes:
		//     type = TypeBytes array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? (name = Identifier) ('=' inicialization = (HEXEXPRESSION|Identifier|IdentifierValueExpression|ADDRESSEXPRESION|AbyExpression|TypeCastingExpression|CallFunctionExpression|CreateByteObjectExpression|Sha256Expression))? SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = TypeBytes array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? (name = Identifier) ('=' inicialization = (HEXEXPRESSION|Identifier|IdentifierValueExpression|ADDRESSEXPRESION|AbyExpression|TypeCastingExpression|CallFunctionExpression|CreateByteObjectExpression|Sha256Expression))? SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//type = TypeBytes
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TypeBytes
		public RuleCall getTypeTypeBytesParserRuleCall_0_0() { return cTypeTypeBytesParserRuleCall_0_0; }
		
		//array=Array?
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0() { return cArrayArrayParserRuleCall_1_0; }
		
		//constant=CONSTANT?
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//CONSTANT
		public RuleCall getConstantCONSTANTTerminalRuleCall_2_0() { return cConstantCONSTANTTerminalRuleCall_2_0; }
		
		//visibility = Visibility?
		public Assignment getVisibilityAssignment_3() { return cVisibilityAssignment_3; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_3_0() { return cVisibilityVisibilityEnumRuleCall_3_0; }
		
		//(storageData = StorageData)?
		public Assignment getStorageDataAssignment_4() { return cStorageDataAssignment_4; }
		
		//StorageData
		public RuleCall getStorageDataStorageDataEnumRuleCall_4_0() { return cStorageDataStorageDataEnumRuleCall_4_0; }
		
		//(name = Identifier)
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_5_0() { return cNameIdentifierParserRuleCall_5_0; }
		
		//('=' inicialization = (HEXEXPRESSION|Identifier|IdentifierValueExpression|ADDRESSEXPRESION|AbyExpression|TypeCastingExpression|CallFunctionExpression|CreateByteObjectExpression|Sha256Expression))?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//inicialization = (HEXEXPRESSION|Identifier|IdentifierValueExpression|ADDRESSEXPRESION|AbyExpression|TypeCastingExpression|CallFunctionExpression|CreateByteObjectExpression|Sha256Expression)
		public Assignment getInicializationAssignment_6_1() { return cInicializationAssignment_6_1; }
		
		//(HEXEXPRESSION|Identifier|IdentifierValueExpression|ADDRESSEXPRESION|AbyExpression|TypeCastingExpression|CallFunctionExpression|CreateByteObjectExpression|Sha256Expression)
		public Alternatives getInicializationAlternatives_6_1_0() { return cInicializationAlternatives_6_1_0; }
		
		//HEXEXPRESSION
		public RuleCall getInicializationHEXEXPRESSIONTerminalRuleCall_6_1_0_0() { return cInicializationHEXEXPRESSIONTerminalRuleCall_6_1_0_0; }
		
		//Identifier
		public RuleCall getInicializationIdentifierParserRuleCall_6_1_0_1() { return cInicializationIdentifierParserRuleCall_6_1_0_1; }
		
		//IdentifierValueExpression
		public RuleCall getInicializationIdentifierValueExpressionParserRuleCall_6_1_0_2() { return cInicializationIdentifierValueExpressionParserRuleCall_6_1_0_2; }
		
		//ADDRESSEXPRESION
		public RuleCall getInicializationADDRESSEXPRESIONTerminalRuleCall_6_1_0_3() { return cInicializationADDRESSEXPRESIONTerminalRuleCall_6_1_0_3; }
		
		//AbyExpression
		public RuleCall getInicializationAbyExpressionParserRuleCall_6_1_0_4() { return cInicializationAbyExpressionParserRuleCall_6_1_0_4; }
		
		//TypeCastingExpression
		public RuleCall getInicializationTypeCastingExpressionParserRuleCall_6_1_0_5() { return cInicializationTypeCastingExpressionParserRuleCall_6_1_0_5; }
		
		//CallFunctionExpression
		public RuleCall getInicializationCallFunctionExpressionParserRuleCall_6_1_0_6() { return cInicializationCallFunctionExpressionParserRuleCall_6_1_0_6; }
		
		//CreateByteObjectExpression
		public RuleCall getInicializationCreateByteObjectExpressionParserRuleCall_6_1_0_7() { return cInicializationCreateByteObjectExpressionParserRuleCall_6_1_0_7; }
		
		//Sha256Expression
		public RuleCall getInicializationSha256ExpressionParserRuleCall_6_1_0_8() { return cInicializationSha256ExpressionParserRuleCall_6_1_0_8; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7() { return cSEMICOLONTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
	}
	public class InputParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.InputParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0_0_0 = (Alternatives)cTypeAssignment_0_0_0.eContents().get(0);
		private final RuleCall cTypeSingularTypeParserRuleCall_0_0_0_0_0 = (RuleCall)cTypeAlternatives_0_0_0_0.eContents().get(0);
		private final Keyword cTypeCompanyKeyword_0_0_0_0_1 = (Keyword)cTypeAlternatives_0_0_0_0.eContents().get(1);
		private final Keyword cTypeUserKeyword_0_0_0_0_2 = (Keyword)cTypeAlternatives_0_0_0_0.eContents().get(2);
		private final RuleCall cTypeIdentifierParserRuleCall_0_0_0_0_3 = (RuleCall)cTypeAlternatives_0_0_0_0.eContents().get(3);
		private final Assignment cArrayAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_0_0_1_0 = (RuleCall)cArrayAssignment_0_0_1.eContents().get(0);
		private final Assignment cIndexedAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cIndexedINDEXEDTerminalRuleCall_0_0_2_0 = (RuleCall)cIndexedAssignment_0_0_2.eContents().get(0);
		private final Assignment cStorageDataAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cStorageDataStorageDataEnumRuleCall_0_0_3_0 = (RuleCall)cStorageDataAssignment_0_0_3.eContents().get(0);
		private final Assignment cValueInputAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final Alternatives cValueInputAlternatives_0_0_4_0 = (Alternatives)cValueInputAssignment_0_0_4.eContents().get(0);
		private final RuleCall cValueInputIdentifierParserRuleCall_0_0_4_0_0 = (RuleCall)cValueInputAlternatives_0_0_4_0.eContents().get(0);
		private final RuleCall cValueInputIdentifierDotExpressionParserRuleCall_0_0_4_0_1 = (RuleCall)cValueInputAlternatives_0_0_4_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cAlternatives_0.eContents().get(1);
		private final Assignment cValueInputAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final Alternatives cValueInputAlternatives_0_1_0_0 = (Alternatives)cValueInputAssignment_0_1_0.eContents().get(0);
		private final RuleCall cValueInputIdentifierParserRuleCall_0_1_0_0_0 = (RuleCall)cValueInputAlternatives_0_1_0_0.eContents().get(0);
		private final RuleCall cValueInputIdentifierDotExpressionParserRuleCall_0_1_0_0_1 = (RuleCall)cValueInputAlternatives_0_1_0_0.eContents().get(1);
		private final RuleCall cValueInputMSGVariablesParserRuleCall_0_1_0_0_2 = (RuleCall)cValueInputAlternatives_0_1_0_0.eContents().get(2);
		private final RuleCall cValueInputBlockVariablesParserRuleCall_0_1_0_0_3 = (RuleCall)cValueInputAlternatives_0_1_0_0.eContents().get(3);
		private final RuleCall cValueInputTxVariablesParserRuleCall_0_1_0_0_4 = (RuleCall)cValueInputAlternatives_0_1_0_0.eContents().get(4);
		private final RuleCall cValueInputSyntaxExpressionParserRuleCall_0_1_0_0_5 = (RuleCall)cValueInputAlternatives_0_1_0_0.eContents().get(5);
		private final RuleCall cValueInputNumberExpressionParserRuleCall_0_1_0_0_6 = (RuleCall)cValueInputAlternatives_0_1_0_0.eContents().get(6);
		private final RuleCall cValueInputArithmeticalExpressionParserRuleCall_0_1_0_0_7 = (RuleCall)cValueInputAlternatives_0_1_0_0.eContents().get(7);
		private final RuleCall cValueInputBoolValueExpressionParserRuleCall_0_1_0_0_8 = (RuleCall)cValueInputAlternatives_0_1_0_0.eContents().get(8);
		private final RuleCall cValueInputArithmeticalComparationExpressionParserRuleCall_0_1_0_0_9 = (RuleCall)cValueInputAlternatives_0_1_0_0.eContents().get(9);
		private final RuleCall cValueInputCoinExpressionParserRuleCall_0_1_0_0_10 = (RuleCall)cValueInputAlternatives_0_1_0_0.eContents().get(10);
		private final RuleCall cMappingDeclarationParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//InputParam:
		//    //(((type =(SingularType|"Company"|"User"|Identifier|IdentifierValueExpression)) array=Array? indexed=("indexed"|"calldata")? storageData=StorageData? COMMA?) | MappingDeclaration)? valueInput = (SyntaxExpression|Identifier| NumberExpression | IdentifierValueExpression | MSGVariables | BlockVariables | TxVariables | ComparationExpression | ArithmeticalComparationExpression| ArithmeticalExpression | BoolValueExpression ) COMMA?
		//    ((type = (SingularType|"Company"|"User"|Identifier) array=Array? indexed=INDEXED? storageData = StorageData?  valueInput = (Identifier | IdentifierDotExpression)) | (valueInput = (Identifier | IdentifierDotExpression| MSGVariables | BlockVariables | TxVariables |SyntaxExpression| NumberExpression|ArithmeticalExpression | BoolValueExpression|ArithmeticalComparationExpression|CoinExpression) |  MappingDeclaration)) COMMA?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////(((type =(SingularType|"Company"|"User"|Identifier|IdentifierValueExpression)) array=Array? indexed=("indexed"|"calldata")? storageData=StorageData? COMMA?) | MappingDeclaration)? valueInput = (SyntaxExpression|Identifier| NumberExpression | IdentifierValueExpression | MSGVariables | BlockVariables | TxVariables | ComparationExpression | ArithmeticalComparationExpression| ArithmeticalExpression | BoolValueExpression ) COMMA?
		//((type = (SingularType|"Company"|"User"|Identifier) array=Array? indexed=INDEXED? storageData = StorageData?  valueInput = (Identifier | IdentifierDotExpression)) | (valueInput = (Identifier | IdentifierDotExpression| MSGVariables | BlockVariables | TxVariables |SyntaxExpression| NumberExpression|ArithmeticalExpression | BoolValueExpression|ArithmeticalComparationExpression|CoinExpression) |  MappingDeclaration)) COMMA?
		public Group getGroup() { return cGroup; }
		
		////(((type =(SingularType|"Company"|"User"|Identifier|IdentifierValueExpression)) array=Array? indexed=("indexed"|"calldata")? storageData=StorageData? COMMA?) | MappingDeclaration)? valueInput = (SyntaxExpression|Identifier| NumberExpression | IdentifierValueExpression | MSGVariables | BlockVariables | TxVariables | ComparationExpression | ArithmeticalComparationExpression| ArithmeticalExpression | BoolValueExpression ) COMMA?
		//((type = (SingularType|"Company"|"User"|Identifier) array=Array? indexed=INDEXED? storageData = StorageData?  valueInput = (Identifier | IdentifierDotExpression)) | (valueInput = (Identifier | IdentifierDotExpression| MSGVariables | BlockVariables | TxVariables |SyntaxExpression| NumberExpression|ArithmeticalExpression | BoolValueExpression|ArithmeticalComparationExpression|CoinExpression) |  MappingDeclaration))
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//(type = (SingularType|"Company"|"User"|Identifier) array=Array? indexed=INDEXED? storageData = StorageData?  valueInput = (Identifier | IdentifierDotExpression))
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//type = (SingularType|"Company"|"User"|Identifier)
		public Assignment getTypeAssignment_0_0_0() { return cTypeAssignment_0_0_0; }
		
		//(SingularType|"Company"|"User"|Identifier)
		public Alternatives getTypeAlternatives_0_0_0_0() { return cTypeAlternatives_0_0_0_0; }
		
		//SingularType
		public RuleCall getTypeSingularTypeParserRuleCall_0_0_0_0_0() { return cTypeSingularTypeParserRuleCall_0_0_0_0_0; }
		
		//"Company"
		public Keyword getTypeCompanyKeyword_0_0_0_0_1() { return cTypeCompanyKeyword_0_0_0_0_1; }
		
		//"User"
		public Keyword getTypeUserKeyword_0_0_0_0_2() { return cTypeUserKeyword_0_0_0_0_2; }
		
		//Identifier
		public RuleCall getTypeIdentifierParserRuleCall_0_0_0_0_3() { return cTypeIdentifierParserRuleCall_0_0_0_0_3; }
		
		//array=Array?
		public Assignment getArrayAssignment_0_0_1() { return cArrayAssignment_0_0_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_0_0_1_0() { return cArrayArrayParserRuleCall_0_0_1_0; }
		
		//indexed=INDEXED?
		public Assignment getIndexedAssignment_0_0_2() { return cIndexedAssignment_0_0_2; }
		
		//INDEXED
		public RuleCall getIndexedINDEXEDTerminalRuleCall_0_0_2_0() { return cIndexedINDEXEDTerminalRuleCall_0_0_2_0; }
		
		//storageData = StorageData?
		public Assignment getStorageDataAssignment_0_0_3() { return cStorageDataAssignment_0_0_3; }
		
		//StorageData
		public RuleCall getStorageDataStorageDataEnumRuleCall_0_0_3_0() { return cStorageDataStorageDataEnumRuleCall_0_0_3_0; }
		
		//valueInput = (Identifier | IdentifierDotExpression)
		public Assignment getValueInputAssignment_0_0_4() { return cValueInputAssignment_0_0_4; }
		
		//(Identifier | IdentifierDotExpression)
		public Alternatives getValueInputAlternatives_0_0_4_0() { return cValueInputAlternatives_0_0_4_0; }
		
		//Identifier
		public RuleCall getValueInputIdentifierParserRuleCall_0_0_4_0_0() { return cValueInputIdentifierParserRuleCall_0_0_4_0_0; }
		
		//IdentifierDotExpression
		public RuleCall getValueInputIdentifierDotExpressionParserRuleCall_0_0_4_0_1() { return cValueInputIdentifierDotExpressionParserRuleCall_0_0_4_0_1; }
		
		//(valueInput = (Identifier | IdentifierDotExpression| MSGVariables | BlockVariables | TxVariables |SyntaxExpression| NumberExpression|ArithmeticalExpression | BoolValueExpression|ArithmeticalComparationExpression|CoinExpression) |  MappingDeclaration)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//valueInput = (Identifier | IdentifierDotExpression| MSGVariables | BlockVariables | TxVariables |SyntaxExpression| NumberExpression|ArithmeticalExpression | BoolValueExpression|ArithmeticalComparationExpression|CoinExpression)
		public Assignment getValueInputAssignment_0_1_0() { return cValueInputAssignment_0_1_0; }
		
		//(Identifier | IdentifierDotExpression| MSGVariables | BlockVariables | TxVariables |SyntaxExpression| NumberExpression|ArithmeticalExpression | BoolValueExpression|ArithmeticalComparationExpression|CoinExpression)
		public Alternatives getValueInputAlternatives_0_1_0_0() { return cValueInputAlternatives_0_1_0_0; }
		
		//Identifier
		public RuleCall getValueInputIdentifierParserRuleCall_0_1_0_0_0() { return cValueInputIdentifierParserRuleCall_0_1_0_0_0; }
		
		//IdentifierDotExpression
		public RuleCall getValueInputIdentifierDotExpressionParserRuleCall_0_1_0_0_1() { return cValueInputIdentifierDotExpressionParserRuleCall_0_1_0_0_1; }
		
		//MSGVariables
		public RuleCall getValueInputMSGVariablesParserRuleCall_0_1_0_0_2() { return cValueInputMSGVariablesParserRuleCall_0_1_0_0_2; }
		
		//BlockVariables
		public RuleCall getValueInputBlockVariablesParserRuleCall_0_1_0_0_3() { return cValueInputBlockVariablesParserRuleCall_0_1_0_0_3; }
		
		//TxVariables
		public RuleCall getValueInputTxVariablesParserRuleCall_0_1_0_0_4() { return cValueInputTxVariablesParserRuleCall_0_1_0_0_4; }
		
		//SyntaxExpression
		public RuleCall getValueInputSyntaxExpressionParserRuleCall_0_1_0_0_5() { return cValueInputSyntaxExpressionParserRuleCall_0_1_0_0_5; }
		
		//NumberExpression
		public RuleCall getValueInputNumberExpressionParserRuleCall_0_1_0_0_6() { return cValueInputNumberExpressionParserRuleCall_0_1_0_0_6; }
		
		//ArithmeticalExpression
		public RuleCall getValueInputArithmeticalExpressionParserRuleCall_0_1_0_0_7() { return cValueInputArithmeticalExpressionParserRuleCall_0_1_0_0_7; }
		
		//BoolValueExpression
		public RuleCall getValueInputBoolValueExpressionParserRuleCall_0_1_0_0_8() { return cValueInputBoolValueExpressionParserRuleCall_0_1_0_0_8; }
		
		//ArithmeticalComparationExpression
		public RuleCall getValueInputArithmeticalComparationExpressionParserRuleCall_0_1_0_0_9() { return cValueInputArithmeticalComparationExpressionParserRuleCall_0_1_0_0_9; }
		
		//CoinExpression
		public RuleCall getValueInputCoinExpressionParserRuleCall_0_1_0_0_10() { return cValueInputCoinExpressionParserRuleCall_0_1_0_0_10; }
		
		//MappingDeclaration
		public RuleCall getMappingDeclarationParserRuleCall_0_1_1() { return cMappingDeclarationParserRuleCall_0_1_1; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_1() { return cCOMMATerminalRuleCall_1; }
	}
	public class OutputParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.OutputParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0_0_0 = (Alternatives)cTypeAssignment_0_0_0.eContents().get(0);
		private final RuleCall cTypeSingularTypeParserRuleCall_0_0_0_0_0 = (RuleCall)cTypeAlternatives_0_0_0_0.eContents().get(0);
		private final Keyword cTypeCompanyKeyword_0_0_0_0_1 = (Keyword)cTypeAlternatives_0_0_0_0.eContents().get(1);
		private final Keyword cTypeUserKeyword_0_0_0_0_2 = (Keyword)cTypeAlternatives_0_0_0_0.eContents().get(2);
		private final RuleCall cTypeIdentifierParserRuleCall_0_0_0_0_3 = (RuleCall)cTypeAlternatives_0_0_0_0.eContents().get(3);
		private final Assignment cArrayAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_0_0_1_0 = (RuleCall)cArrayAssignment_0_0_1.eContents().get(0);
		private final Assignment cStorageDataAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cStorageDataStorageDataEnumRuleCall_0_0_2_0 = (RuleCall)cStorageDataAssignment_0_0_2.eContents().get(0);
		private final Assignment cValueAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cValueIdentifierParserRuleCall_0_0_3_0 = (RuleCall)cValueAssignment_0_0_3.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cOutputParamAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cValueAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Alternatives cValueAlternatives_0_1_1_0 = (Alternatives)cValueAssignment_0_1_1.eContents().get(0);
		private final RuleCall cValueComparationExpressionParserRuleCall_0_1_1_0_0 = (RuleCall)cValueAlternatives_0_1_1_0.eContents().get(0);
		private final RuleCall cValueArithmeticalComparationExpressionParserRuleCall_0_1_1_0_1 = (RuleCall)cValueAlternatives_0_1_1_0.eContents().get(1);
		private final RuleCall cValueMSGVariablesParserRuleCall_0_1_1_0_2 = (RuleCall)cValueAlternatives_0_1_1_0.eContents().get(2);
		private final RuleCall cValueIdentifierDotExpressionParserRuleCall_0_1_1_0_3 = (RuleCall)cValueAlternatives_0_1_1_0.eContents().get(3);
		private final RuleCall cValueIdentifierParserRuleCall_0_1_1_0_4 = (RuleCall)cValueAlternatives_0_1_1_0.eContents().get(4);
		private final RuleCall cValueArithmeticalExpressionParserRuleCall_0_1_1_0_5 = (RuleCall)cValueAlternatives_0_1_1_0.eContents().get(5);
		private final RuleCall cCOMMATerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//OutputParam:
		//     (((type = (SingularType|"Company"|"User"|Identifier)) array=Array?  (storageData = StorageData)? value = Identifier?) | {OutputParam} value = (ComparationExpression|ArithmeticalComparationExpression|MSGVariables|IdentifierDotExpression|Identifier|ArithmeticalExpression)) COMMA?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(((type = (SingularType|"Company"|"User"|Identifier)) array=Array?  (storageData = StorageData)? value = Identifier?) | {OutputParam} value = (ComparationExpression|ArithmeticalComparationExpression|MSGVariables|IdentifierDotExpression|Identifier|ArithmeticalExpression)) COMMA?
		public Group getGroup() { return cGroup; }
		
		//(((type = (SingularType|"Company"|"User"|Identifier)) array=Array?  (storageData = StorageData)? value = Identifier?) | {OutputParam} value = (ComparationExpression|ArithmeticalComparationExpression|MSGVariables|IdentifierDotExpression|Identifier|ArithmeticalExpression))
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//((type = (SingularType|"Company"|"User"|Identifier)) array=Array?  (storageData = StorageData)? value = Identifier?)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//(type = (SingularType|"Company"|"User"|Identifier))
		public Assignment getTypeAssignment_0_0_0() { return cTypeAssignment_0_0_0; }
		
		//(SingularType|"Company"|"User"|Identifier)
		public Alternatives getTypeAlternatives_0_0_0_0() { return cTypeAlternatives_0_0_0_0; }
		
		//SingularType
		public RuleCall getTypeSingularTypeParserRuleCall_0_0_0_0_0() { return cTypeSingularTypeParserRuleCall_0_0_0_0_0; }
		
		//"Company"
		public Keyword getTypeCompanyKeyword_0_0_0_0_1() { return cTypeCompanyKeyword_0_0_0_0_1; }
		
		//"User"
		public Keyword getTypeUserKeyword_0_0_0_0_2() { return cTypeUserKeyword_0_0_0_0_2; }
		
		//Identifier
		public RuleCall getTypeIdentifierParserRuleCall_0_0_0_0_3() { return cTypeIdentifierParserRuleCall_0_0_0_0_3; }
		
		//array=Array?
		public Assignment getArrayAssignment_0_0_1() { return cArrayAssignment_0_0_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_0_0_1_0() { return cArrayArrayParserRuleCall_0_0_1_0; }
		
		//(storageData = StorageData)?
		public Assignment getStorageDataAssignment_0_0_2() { return cStorageDataAssignment_0_0_2; }
		
		//StorageData
		public RuleCall getStorageDataStorageDataEnumRuleCall_0_0_2_0() { return cStorageDataStorageDataEnumRuleCall_0_0_2_0; }
		
		//value = Identifier?
		public Assignment getValueAssignment_0_0_3() { return cValueAssignment_0_0_3; }
		
		//Identifier
		public RuleCall getValueIdentifierParserRuleCall_0_0_3_0() { return cValueIdentifierParserRuleCall_0_0_3_0; }
		
		//{OutputParam} value = (ComparationExpression|ArithmeticalComparationExpression|MSGVariables|IdentifierDotExpression|Identifier|ArithmeticalExpression)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{OutputParam}
		public Action getOutputParamAction_0_1_0() { return cOutputParamAction_0_1_0; }
		
		//value = (ComparationExpression|ArithmeticalComparationExpression|MSGVariables|IdentifierDotExpression|Identifier|ArithmeticalExpression)
		public Assignment getValueAssignment_0_1_1() { return cValueAssignment_0_1_1; }
		
		//(ComparationExpression|ArithmeticalComparationExpression|MSGVariables|IdentifierDotExpression|Identifier|ArithmeticalExpression)
		public Alternatives getValueAlternatives_0_1_1_0() { return cValueAlternatives_0_1_1_0; }
		
		//ComparationExpression
		public RuleCall getValueComparationExpressionParserRuleCall_0_1_1_0_0() { return cValueComparationExpressionParserRuleCall_0_1_1_0_0; }
		
		//ArithmeticalComparationExpression
		public RuleCall getValueArithmeticalComparationExpressionParserRuleCall_0_1_1_0_1() { return cValueArithmeticalComparationExpressionParserRuleCall_0_1_1_0_1; }
		
		//MSGVariables
		public RuleCall getValueMSGVariablesParserRuleCall_0_1_1_0_2() { return cValueMSGVariablesParserRuleCall_0_1_1_0_2; }
		
		//IdentifierDotExpression
		public RuleCall getValueIdentifierDotExpressionParserRuleCall_0_1_1_0_3() { return cValueIdentifierDotExpressionParserRuleCall_0_1_1_0_3; }
		
		//Identifier
		public RuleCall getValueIdentifierParserRuleCall_0_1_1_0_4() { return cValueIdentifierParserRuleCall_0_1_1_0_4; }
		
		//ArithmeticalExpression
		public RuleCall getValueArithmeticalExpressionParserRuleCall_0_1_1_0_5() { return cValueArithmeticalExpressionParserRuleCall_0_1_1_0_5; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_1() { return cCOMMATerminalRuleCall_1; }
	}
	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cInputParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputParamsInputParamParserRuleCall_3_0 = (RuleCall)cInputParamsAssignment_3.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cConstantAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConstantCONSTANTTerminalRuleCall_5_0 = (RuleCall)cConstantAssignment_5.eContents().get(0);
		private final Assignment cVirtualAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVirtualVIRTUALTerminalRuleCall_6_0 = (RuleCall)cVirtualAssignment_6.eContents().get(0);
		private final Assignment cVisibilityAccessAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVisibilityAccessVisibilityEnumRuleCall_7_0 = (RuleCall)cVisibilityAccessAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cPersonalizedModifierAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final CrossReference cPersonalizedModifierModifierCrossReference_8_0_0 = (CrossReference)cPersonalizedModifierAssignment_8_0.eContents().get(0);
		private final RuleCall cPersonalizedModifierModifierIDTerminalRuleCall_8_0_0_1 = (RuleCall)cPersonalizedModifierModifierCrossReference_8_0_0.eContents().get(1);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_8_1_0 = (RuleCall)cGroup_8_1.eContents().get(0);
		private final Assignment cInputParamsModifierAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cInputParamsModifierInputParamParserRuleCall_8_1_1_0 = (RuleCall)cInputParamsModifierAssignment_8_1_1.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_8_1_2 = (RuleCall)cGroup_8_1.eContents().get(2);
		private final Assignment cPredefinedModifierAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPredefinedModifierInputModifierEnumRuleCall_9_0 = (RuleCall)cPredefinedModifierAssignment_9.eContents().get(0);
		private final Assignment cOverrideAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cOverrideOverrideModifierParserRuleCall_10_0 = (RuleCall)cOverrideAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final RuleCall cRETURNSTerminalRuleCall_11_0 = (RuleCall)cGroup_11.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_11_1 = (RuleCall)cGroup_11.eContents().get(1);
		private final Assignment cOutputParamsAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cOutputParamsOutputParamParserRuleCall_11_2_0 = (RuleCall)cOutputParamsAssignment_11_2.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_11_3 = (RuleCall)cGroup_11.eContents().get(3);
		private final RuleCall cOPENKEYTerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final RuleCall cEOLINETerminalRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		private final Alternatives cAlternatives_14 = (Alternatives)cGroup.eContents().get(14);
		private final Assignment cRestrictionAssignment_14_0 = (Assignment)cAlternatives_14.eContents().get(0);
		private final RuleCall cRestrictionRestrictionClauseParserRuleCall_14_0_0 = (RuleCall)cRestrictionAssignment_14_0.eContents().get(0);
		private final Assignment cConditionsAssignment_14_1 = (Assignment)cAlternatives_14.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_14_1_0 = (RuleCall)cConditionsAssignment_14_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_14_2 = (Assignment)cAlternatives_14.eContents().get(2);
		private final RuleCall cPropertiesPropertiesParserRuleCall_14_2_0 = (RuleCall)cPropertiesAssignment_14_2.eContents().get(0);
		private final Assignment cMappingPropertiesAssignment_14_3 = (Assignment)cAlternatives_14.eContents().get(3);
		private final RuleCall cMappingPropertiesMappingParserRuleCall_14_3_0 = (RuleCall)cMappingPropertiesAssignment_14_3.eContents().get(0);
		private final Assignment cUndeterminedloopsAssignment_14_4 = (Assignment)cAlternatives_14.eContents().get(4);
		private final RuleCall cUndeterminedloopsUnDeterminedLoopParserRuleCall_14_4_0 = (RuleCall)cUndeterminedloopsAssignment_14_4.eContents().get(0);
		private final Assignment cDeterminedloopsAssignment_14_5 = (Assignment)cAlternatives_14.eContents().get(5);
		private final RuleCall cDeterminedloopsForLoopParserRuleCall_14_5_0 = (RuleCall)cDeterminedloopsAssignment_14_5.eContents().get(0);
		private final Group cGroup_14_6 = (Group)cAlternatives_14.eContents().get(6);
		private final Assignment cExpressionsAssignment_14_6_0 = (Assignment)cGroup_14_6.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_14_6_0_0 = (RuleCall)cExpressionsAssignment_14_6_0.eContents().get(0);
		private final RuleCall cEOLINETerminalRuleCall_14_6_1 = (RuleCall)cGroup_14_6.eContents().get(1);
		private final Assignment cPredefinedFunctionsAssignment_14_7 = (Assignment)cAlternatives_14.eContents().get(7);
		private final RuleCall cPredefinedFunctionsPredefinedFunctionsParserRuleCall_14_7_0 = (RuleCall)cPredefinedFunctionsAssignment_14_7.eContents().get(0);
		private final Group cGroup_14_8 = (Group)cAlternatives_14.eContents().get(8);
		private final RuleCall cEMITTerminalRuleCall_14_8_0 = (RuleCall)cGroup_14_8.eContents().get(0);
		private final Assignment cEventAssignment_14_8_1 = (Assignment)cGroup_14_8.eContents().get(1);
		private final CrossReference cEventEventCrossReference_14_8_1_0 = (CrossReference)cEventAssignment_14_8_1.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_14_8_1_0_1 = (RuleCall)cEventEventCrossReference_14_8_1_0.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_14_8_2 = (RuleCall)cGroup_14_8.eContents().get(2);
		private final Assignment cInputParamsEventAssignment_14_8_3 = (Assignment)cGroup_14_8.eContents().get(3);
		private final RuleCall cInputParamsEventInputParamParserRuleCall_14_8_3_0 = (RuleCall)cInputParamsEventAssignment_14_8_3.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_14_8_4 = (RuleCall)cGroup_14_8.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_14_8_5 = (RuleCall)cGroup_14_8.eContents().get(5);
		private final RuleCall cEOLINETerminalRuleCall_14_8_6 = (RuleCall)cGroup_14_8.eContents().get(6);
		private final RuleCall cCLOSEKEYTerminalRuleCall_15 = (RuleCall)cGroup.eContents().get(15);
		private final RuleCall cEOLINETerminalRuleCall_16 = (RuleCall)cGroup.eContents().get(16);
		
		//Clause:
		//      "function" name = Identifier OPENPARENTHESIS inputParams += InputParam* CLOSEPARENTHESIS constant=CONSTANT? virtual=VIRTUAL? visibilityAccess = Visibility  (personalizedModifier += [Modifier] (OPENPARENTHESIS inputParamsModifier += InputParam* CLOSEPARENTHESIS)?)*  predefinedModifier=InputModifier?  override=OverrideModifier?
		//      (RETURNS OPENPARENTHESIS outputParams += OutputParam* CLOSEPARENTHESIS)? OPENKEY EOLINE?
		//               (restriction += RestrictionClause  | conditions += Condition | properties += Properties | mappingProperties += Mapping  | undeterminedloops += UnDeterminedLoop  | determinedloops += ForLoop
		//                | expressions += Expression EOLINE? | predefinedFunctions += PredefinedFunctions | (EMIT event += [Event]+ OPENPARENTHESIS inputParamsEvent+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?)
		//           )*
		//      CLOSEKEY EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"function" name = Identifier OPENPARENTHESIS inputParams += InputParam* CLOSEPARENTHESIS constant=CONSTANT? virtual=VIRTUAL? visibilityAccess = Visibility  (personalizedModifier += [Modifier] (OPENPARENTHESIS inputParamsModifier += InputParam* CLOSEPARENTHESIS)?)*  predefinedModifier=InputModifier?  override=OverrideModifier?
		//(RETURNS OPENPARENTHESIS outputParams += OutputParam* CLOSEPARENTHESIS)? OPENKEY EOLINE?
		//         (restriction += RestrictionClause  | conditions += Condition | properties += Properties | mappingProperties += Mapping  | undeterminedloops += UnDeterminedLoop  | determinedloops += ForLoop
		//          | expressions += Expression EOLINE? | predefinedFunctions += PredefinedFunctions | (EMIT event += [Event]+ OPENPARENTHESIS inputParamsEvent+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?)
		//     )*
		//CLOSEKEY EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name = Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_2() { return cOPENPARENTHESISTerminalRuleCall_2; }
		
		//inputParams += InputParam*
		public Assignment getInputParamsAssignment_3() { return cInputParamsAssignment_3; }
		
		//InputParam
		public RuleCall getInputParamsInputParamParserRuleCall_3_0() { return cInputParamsInputParamParserRuleCall_3_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_4() { return cCLOSEPARENTHESISTerminalRuleCall_4; }
		
		//constant=CONSTANT?
		public Assignment getConstantAssignment_5() { return cConstantAssignment_5; }
		
		//CONSTANT
		public RuleCall getConstantCONSTANTTerminalRuleCall_5_0() { return cConstantCONSTANTTerminalRuleCall_5_0; }
		
		//virtual=VIRTUAL?
		public Assignment getVirtualAssignment_6() { return cVirtualAssignment_6; }
		
		//VIRTUAL
		public RuleCall getVirtualVIRTUALTerminalRuleCall_6_0() { return cVirtualVIRTUALTerminalRuleCall_6_0; }
		
		//visibilityAccess = Visibility
		public Assignment getVisibilityAccessAssignment_7() { return cVisibilityAccessAssignment_7; }
		
		//Visibility
		public RuleCall getVisibilityAccessVisibilityEnumRuleCall_7_0() { return cVisibilityAccessVisibilityEnumRuleCall_7_0; }
		
		//(personalizedModifier += [Modifier] (OPENPARENTHESIS inputParamsModifier += InputParam* CLOSEPARENTHESIS)?)*
		public Group getGroup_8() { return cGroup_8; }
		
		//personalizedModifier += [Modifier]
		public Assignment getPersonalizedModifierAssignment_8_0() { return cPersonalizedModifierAssignment_8_0; }
		
		//[Modifier]
		public CrossReference getPersonalizedModifierModifierCrossReference_8_0_0() { return cPersonalizedModifierModifierCrossReference_8_0_0; }
		
		//ID
		public RuleCall getPersonalizedModifierModifierIDTerminalRuleCall_8_0_0_1() { return cPersonalizedModifierModifierIDTerminalRuleCall_8_0_0_1; }
		
		//(OPENPARENTHESIS inputParamsModifier += InputParam* CLOSEPARENTHESIS)?
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_8_1_0() { return cOPENPARENTHESISTerminalRuleCall_8_1_0; }
		
		//inputParamsModifier += InputParam*
		public Assignment getInputParamsModifierAssignment_8_1_1() { return cInputParamsModifierAssignment_8_1_1; }
		
		//InputParam
		public RuleCall getInputParamsModifierInputParamParserRuleCall_8_1_1_0() { return cInputParamsModifierInputParamParserRuleCall_8_1_1_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_8_1_2() { return cCLOSEPARENTHESISTerminalRuleCall_8_1_2; }
		
		//predefinedModifier=InputModifier?
		public Assignment getPredefinedModifierAssignment_9() { return cPredefinedModifierAssignment_9; }
		
		//InputModifier
		public RuleCall getPredefinedModifierInputModifierEnumRuleCall_9_0() { return cPredefinedModifierInputModifierEnumRuleCall_9_0; }
		
		//override=OverrideModifier?
		public Assignment getOverrideAssignment_10() { return cOverrideAssignment_10; }
		
		//OverrideModifier
		public RuleCall getOverrideOverrideModifierParserRuleCall_10_0() { return cOverrideOverrideModifierParserRuleCall_10_0; }
		
		//(RETURNS OPENPARENTHESIS outputParams += OutputParam* CLOSEPARENTHESIS)?
		public Group getGroup_11() { return cGroup_11; }
		
		//RETURNS
		public RuleCall getRETURNSTerminalRuleCall_11_0() { return cRETURNSTerminalRuleCall_11_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_11_1() { return cOPENPARENTHESISTerminalRuleCall_11_1; }
		
		//outputParams += OutputParam*
		public Assignment getOutputParamsAssignment_11_2() { return cOutputParamsAssignment_11_2; }
		
		//OutputParam
		public RuleCall getOutputParamsOutputParamParserRuleCall_11_2_0() { return cOutputParamsOutputParamParserRuleCall_11_2_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_11_3() { return cCLOSEPARENTHESISTerminalRuleCall_11_3; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_12() { return cOPENKEYTerminalRuleCall_12; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_13() { return cEOLINETerminalRuleCall_13; }
		
		//    (restriction += RestrictionClause  | conditions += Condition | properties += Properties | mappingProperties += Mapping  | undeterminedloops += UnDeterminedLoop  | determinedloops += ForLoop
		//     | expressions += Expression EOLINE? | predefinedFunctions += PredefinedFunctions | (EMIT event += [Event]+ OPENPARENTHESIS inputParamsEvent+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?)
		//)*
		public Alternatives getAlternatives_14() { return cAlternatives_14; }
		
		//restriction += RestrictionClause
		public Assignment getRestrictionAssignment_14_0() { return cRestrictionAssignment_14_0; }
		
		//RestrictionClause
		public RuleCall getRestrictionRestrictionClauseParserRuleCall_14_0_0() { return cRestrictionRestrictionClauseParserRuleCall_14_0_0; }
		
		//conditions += Condition
		public Assignment getConditionsAssignment_14_1() { return cConditionsAssignment_14_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_14_1_0() { return cConditionsConditionParserRuleCall_14_1_0; }
		
		//properties += Properties
		public Assignment getPropertiesAssignment_14_2() { return cPropertiesAssignment_14_2; }
		
		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_14_2_0() { return cPropertiesPropertiesParserRuleCall_14_2_0; }
		
		//mappingProperties += Mapping
		public Assignment getMappingPropertiesAssignment_14_3() { return cMappingPropertiesAssignment_14_3; }
		
		//Mapping
		public RuleCall getMappingPropertiesMappingParserRuleCall_14_3_0() { return cMappingPropertiesMappingParserRuleCall_14_3_0; }
		
		//undeterminedloops += UnDeterminedLoop
		public Assignment getUndeterminedloopsAssignment_14_4() { return cUndeterminedloopsAssignment_14_4; }
		
		//UnDeterminedLoop
		public RuleCall getUndeterminedloopsUnDeterminedLoopParserRuleCall_14_4_0() { return cUndeterminedloopsUnDeterminedLoopParserRuleCall_14_4_0; }
		
		//determinedloops += ForLoop
		public Assignment getDeterminedloopsAssignment_14_5() { return cDeterminedloopsAssignment_14_5; }
		
		//ForLoop
		public RuleCall getDeterminedloopsForLoopParserRuleCall_14_5_0() { return cDeterminedloopsForLoopParserRuleCall_14_5_0; }
		
		//expressions += Expression EOLINE?
		public Group getGroup_14_6() { return cGroup_14_6; }
		
		//expressions += Expression
		public Assignment getExpressionsAssignment_14_6_0() { return cExpressionsAssignment_14_6_0; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_14_6_0_0() { return cExpressionsExpressionParserRuleCall_14_6_0_0; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_14_6_1() { return cEOLINETerminalRuleCall_14_6_1; }
		
		//predefinedFunctions += PredefinedFunctions
		public Assignment getPredefinedFunctionsAssignment_14_7() { return cPredefinedFunctionsAssignment_14_7; }
		
		//PredefinedFunctions
		public RuleCall getPredefinedFunctionsPredefinedFunctionsParserRuleCall_14_7_0() { return cPredefinedFunctionsPredefinedFunctionsParserRuleCall_14_7_0; }
		
		//(EMIT event += [Event]+ OPENPARENTHESIS inputParamsEvent+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?)
		public Group getGroup_14_8() { return cGroup_14_8; }
		
		//EMIT
		public RuleCall getEMITTerminalRuleCall_14_8_0() { return cEMITTerminalRuleCall_14_8_0; }
		
		//event += [Event]+
		public Assignment getEventAssignment_14_8_1() { return cEventAssignment_14_8_1; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_14_8_1_0() { return cEventEventCrossReference_14_8_1_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_14_8_1_0_1() { return cEventEventIDTerminalRuleCall_14_8_1_0_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_14_8_2() { return cOPENPARENTHESISTerminalRuleCall_14_8_2; }
		
		//inputParamsEvent+=InputParam*
		public Assignment getInputParamsEventAssignment_14_8_3() { return cInputParamsEventAssignment_14_8_3; }
		
		//InputParam
		public RuleCall getInputParamsEventInputParamParserRuleCall_14_8_3_0() { return cInputParamsEventInputParamParserRuleCall_14_8_3_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_14_8_4() { return cCLOSEPARENTHESISTerminalRuleCall_14_8_4; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_14_8_5() { return cSEMICOLONTerminalRuleCall_14_8_5; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_14_8_6() { return cEOLINETerminalRuleCall_14_8_6; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_15() { return cCLOSEKEYTerminalRuleCall_15; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_16() { return cEOLINETerminalRuleCall_16; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cNegationExpressionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cTypeCastingExpressionParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cCreateObjectExpressionParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final RuleCall cUncheckedParserRuleCall_0_4_0 = (RuleCall)cGroup_0_4.eContents().get(0);
		private final RuleCall cTupleExpressionParserRuleCall_0_4_1 = (RuleCall)cGroup_0_4.eContents().get(1);
		private final RuleCall cReturnExpressionParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cComparationExpressionParserRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cArithmeticalComparationExpressionParserRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cArithmeticalExpressionParserRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cLogicalComparationExpressionParserRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final RuleCall cIncrementLoopExpressionParserRuleCall_0_10 = (RuleCall)cAlternatives_0.eContents().get(10);
		private final RuleCall cDecrementLoopExpressionParserRuleCall_0_11 = (RuleCall)cAlternatives_0.eContents().get(11);
		private final RuleCall cTimeExpressionParserRuleCall_0_12 = (RuleCall)cAlternatives_0.eContents().get(12);
		private final RuleCall cShiftExpressionParserRuleCall_0_13 = (RuleCall)cAlternatives_0.eContents().get(13);
		private final RuleCall cRevertExpressionParserRuleCall_0_14 = (RuleCall)cAlternatives_0.eContents().get(14);
		private final RuleCall cBitwiseExpressionParserRuleCall_0_15 = (RuleCall)cAlternatives_0.eContents().get(15);
		private final RuleCall cAssignExpressionTupleParserRuleCall_0_16 = (RuleCall)cAlternatives_0.eContents().get(16);
		private final RuleCall cAssignExpressionParserRuleCall_0_17 = (RuleCall)cAlternatives_0.eContents().get(17);
		private final RuleCall cVarExpressionParserRuleCall_0_18 = (RuleCall)cAlternatives_0.eContents().get(18);
		private final RuleCall cCallFunctionExpressionParserRuleCall_0_19 = (RuleCall)cAlternatives_0.eContents().get(19);
		private final RuleCall cBracketExpressionParserRuleCall_0_20 = (RuleCall)cAlternatives_0.eContents().get(20);
		private final RuleCall cAssemblyExpressionParserRuleCall_0_21 = (RuleCall)cAlternatives_0.eContents().get(21);
		private final RuleCall cDelimiterExpressionParserRuleCall_0_22 = (RuleCall)cAlternatives_0.eContents().get(22);
		private final RuleCall cDeleteExpressionParserRuleCall_0_23 = (RuleCall)cAlternatives_0.eContents().get(23);
		private final RuleCall cMSGVariablesParserRuleCall_0_24 = (RuleCall)cAlternatives_0.eContents().get(24);
		private final RuleCall cParenthesisExpressionParserRuleCall_0_25 = (RuleCall)cAlternatives_0.eContents().get(25);
		private final RuleCall cPayableExpressionParserRuleCall_0_26 = (RuleCall)cAlternatives_0.eContents().get(26);
		private final RuleCall cSEMICOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Expression returns ecore::EString:
		//    (NegationExpression|SyntaxExpression|TypeCastingExpression|CreateObjectExpression|Unchecked
		//    TupleExpression|ReturnExpression|ComparationExpression|ArithmeticalComparationExpression|
		//    ArithmeticalExpression|LogicalComparationExpression|IncrementLoopExpression|
		//    DecrementLoopExpression|TimeExpression|ShiftExpression|RevertExpression|
		//    BitwiseExpression|AssignExpressionTuple|AssignExpression|VarExpression|CallFunctionExpression|
		//    BracketExpression|AssemblyExpression|DelimiterExpression|DeleteExpression|MSGVariables|ParenthesisExpression|PayableExpression) SEMICOLON?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(NegationExpression|SyntaxExpression|TypeCastingExpression|CreateObjectExpression|Unchecked
		//TupleExpression|ReturnExpression|ComparationExpression|ArithmeticalComparationExpression|
		//ArithmeticalExpression|LogicalComparationExpression|IncrementLoopExpression|
		//DecrementLoopExpression|TimeExpression|ShiftExpression|RevertExpression|
		//BitwiseExpression|AssignExpressionTuple|AssignExpression|VarExpression|CallFunctionExpression|
		//BracketExpression|AssemblyExpression|DelimiterExpression|DeleteExpression|MSGVariables|ParenthesisExpression|PayableExpression) SEMICOLON?
		public Group getGroup() { return cGroup; }
		
		//(NegationExpression|SyntaxExpression|TypeCastingExpression|CreateObjectExpression|Unchecked
		//TupleExpression|ReturnExpression|ComparationExpression|ArithmeticalComparationExpression|
		//ArithmeticalExpression|LogicalComparationExpression|IncrementLoopExpression|
		//DecrementLoopExpression|TimeExpression|ShiftExpression|RevertExpression|
		//BitwiseExpression|AssignExpressionTuple|AssignExpression|VarExpression|CallFunctionExpression|
		//BracketExpression|AssemblyExpression|DelimiterExpression|DeleteExpression|MSGVariables|ParenthesisExpression|PayableExpression)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//NegationExpression
		public RuleCall getNegationExpressionParserRuleCall_0_0() { return cNegationExpressionParserRuleCall_0_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_0_1() { return cSyntaxExpressionParserRuleCall_0_1; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_0_2() { return cTypeCastingExpressionParserRuleCall_0_2; }
		
		//CreateObjectExpression
		public RuleCall getCreateObjectExpressionParserRuleCall_0_3() { return cCreateObjectExpressionParserRuleCall_0_3; }
		
		//Unchecked
		//    TupleExpression
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//Unchecked
		public RuleCall getUncheckedParserRuleCall_0_4_0() { return cUncheckedParserRuleCall_0_4_0; }
		
		//TupleExpression
		public RuleCall getTupleExpressionParserRuleCall_0_4_1() { return cTupleExpressionParserRuleCall_0_4_1; }
		
		//ReturnExpression
		public RuleCall getReturnExpressionParserRuleCall_0_5() { return cReturnExpressionParserRuleCall_0_5; }
		
		//ComparationExpression
		public RuleCall getComparationExpressionParserRuleCall_0_6() { return cComparationExpressionParserRuleCall_0_6; }
		
		//ArithmeticalComparationExpression
		public RuleCall getArithmeticalComparationExpressionParserRuleCall_0_7() { return cArithmeticalComparationExpressionParserRuleCall_0_7; }
		
		//ArithmeticalExpression
		public RuleCall getArithmeticalExpressionParserRuleCall_0_8() { return cArithmeticalExpressionParserRuleCall_0_8; }
		
		//LogicalComparationExpression
		public RuleCall getLogicalComparationExpressionParserRuleCall_0_9() { return cLogicalComparationExpressionParserRuleCall_0_9; }
		
		//IncrementLoopExpression
		public RuleCall getIncrementLoopExpressionParserRuleCall_0_10() { return cIncrementLoopExpressionParserRuleCall_0_10; }
		
		//DecrementLoopExpression
		public RuleCall getDecrementLoopExpressionParserRuleCall_0_11() { return cDecrementLoopExpressionParserRuleCall_0_11; }
		
		//TimeExpression
		public RuleCall getTimeExpressionParserRuleCall_0_12() { return cTimeExpressionParserRuleCall_0_12; }
		
		//ShiftExpression
		public RuleCall getShiftExpressionParserRuleCall_0_13() { return cShiftExpressionParserRuleCall_0_13; }
		
		//RevertExpression
		public RuleCall getRevertExpressionParserRuleCall_0_14() { return cRevertExpressionParserRuleCall_0_14; }
		
		//BitwiseExpression
		public RuleCall getBitwiseExpressionParserRuleCall_0_15() { return cBitwiseExpressionParserRuleCall_0_15; }
		
		//AssignExpressionTuple
		public RuleCall getAssignExpressionTupleParserRuleCall_0_16() { return cAssignExpressionTupleParserRuleCall_0_16; }
		
		//AssignExpression
		public RuleCall getAssignExpressionParserRuleCall_0_17() { return cAssignExpressionParserRuleCall_0_17; }
		
		//VarExpression
		public RuleCall getVarExpressionParserRuleCall_0_18() { return cVarExpressionParserRuleCall_0_18; }
		
		//CallFunctionExpression
		public RuleCall getCallFunctionExpressionParserRuleCall_0_19() { return cCallFunctionExpressionParserRuleCall_0_19; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_0_20() { return cBracketExpressionParserRuleCall_0_20; }
		
		//AssemblyExpression
		public RuleCall getAssemblyExpressionParserRuleCall_0_21() { return cAssemblyExpressionParserRuleCall_0_21; }
		
		//DelimiterExpression
		public RuleCall getDelimiterExpressionParserRuleCall_0_22() { return cDelimiterExpressionParserRuleCall_0_22; }
		
		//DeleteExpression
		public RuleCall getDeleteExpressionParserRuleCall_0_23() { return cDeleteExpressionParserRuleCall_0_23; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_0_24() { return cMSGVariablesParserRuleCall_0_24; }
		
		//ParenthesisExpression
		public RuleCall getParenthesisExpressionParserRuleCall_0_25() { return cParenthesisExpressionParserRuleCall_0_25; }
		
		//PayableExpression
		public RuleCall getPayableExpressionParserRuleCall_0_26() { return cPayableExpressionParserRuleCall_0_26; }
		
		//SEMICOLON?
		public RuleCall getSEMICOLONTerminalRuleCall_1() { return cSEMICOLONTerminalRuleCall_1; }
	}
	public class DelimiterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.DelimiterExpression");
		private final Keyword c_Keyword = (Keyword)rule.eContents().get(1);
		
		//DelimiterExpression:
		//    "_;"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"_;"
		public Keyword get_Keyword() { return c_Keyword; }
	}
	public class HexadecimalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.HexadecimalExpression");
		private final RuleCall cHEXEXPRESSIONTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//HexadecimalExpression returns ecore::EString:
		//     HEXEXPRESSION
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//HEXEXPRESSION
		public RuleCall getHEXEXPRESSIONTerminalRuleCall() { return cHEXEXPRESSIONTerminalRuleCall; }
	}
	public class BoolValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.BoolValueExpression");
		private final RuleCall cBOOLVALUETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BoolValueExpression returns ecore::EString:
		//     BOOLVALUE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall() { return cBOOLVALUETerminalRuleCall; }
	}
	public class PredefinedFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.PredefinedFunctions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCryptographycFunctionsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelfdestructParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PredefinedFunctions returns ecore::EString:
		//     CryptographycFunctions|Selfdestruct
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CryptographycFunctions|Selfdestruct
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CryptographycFunctions
		public RuleCall getCryptographycFunctionsParserRuleCall_0() { return cCryptographycFunctionsParserRuleCall_0; }
		
		//Selfdestruct
		public RuleCall getSelfdestructParserRuleCall_1() { return cSelfdestructParserRuleCall_1; }
	}
	public class SelfdestructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Selfdestruct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfdestructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cMSGVariablesParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cBracketExpressionParserRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSEMICOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEOLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Selfdestruct:
		//    "selfdestruct" OPENPARENTHESIS (MSGVariables|Identifier|BracketExpression) CLOSEPARENTHESIS SEMICOLON EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"selfdestruct" OPENPARENTHESIS (MSGVariables|Identifier|BracketExpression) CLOSEPARENTHESIS SEMICOLON EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"selfdestruct"
		public Keyword getSelfdestructKeyword_0() { return cSelfdestructKeyword_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//(MSGVariables|Identifier|BracketExpression)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_2_0() { return cMSGVariablesParserRuleCall_2_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_1() { return cIdentifierParserRuleCall_2_1; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_2_2() { return cBracketExpressionParserRuleCall_2_2; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_3() { return cCLOSEPARENTHESISTerminalRuleCall_3; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_4() { return cSEMICOLONTerminalRuleCall_4; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_5() { return cEOLINETerminalRuleCall_5; }
	}
	public class CryptographycFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CryptographycFunctions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKeccackFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSha256ExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSha3ExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CryptographycFunctions:
		//    KeccackFunction|Sha256Expression|Sha3Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//KeccackFunction|Sha256Expression|Sha3Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KeccackFunction
		public RuleCall getKeccackFunctionParserRuleCall_0() { return cKeccackFunctionParserRuleCall_0; }
		
		//Sha256Expression
		public RuleCall getSha256ExpressionParserRuleCall_1() { return cSha256ExpressionParserRuleCall_1; }
		
		//Sha3Expression
		public RuleCall getSha3ExpressionParserRuleCall_2() { return cSha3ExpressionParserRuleCall_2; }
	}
	public class KeccackFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.KeccackFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKeccak256Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cTypeCastingExpressionParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cAbyExpressionParserRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final RuleCall cIdentifierParserRuleCall_2_3 = (RuleCall)cAlternatives_2.eContents().get(3);
		private final RuleCall cBracketExpressionParserRuleCall_2_4 = (RuleCall)cAlternatives_2.eContents().get(4);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//KeccackFunction:
		//    "keccak256" OPENPARENTHESIS (TypeCastingExpression|SyntaxExpression|AbyExpression|Identifier|BracketExpression) CLOSEPARENTHESIS  ('[' INT ']')*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"keccak256" OPENPARENTHESIS (TypeCastingExpression|SyntaxExpression|AbyExpression|Identifier|BracketExpression) CLOSEPARENTHESIS  ('[' INT ']')*
		public Group getGroup() { return cGroup; }
		
		//"keccak256"
		public Keyword getKeccak256Keyword_0() { return cKeccak256Keyword_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//(TypeCastingExpression|SyntaxExpression|AbyExpression|Identifier|BracketExpression)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_2_0() { return cTypeCastingExpressionParserRuleCall_2_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_2_1() { return cSyntaxExpressionParserRuleCall_2_1; }
		
		//AbyExpression
		public RuleCall getAbyExpressionParserRuleCall_2_2() { return cAbyExpressionParserRuleCall_2_2; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_3() { return cIdentifierParserRuleCall_2_3; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_2_4() { return cBracketExpressionParserRuleCall_2_4; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_3() { return cCLOSEPARENTHESISTerminalRuleCall_3; }
		
		//('[' INT ']')*
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_1() { return cINTTerminalRuleCall_4_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
	}
	public class Sha256ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Sha256Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSha256Keyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final RuleCall cIdentifierParserRuleCall_0_2_0 = (RuleCall)cGroup_0_2.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_0_2_1 = (RuleCall)cGroup_0_2.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSha256Keyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cAbyExpressionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//Sha256Expression:
		//    "sha256" OPENPARENTHESIS (Identifier COMMA?)* CLOSEPARENTHESIS  | "sha256" OPENPARENTHESIS AbyExpression CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"sha256" OPENPARENTHESIS (Identifier COMMA?)* CLOSEPARENTHESIS  | "sha256" OPENPARENTHESIS AbyExpression CLOSEPARENTHESIS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"sha256" OPENPARENTHESIS (Identifier COMMA?)* CLOSEPARENTHESIS
		public Group getGroup_0() { return cGroup_0; }
		
		//"sha256"
		public Keyword getSha256Keyword_0_0() { return cSha256Keyword_0_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_0_1() { return cOPENPARENTHESISTerminalRuleCall_0_1; }
		
		//(Identifier COMMA?)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_2_0() { return cIdentifierParserRuleCall_0_2_0; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_0_2_1() { return cCOMMATerminalRuleCall_0_2_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_0_3() { return cCLOSEPARENTHESISTerminalRuleCall_0_3; }
		
		//"sha256" OPENPARENTHESIS AbyExpression CLOSEPARENTHESIS
		public Group getGroup_1() { return cGroup_1; }
		
		//"sha256"
		public Keyword getSha256Keyword_1_0() { return cSha256Keyword_1_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1_1() { return cOPENPARENTHESISTerminalRuleCall_1_1; }
		
		//AbyExpression
		public RuleCall getAbyExpressionParserRuleCall_1_2() { return cAbyExpressionParserRuleCall_1_2; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_1_3() { return cCLOSEPARENTHESISTerminalRuleCall_1_3; }
	}
	public class Sha3ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Sha3Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSha3Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cIdentifierParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Sha3Expression:
		//    "sha3" OPENPARENTHESIS (Identifier COMMA?)* CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"sha3" OPENPARENTHESIS (Identifier COMMA?)* CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//"sha3"
		public Keyword getSha3Keyword_0() { return cSha3Keyword_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//(Identifier COMMA?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_0() { return cIdentifierParserRuleCall_2_0; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_2_1() { return cCOMMATerminalRuleCall_2_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_3() { return cCLOSEPARENTHESISTerminalRuleCall_3; }
	}
	public class AbyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.AbyExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbyEncodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbyEncodedPackedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAbyEncodeWithSelectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAbyEncodeWithSignatureParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAbyDecodeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AbyExpression:
		//    AbyEncode|AbyEncodedPacked|AbyEncodeWithSelector|AbyEncodeWithSignature|AbyDecode
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AbyEncode|AbyEncodedPacked|AbyEncodeWithSelector|AbyEncodeWithSignature|AbyDecode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AbyEncode
		public RuleCall getAbyEncodeParserRuleCall_0() { return cAbyEncodeParserRuleCall_0; }
		
		//AbyEncodedPacked
		public RuleCall getAbyEncodedPackedParserRuleCall_1() { return cAbyEncodedPackedParserRuleCall_1; }
		
		//AbyEncodeWithSelector
		public RuleCall getAbyEncodeWithSelectorParserRuleCall_2() { return cAbyEncodeWithSelectorParserRuleCall_2; }
		
		//AbyEncodeWithSignature
		public RuleCall getAbyEncodeWithSignatureParserRuleCall_3() { return cAbyEncodeWithSignatureParserRuleCall_3; }
		
		//AbyDecode
		public RuleCall getAbyDecodeParserRuleCall_4() { return cAbyDecodeParserRuleCall_4; }
	}
	public class AbyEncodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.AbyEncode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbiEncodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_2_0_0 = (RuleCall)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_2_0_1 = (RuleCall)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cMSGVariablesParserRuleCall_2_0_2 = (RuleCall)cAlternatives_2_0.eContents().get(2);
		private final RuleCall cSyntaxExpressionParserRuleCall_2_0_3 = (RuleCall)cAlternatives_2_0.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//AbyEncode:
		//    ("abi.encode") OPENPARENTHESIS ((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)* CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//("abi.encode") OPENPARENTHESIS ((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)* CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//("abi.encode")
		public Keyword getAbiEncodeKeyword_0() { return cAbiEncodeKeyword_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_0_0() { return cIdentifierParserRuleCall_2_0_0; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_2_0_1() { return cIdentifierValueExpressionParserRuleCall_2_0_1; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_2_0_2() { return cMSGVariablesParserRuleCall_2_0_2; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_2_0_3() { return cSyntaxExpressionParserRuleCall_2_0_3; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_2_1() { return cCOMMATerminalRuleCall_2_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_3() { return cCLOSEPARENTHESISTerminalRuleCall_3; }
	}
	public class AbyEncodedPackedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.AbyEncodedPacked");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbiEncodePackedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_2_0_0 = (RuleCall)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_2_0_1 = (RuleCall)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cMSGVariablesParserRuleCall_2_0_2 = (RuleCall)cAlternatives_2_0.eContents().get(2);
		private final RuleCall cSyntaxExpressionParserRuleCall_2_0_3 = (RuleCall)cAlternatives_2_0.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//AbyEncodedPacked:
		//    ("abi.encodePacked") OPENPARENTHESIS ((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)* CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//("abi.encodePacked") OPENPARENTHESIS ((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)* CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//("abi.encodePacked")
		public Keyword getAbiEncodePackedKeyword_0() { return cAbiEncodePackedKeyword_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_0_0() { return cIdentifierParserRuleCall_2_0_0; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_2_0_1() { return cIdentifierValueExpressionParserRuleCall_2_0_1; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_2_0_2() { return cMSGVariablesParserRuleCall_2_0_2; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_2_0_3() { return cSyntaxExpressionParserRuleCall_2_0_3; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_2_1() { return cCOMMATerminalRuleCall_2_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_3() { return cCLOSEPARENTHESISTerminalRuleCall_3; }
	}
	public class AbyDecodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.AbyDecode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbiDecodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_2_0_0 = (RuleCall)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_2_0_1 = (RuleCall)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cMSGVariablesParserRuleCall_2_0_2 = (RuleCall)cAlternatives_2_0.eContents().get(2);
		private final RuleCall cSyntaxExpressionParserRuleCall_2_0_3 = (RuleCall)cAlternatives_2_0.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//AbyDecode:
		//    ("abi.decode") OPENPARENTHESIS ((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)* CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//("abi.decode") OPENPARENTHESIS ((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)* CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//("abi.decode")
		public Keyword getAbiDecodeKeyword_0() { return cAbiDecodeKeyword_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_0_0() { return cIdentifierParserRuleCall_2_0_0; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_2_0_1() { return cIdentifierValueExpressionParserRuleCall_2_0_1; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_2_0_2() { return cMSGVariablesParserRuleCall_2_0_2; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_2_0_3() { return cSyntaxExpressionParserRuleCall_2_0_3; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_2_1() { return cCOMMATerminalRuleCall_2_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_3() { return cCLOSEPARENTHESISTerminalRuleCall_3; }
	}
	public class AbyEncodeWithSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.AbyEncodeWithSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbiEncodeWithSignatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_2_0_0 = (RuleCall)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_2_0_1 = (RuleCall)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cMSGVariablesParserRuleCall_2_0_2 = (RuleCall)cAlternatives_2_0.eContents().get(2);
		private final RuleCall cSyntaxExpressionParserRuleCall_2_0_3 = (RuleCall)cAlternatives_2_0.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//AbyEncodeWithSignature:
		//    ("abi.encodeWithSignature") OPENPARENTHESIS ((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)* CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//("abi.encodeWithSignature") OPENPARENTHESIS ((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)* CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//("abi.encodeWithSignature")
		public Keyword getAbiEncodeWithSignatureKeyword_0() { return cAbiEncodeWithSignatureKeyword_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_0_0() { return cIdentifierParserRuleCall_2_0_0; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_2_0_1() { return cIdentifierValueExpressionParserRuleCall_2_0_1; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_2_0_2() { return cMSGVariablesParserRuleCall_2_0_2; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_2_0_3() { return cSyntaxExpressionParserRuleCall_2_0_3; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_2_1() { return cCOMMATerminalRuleCall_2_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_3() { return cCLOSEPARENTHESISTerminalRuleCall_3; }
	}
	public class AbyEncodeWithSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.AbyEncodeWithSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbiEncodeWithSelectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_2_0_0 = (RuleCall)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_2_0_1 = (RuleCall)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cMSGVariablesParserRuleCall_2_0_2 = (RuleCall)cAlternatives_2_0.eContents().get(2);
		private final RuleCall cSyntaxExpressionParserRuleCall_2_0_3 = (RuleCall)cAlternatives_2_0.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//AbyEncodeWithSelector:
		//    ("abi.encodeWithSelector") OPENPARENTHESIS ((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)* CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//("abi.encodeWithSelector") OPENPARENTHESIS ((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)* CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//("abi.encodeWithSelector")
		public Keyword getAbiEncodeWithSelectorKeyword_0() { return cAbiEncodeWithSelectorKeyword_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_0_0() { return cIdentifierParserRuleCall_2_0_0; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_2_0_1() { return cIdentifierValueExpressionParserRuleCall_2_0_1; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_2_0_2() { return cMSGVariablesParserRuleCall_2_0_2; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_2_0_3() { return cSyntaxExpressionParserRuleCall_2_0_3; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_2_1() { return cCOMMATerminalRuleCall_2_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_3() { return cCLOSEPARENTHESISTerminalRuleCall_3; }
	}
	public class AssignExpressionTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.AssignExpressionTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSingularTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cAssignValueExpressionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//AssignExpressionTuple returns ecore::EString:
		//    OPENPARENTHESIS (SingularType? Identifier COMMA?)+ CLOSEPARENTHESIS AssignValueExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OPENPARENTHESIS (SingularType? Identifier COMMA?)+ CLOSEPARENTHESIS AssignValueExpression
		public Group getGroup() { return cGroup; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_0() { return cOPENPARENTHESISTerminalRuleCall_0; }
		
		//(SingularType? Identifier COMMA?)+
		public Group getGroup_1() { return cGroup_1; }
		
		//SingularType?
		public RuleCall getSingularTypeParserRuleCall_1_0() { return cSingularTypeParserRuleCall_1_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1() { return cIdentifierParserRuleCall_1_1; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_1_2() { return cCOMMATerminalRuleCall_1_2; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_2() { return cCLOSEPARENTHESISTerminalRuleCall_2; }
		
		//AssignValueExpression
		public RuleCall getAssignValueExpressionParserRuleCall_3() { return cAssignValueExpressionParserRuleCall_3; }
	}
	public class UncheckedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Unchecked");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUncheckedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENKEYTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cCLOSEKEYTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Unchecked:
		//    "unchecked" OPENKEY Expression? CLOSEKEY
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"unchecked" OPENKEY Expression? CLOSEKEY
		public Group getGroup() { return cGroup; }
		
		//"unchecked"
		public Keyword getUncheckedKeyword_0() { return cUncheckedKeyword_0; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_1() { return cOPENKEYTerminalRuleCall_1; }
		
		//Expression?
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_3() { return cCLOSEKEYTerminalRuleCall_3; }
	}
	public class AssignExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.AssignExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cTypeCastingExpressionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cBracketExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final RuleCall cIdentifierParserRuleCall_0_2_0 = (RuleCall)cGroup_0_2.eContents().get(0);
		private final Alternatives cAlternatives_0_2_1 = (Alternatives)cGroup_0_2.eContents().get(1);
		private final Keyword cMemoryKeyword_0_2_1_0 = (Keyword)cAlternatives_0_2_1.eContents().get(0);
		private final Keyword cStorageKeyword_0_2_1_1 = (Keyword)cAlternatives_0_2_1.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0_2_2 = (RuleCall)cGroup_0_2.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_0_3_0 = (RuleCall)cGroup_0_3.eContents().get(0);
		private final Alternatives cAlternatives_0_3_1 = (Alternatives)cGroup_0_3.eContents().get(1);
		private final Keyword cMemoryKeyword_0_3_1_0 = (Keyword)cAlternatives_0_3_1.eContents().get(0);
		private final Keyword cStorageKeyword_0_3_1_1 = (Keyword)cAlternatives_0_3_1.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0_3_2 = (RuleCall)cGroup_0_3.eContents().get(2);
		private final RuleCall cIdentifierDotExpressionParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cIdentifierParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cAssignValueExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//AssignExpression returns ecore::EString:
		//    (TypeCastingExpression |BracketExpression|Identifier ("memory"|"storage")? Identifier|IdentifierValueExpression ("memory"|"storage")? Identifier | IdentifierDotExpression |Identifier) AssignValueExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(TypeCastingExpression |BracketExpression|Identifier ("memory"|"storage")? Identifier|IdentifierValueExpression ("memory"|"storage")? Identifier | IdentifierDotExpression |Identifier) AssignValueExpression
		public Group getGroup() { return cGroup; }
		
		//(TypeCastingExpression |BracketExpression|Identifier ("memory"|"storage")? Identifier|IdentifierValueExpression ("memory"|"storage")? Identifier | IdentifierDotExpression |Identifier)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_0_0() { return cTypeCastingExpressionParserRuleCall_0_0; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_0_1() { return cBracketExpressionParserRuleCall_0_1; }
		
		//Identifier ("memory"|"storage")? Identifier
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_2_0() { return cIdentifierParserRuleCall_0_2_0; }
		
		//("memory"|"storage")?
		public Alternatives getAlternatives_0_2_1() { return cAlternatives_0_2_1; }
		
		//"memory"
		public Keyword getMemoryKeyword_0_2_1_0() { return cMemoryKeyword_0_2_1_0; }
		
		//"storage"
		public Keyword getStorageKeyword_0_2_1_1() { return cStorageKeyword_0_2_1_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_2_2() { return cIdentifierParserRuleCall_0_2_2; }
		
		//IdentifierValueExpression ("memory"|"storage")? Identifier
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_0_3_0() { return cIdentifierValueExpressionParserRuleCall_0_3_0; }
		
		//("memory"|"storage")?
		public Alternatives getAlternatives_0_3_1() { return cAlternatives_0_3_1; }
		
		//"memory"
		public Keyword getMemoryKeyword_0_3_1_0() { return cMemoryKeyword_0_3_1_0; }
		
		//"storage"
		public Keyword getStorageKeyword_0_3_1_1() { return cStorageKeyword_0_3_1_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_3_2() { return cIdentifierParserRuleCall_0_3_2; }
		
		//IdentifierDotExpression
		public RuleCall getIdentifierDotExpressionParserRuleCall_0_4() { return cIdentifierDotExpressionParserRuleCall_0_4; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_5() { return cIdentifierParserRuleCall_0_5; }
		
		//AssignValueExpression
		public RuleCall getAssignValueExpressionParserRuleCall_1() { return cAssignValueExpressionParserRuleCall_1; }
	}
	public class AssignValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.AssignValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cVerticalLineEqualsSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cCircumflexAccentEqualsSignKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cAmpersandEqualsSignKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cLessThanSignLessThanSignEqualsSignKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cPlusSignEqualsSignKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cHyphenMinusEqualsSignKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Keyword cAsteriskEqualsSignKeyword_0_8 = (Keyword)cAlternatives_0.eContents().get(8);
		private final Keyword cSolidusEqualsSignKeyword_0_9 = (Keyword)cAlternatives_0.eContents().get(9);
		private final Keyword cPercentSignEqualsSignKeyword_0_10 = (Keyword)cAlternatives_0.eContents().get(10);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1_0_1_0 = (RuleCall)cGroup_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Alternatives cAlternatives_1_0_1_1_0 = (Alternatives)cGroup_1_0_1_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_0_1_1_0_0 = (RuleCall)cAlternatives_1_0_1_1_0.eContents().get(0);
		private final RuleCall cBracketExpressionParserRuleCall_1_0_1_1_0_1 = (RuleCall)cAlternatives_1_0_1_1_0.eContents().get(1);
		private final RuleCall cIdentifierDotExpressionParserRuleCall_1_0_1_1_0_2 = (RuleCall)cAlternatives_1_0_1_1_0.eContents().get(2);
		private final RuleCall cMSGSENDERTerminalRuleCall_1_0_1_1_0_3 = (RuleCall)cAlternatives_1_0_1_1_0.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_1_0_1_1_1 = (RuleCall)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_1_0_1_2 = (RuleCall)cGroup_1_0_1.eContents().get(2);
		private final RuleCall cBOOLVALUETerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cTimeExpressionParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cCoinExpressionParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cSyntaxExpressionParserRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final RuleCall cNumberExpressionParserRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		private final RuleCall cArithmeticalExpressionParserRuleCall_1_6 = (RuleCall)cAlternatives_1.eContents().get(6);
		private final RuleCall cTypeCastingExpressionParserRuleCall_1_7 = (RuleCall)cAlternatives_1.eContents().get(7);
		private final RuleCall cTupleExpressionParserRuleCall_1_8 = (RuleCall)cAlternatives_1.eContents().get(8);
		private final RuleCall cCreateObjectExpressionParserRuleCall_1_9 = (RuleCall)cAlternatives_1.eContents().get(9);
		private final RuleCall cHexadecimalExpressionParserRuleCall_1_10 = (RuleCall)cAlternatives_1.eContents().get(10);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_1_11 = (RuleCall)cAlternatives_1.eContents().get(11);
		private final RuleCall cIdentifierDotExpressionParserRuleCall_1_12 = (RuleCall)cAlternatives_1.eContents().get(12);
		private final RuleCall cMSGVariablesParserRuleCall_1_13 = (RuleCall)cAlternatives_1.eContents().get(13);
		private final Keyword cNowKeyword_1_14 = (Keyword)cAlternatives_1.eContents().get(14);
		private final RuleCall cBracketExpressionParserRuleCall_1_15 = (RuleCall)cAlternatives_1.eContents().get(15);
		private final RuleCall cBCKTIMESTAMPTerminalRuleCall_1_16 = (RuleCall)cAlternatives_1.eContents().get(16);
		private final RuleCall cBCKNUMBERTerminalRuleCall_1_17 = (RuleCall)cAlternatives_1.eContents().get(17);
		private final RuleCall cPersonalizedTypeCompanyInicializationParserRuleCall_1_18 = (RuleCall)cAlternatives_1.eContents().get(18);
		private final RuleCall cPersonalizedTypeUserInicializationParserRuleCall_1_19 = (RuleCall)cAlternatives_1.eContents().get(19);
		private final RuleCall cNewPersonalizedTypeCompanyInicializationParserRuleCall_1_20 = (RuleCall)cAlternatives_1.eContents().get(20);
		private final RuleCall cNewPersonalizedTypeUserInicializationParserRuleCall_1_21 = (RuleCall)cAlternatives_1.eContents().get(21);
		private final RuleCall cArrayExpressionParserRuleCall_1_22 = (RuleCall)cAlternatives_1.eContents().get(22);
		
		//AssignValueExpression:
		//    ('=' | '|=' | '^=' | '&=' | '<<=' | '>>=' | '+=' | '-=' | '*=' | '/=' | '%=') (Identifier (OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression|MSGSENDER) COMMA?)* CLOSEPARENTHESIS)? |BOOLVALUE|TimeExpression|CoinExpression|SyntaxExpression|NumberExpression|ArithmeticalExpression|TypeCastingExpression|TupleExpression|CreateObjectExpression|HexadecimalExpression|ADDRESSEXPRESION| IdentifierDotExpression |MSGVariables|"now"|BracketExpression|BCKTIMESTAMP|BCKNUMBER|PersonalizedTypeCompanyInicialization|PersonalizedTypeUserInicialization|NewPersonalizedTypeCompanyInicialization|NewPersonalizedTypeUserInicialization|ArrayExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('=' | '|=' | '^=' | '&=' | '<<=' | '>>=' | '+=' | '-=' | '*=' | '/=' | '%=') (Identifier (OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression|MSGSENDER) COMMA?)* CLOSEPARENTHESIS)? |BOOLVALUE|TimeExpression|CoinExpression|SyntaxExpression|NumberExpression|ArithmeticalExpression|TypeCastingExpression|TupleExpression|CreateObjectExpression|HexadecimalExpression|ADDRESSEXPRESION| IdentifierDotExpression |MSGVariables|"now"|BracketExpression|BCKTIMESTAMP|BCKNUMBER|PersonalizedTypeCompanyInicialization|PersonalizedTypeUserInicialization|NewPersonalizedTypeCompanyInicialization|NewPersonalizedTypeUserInicialization|ArrayExpression)
		public Group getGroup() { return cGroup; }
		
		//('=' | '|=' | '^=' | '&=' | '<<=' | '>>=' | '+=' | '-=' | '*=' | '/=' | '%=')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_0() { return cEqualsSignKeyword_0_0; }
		
		//'|='
		public Keyword getVerticalLineEqualsSignKeyword_0_1() { return cVerticalLineEqualsSignKeyword_0_1; }
		
		//'^='
		public Keyword getCircumflexAccentEqualsSignKeyword_0_2() { return cCircumflexAccentEqualsSignKeyword_0_2; }
		
		//'&='
		public Keyword getAmpersandEqualsSignKeyword_0_3() { return cAmpersandEqualsSignKeyword_0_3; }
		
		//'<<='
		public Keyword getLessThanSignLessThanSignEqualsSignKeyword_0_4() { return cLessThanSignLessThanSignEqualsSignKeyword_0_4; }
		
		//'>>='
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_0_5() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_0_5; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_0_6() { return cPlusSignEqualsSignKeyword_0_6; }
		
		//'-='
		public Keyword getHyphenMinusEqualsSignKeyword_0_7() { return cHyphenMinusEqualsSignKeyword_0_7; }
		
		//'*='
		public Keyword getAsteriskEqualsSignKeyword_0_8() { return cAsteriskEqualsSignKeyword_0_8; }
		
		//'/='
		public Keyword getSolidusEqualsSignKeyword_0_9() { return cSolidusEqualsSignKeyword_0_9; }
		
		//'%='
		public Keyword getPercentSignEqualsSignKeyword_0_10() { return cPercentSignEqualsSignKeyword_0_10; }
		
		//(Identifier (OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression|MSGSENDER) COMMA?)* CLOSEPARENTHESIS)? |BOOLVALUE|TimeExpression|CoinExpression|SyntaxExpression|NumberExpression|ArithmeticalExpression|TypeCastingExpression|TupleExpression|CreateObjectExpression|HexadecimalExpression|ADDRESSEXPRESION| IdentifierDotExpression |MSGVariables|"now"|BracketExpression|BCKTIMESTAMP|BCKNUMBER|PersonalizedTypeCompanyInicialization|PersonalizedTypeUserInicialization|NewPersonalizedTypeCompanyInicialization|NewPersonalizedTypeUserInicialization|ArrayExpression)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Identifier (OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression|MSGSENDER) COMMA?)* CLOSEPARENTHESIS)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_0_0() { return cIdentifierParserRuleCall_1_0_0; }
		
		//(OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression|MSGSENDER) COMMA?)* CLOSEPARENTHESIS)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1_0_1_0() { return cOPENPARENTHESISTerminalRuleCall_1_0_1_0; }
		
		//((Identifier|BracketExpression|IdentifierDotExpression|MSGSENDER) COMMA?)*
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//(Identifier|BracketExpression|IdentifierDotExpression|MSGSENDER)
		public Alternatives getAlternatives_1_0_1_1_0() { return cAlternatives_1_0_1_1_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_0_1_1_0_0() { return cIdentifierParserRuleCall_1_0_1_1_0_0; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_1_0_1_1_0_1() { return cBracketExpressionParserRuleCall_1_0_1_1_0_1; }
		
		//IdentifierDotExpression
		public RuleCall getIdentifierDotExpressionParserRuleCall_1_0_1_1_0_2() { return cIdentifierDotExpressionParserRuleCall_1_0_1_1_0_2; }
		
		//MSGSENDER
		public RuleCall getMSGSENDERTerminalRuleCall_1_0_1_1_0_3() { return cMSGSENDERTerminalRuleCall_1_0_1_1_0_3; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_1_0_1_1_1() { return cCOMMATerminalRuleCall_1_0_1_1_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_1_0_1_2() { return cCLOSEPARENTHESISTerminalRuleCall_1_0_1_2; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_1_1() { return cBOOLVALUETerminalRuleCall_1_1; }
		
		//TimeExpression
		public RuleCall getTimeExpressionParserRuleCall_1_2() { return cTimeExpressionParserRuleCall_1_2; }
		
		//CoinExpression
		public RuleCall getCoinExpressionParserRuleCall_1_3() { return cCoinExpressionParserRuleCall_1_3; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_1_4() { return cSyntaxExpressionParserRuleCall_1_4; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_1_5() { return cNumberExpressionParserRuleCall_1_5; }
		
		//ArithmeticalExpression
		public RuleCall getArithmeticalExpressionParserRuleCall_1_6() { return cArithmeticalExpressionParserRuleCall_1_6; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_1_7() { return cTypeCastingExpressionParserRuleCall_1_7; }
		
		//TupleExpression
		public RuleCall getTupleExpressionParserRuleCall_1_8() { return cTupleExpressionParserRuleCall_1_8; }
		
		//CreateObjectExpression
		public RuleCall getCreateObjectExpressionParserRuleCall_1_9() { return cCreateObjectExpressionParserRuleCall_1_9; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_1_10() { return cHexadecimalExpressionParserRuleCall_1_10; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_1_11() { return cADDRESSEXPRESIONTerminalRuleCall_1_11; }
		
		//IdentifierDotExpression
		public RuleCall getIdentifierDotExpressionParserRuleCall_1_12() { return cIdentifierDotExpressionParserRuleCall_1_12; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_1_13() { return cMSGVariablesParserRuleCall_1_13; }
		
		//"now"
		public Keyword getNowKeyword_1_14() { return cNowKeyword_1_14; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_1_15() { return cBracketExpressionParserRuleCall_1_15; }
		
		//BCKTIMESTAMP
		public RuleCall getBCKTIMESTAMPTerminalRuleCall_1_16() { return cBCKTIMESTAMPTerminalRuleCall_1_16; }
		
		//BCKNUMBER
		public RuleCall getBCKNUMBERTerminalRuleCall_1_17() { return cBCKNUMBERTerminalRuleCall_1_17; }
		
		//PersonalizedTypeCompanyInicialization
		public RuleCall getPersonalizedTypeCompanyInicializationParserRuleCall_1_18() { return cPersonalizedTypeCompanyInicializationParserRuleCall_1_18; }
		
		//PersonalizedTypeUserInicialization
		public RuleCall getPersonalizedTypeUserInicializationParserRuleCall_1_19() { return cPersonalizedTypeUserInicializationParserRuleCall_1_19; }
		
		//NewPersonalizedTypeCompanyInicialization
		public RuleCall getNewPersonalizedTypeCompanyInicializationParserRuleCall_1_20() { return cNewPersonalizedTypeCompanyInicializationParserRuleCall_1_20; }
		
		//NewPersonalizedTypeUserInicialization
		public RuleCall getNewPersonalizedTypeUserInicializationParserRuleCall_1_21() { return cNewPersonalizedTypeUserInicializationParserRuleCall_1_21; }
		
		//ArrayExpression
		public RuleCall getArrayExpressionParserRuleCall_1_22() { return cArrayExpressionParserRuleCall_1_22; }
	}
	public class ArrayExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.ArrayExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cTypeCastingExpressionParserRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cNumberExpressionParserRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_1_0_4 = (RuleCall)cAlternatives_1_0.eContents().get(4);
		private final RuleCall cBOOLVALUETerminalRuleCall_1_0_5 = (RuleCall)cAlternatives_1_0.eContents().get(5);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_1_0_6 = (RuleCall)cAlternatives_1_0.eContents().get(6);
		private final RuleCall cHEXEXPRESSIONTerminalRuleCall_1_0_7 = (RuleCall)cAlternatives_1_0.eContents().get(7);
		private final RuleCall cArithmeticalExpressionParserRuleCall_1_0_8 = (RuleCall)cAlternatives_1_0.eContents().get(8);
		private final RuleCall cCOMMATerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArrayExpression:
		//    '[' ((Identifier|IdentifierValueExpression|TypeCastingExpression|NumberExpression|STRING|BOOLVALUE|ADDRESSEXPRESION|HEXEXPRESSION|ArithmeticalExpression) COMMA? )*  ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' ((Identifier|IdentifierValueExpression|TypeCastingExpression|NumberExpression|STRING|BOOLVALUE|ADDRESSEXPRESION|HEXEXPRESSION|ArithmeticalExpression) COMMA? )*  ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//((Identifier|IdentifierValueExpression|TypeCastingExpression|NumberExpression|STRING|BOOLVALUE|ADDRESSEXPRESION|HEXEXPRESSION|ArithmeticalExpression) COMMA? )*
		public Group getGroup_1() { return cGroup_1; }
		
		//(Identifier|IdentifierValueExpression|TypeCastingExpression|NumberExpression|STRING|BOOLVALUE|ADDRESSEXPRESION|HEXEXPRESSION|ArithmeticalExpression)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_0_0() { return cIdentifierParserRuleCall_1_0_0; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_1_0_1() { return cIdentifierValueExpressionParserRuleCall_1_0_1; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_1_0_2() { return cTypeCastingExpressionParserRuleCall_1_0_2; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_1_0_3() { return cNumberExpressionParserRuleCall_1_0_3; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_0_4() { return cSTRINGTerminalRuleCall_1_0_4; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_1_0_5() { return cBOOLVALUETerminalRuleCall_1_0_5; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_1_0_6() { return cADDRESSEXPRESIONTerminalRuleCall_1_0_6; }
		
		//HEXEXPRESSION
		public RuleCall getHEXEXPRESSIONTerminalRuleCall_1_0_7() { return cHEXEXPRESSIONTerminalRuleCall_1_0_7; }
		
		//ArithmeticalExpression
		public RuleCall getArithmeticalExpressionParserRuleCall_1_0_8() { return cArithmeticalExpressionParserRuleCall_1_0_8; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_1_1() { return cCOMMATerminalRuleCall_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class CoinExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CoinExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cFLOATTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEtherKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cGweiKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cPweiKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cWeiKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cFinneyKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cSzaboKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		
		//CoinExpression returns ecore::EString:
		//    (INT|FLOAT|Identifier) ("ether" | "gwei" | "pwei" | "wei" | "finney" | "szabo" )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(INT|FLOAT|Identifier) ("ether" | "gwei" | "pwei" | "wei" | "finney" | "szabo" )
		public Group getGroup() { return cGroup; }
		
		//(INT|FLOAT|Identifier)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_0_1() { return cFLOATTerminalRuleCall_0_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_2() { return cIdentifierParserRuleCall_0_2; }
		
		//("ether" | "gwei" | "pwei" | "wei" | "finney" | "szabo" )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"ether"
		public Keyword getEtherKeyword_1_0() { return cEtherKeyword_1_0; }
		
		//"gwei"
		public Keyword getGweiKeyword_1_1() { return cGweiKeyword_1_1; }
		
		//"pwei"
		public Keyword getPweiKeyword_1_2() { return cPweiKeyword_1_2; }
		
		//"wei"
		public Keyword getWeiKeyword_1_3() { return cWeiKeyword_1_3; }
		
		//"finney"
		public Keyword getFinneyKeyword_1_4() { return cFinneyKeyword_1_4; }
		
		//"szabo"
		public Keyword getSzaboKeyword_1_5() { return cSzaboKeyword_1_5; }
	}
	public class CreateObjectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CreateObjectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_4_0_0 = (RuleCall)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cHexadecimalExpressionParserRuleCall_4_0_1 = (RuleCall)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_4_0_2 = (RuleCall)cAlternatives_4_0.eContents().get(2);
		private final RuleCall cNumberExpressionParserRuleCall_4_0_3 = (RuleCall)cAlternatives_4_0.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_4_0_4 = (RuleCall)cAlternatives_4_0.eContents().get(4);
		private final Keyword cNowKeyword_4_0_5 = (Keyword)cAlternatives_4_0.eContents().get(5);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_4_0_6 = (RuleCall)cAlternatives_4_0.eContents().get(6);
		private final RuleCall cBracketExpressionParserRuleCall_4_0_7 = (RuleCall)cAlternatives_4_0.eContents().get(7);
		private final RuleCall cMSGVariablesParserRuleCall_4_0_8 = (RuleCall)cAlternatives_4_0.eContents().get(8);
		private final RuleCall cCOMMATerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//CreateObjectExpression returns ecore::EString:
		//    NEW (Identifier) ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NEW (Identifier) ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//NEW
		public RuleCall getNEWTerminalRuleCall_0() { return cNEWTerminalRuleCall_0; }
		
		//(Identifier)
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }
		
		//('[' INT? ']')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_3() { return cOPENPARENTHESISTerminalRuleCall_3; }
		
		//((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)*
		public Group getGroup_4() { return cGroup_4; }
		
		//(SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables)
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_4_0_0() { return cSyntaxExpressionParserRuleCall_4_0_0; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_4_0_1() { return cHexadecimalExpressionParserRuleCall_4_0_1; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_4_0_2() { return cADDRESSEXPRESIONTerminalRuleCall_4_0_2; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_4_0_3() { return cNumberExpressionParserRuleCall_4_0_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_4_0_4() { return cIdentifierParserRuleCall_4_0_4; }
		
		//"now"
		public Keyword getNowKeyword_4_0_5() { return cNowKeyword_4_0_5; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_4_0_6() { return cIdentifierValueExpressionParserRuleCall_4_0_6; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_4_0_7() { return cBracketExpressionParserRuleCall_4_0_7; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_4_0_8() { return cMSGVariablesParserRuleCall_4_0_8; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_4_1() { return cCOMMATerminalRuleCall_4_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_5() { return cCLOSEPARENTHESISTerminalRuleCall_5; }
	}
	public class CreateAddressObjectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CreateAddressObjectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cAddressKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_4_0_0 = (RuleCall)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cHexadecimalExpressionParserRuleCall_4_0_1 = (RuleCall)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_4_0_2 = (RuleCall)cAlternatives_4_0.eContents().get(2);
		private final RuleCall cNumberExpressionParserRuleCall_4_0_3 = (RuleCall)cAlternatives_4_0.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_4_0_4 = (RuleCall)cAlternatives_4_0.eContents().get(4);
		private final Keyword cNowKeyword_4_0_5 = (Keyword)cAlternatives_4_0.eContents().get(5);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_4_0_6 = (RuleCall)cAlternatives_4_0.eContents().get(6);
		private final RuleCall cBracketExpressionParserRuleCall_4_0_7 = (RuleCall)cAlternatives_4_0.eContents().get(7);
		private final RuleCall cMSGVariablesParserRuleCall_4_0_8 = (RuleCall)cAlternatives_4_0.eContents().get(8);
		private final RuleCall cCOMMATerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//CreateAddressObjectExpression returns ecore::EString:
		//    NEW ("address") ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NEW ("address") ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//NEW
		public RuleCall getNEWTerminalRuleCall_0() { return cNEWTerminalRuleCall_0; }
		
		//("address")
		public Keyword getAddressKeyword_1() { return cAddressKeyword_1; }
		
		//('[' INT? ']')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_3() { return cOPENPARENTHESISTerminalRuleCall_3; }
		
		//((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)*
		public Group getGroup_4() { return cGroup_4; }
		
		//(SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables)
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_4_0_0() { return cSyntaxExpressionParserRuleCall_4_0_0; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_4_0_1() { return cHexadecimalExpressionParserRuleCall_4_0_1; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_4_0_2() { return cADDRESSEXPRESIONTerminalRuleCall_4_0_2; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_4_0_3() { return cNumberExpressionParserRuleCall_4_0_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_4_0_4() { return cIdentifierParserRuleCall_4_0_4; }
		
		//"now"
		public Keyword getNowKeyword_4_0_5() { return cNowKeyword_4_0_5; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_4_0_6() { return cIdentifierValueExpressionParserRuleCall_4_0_6; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_4_0_7() { return cBracketExpressionParserRuleCall_4_0_7; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_4_0_8() { return cMSGVariablesParserRuleCall_4_0_8; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_4_1() { return cCOMMATerminalRuleCall_4_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_5() { return cCLOSEPARENTHESISTerminalRuleCall_5; }
	}
	public class CreateUintObjectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CreateUintObjectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeUintParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_4_0_0 = (RuleCall)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cHexadecimalExpressionParserRuleCall_4_0_1 = (RuleCall)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_4_0_2 = (RuleCall)cAlternatives_4_0.eContents().get(2);
		private final RuleCall cNumberExpressionParserRuleCall_4_0_3 = (RuleCall)cAlternatives_4_0.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_4_0_4 = (RuleCall)cAlternatives_4_0.eContents().get(4);
		private final Keyword cNowKeyword_4_0_5 = (Keyword)cAlternatives_4_0.eContents().get(5);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_4_0_6 = (RuleCall)cAlternatives_4_0.eContents().get(6);
		private final RuleCall cBracketExpressionParserRuleCall_4_0_7 = (RuleCall)cAlternatives_4_0.eContents().get(7);
		private final RuleCall cMSGVariablesParserRuleCall_4_0_8 = (RuleCall)cAlternatives_4_0.eContents().get(8);
		private final RuleCall cCOMMATerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//CreateUintObjectExpression returns ecore::EString:
		//    NEW (TypeUint) ('[' INT? ']' |"[]")* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NEW (TypeUint) ('[' INT? ']' |"[]")* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//NEW
		public RuleCall getNEWTerminalRuleCall_0() { return cNEWTerminalRuleCall_0; }
		
		//(TypeUint)
		public RuleCall getTypeUintParserRuleCall_1() { return cTypeUintParserRuleCall_1; }
		
		//('[' INT? ']' |"[]")*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'[' INT? ']'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0_0() { return cLeftSquareBracketKeyword_2_0_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_2_0_1() { return cINTTerminalRuleCall_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_0_2() { return cRightSquareBracketKeyword_2_0_2; }
		
		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_2_1() { return cLeftSquareBracketRightSquareBracketKeyword_2_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_3() { return cOPENPARENTHESISTerminalRuleCall_3; }
		
		//((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)*
		public Group getGroup_4() { return cGroup_4; }
		
		//(SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables)
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_4_0_0() { return cSyntaxExpressionParserRuleCall_4_0_0; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_4_0_1() { return cHexadecimalExpressionParserRuleCall_4_0_1; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_4_0_2() { return cADDRESSEXPRESIONTerminalRuleCall_4_0_2; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_4_0_3() { return cNumberExpressionParserRuleCall_4_0_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_4_0_4() { return cIdentifierParserRuleCall_4_0_4; }
		
		//"now"
		public Keyword getNowKeyword_4_0_5() { return cNowKeyword_4_0_5; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_4_0_6() { return cIdentifierValueExpressionParserRuleCall_4_0_6; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_4_0_7() { return cBracketExpressionParserRuleCall_4_0_7; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_4_0_8() { return cMSGVariablesParserRuleCall_4_0_8; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_4_1() { return cCOMMATerminalRuleCall_4_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_5() { return cCLOSEPARENTHESISTerminalRuleCall_5; }
	}
	public class CreateIntObjectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CreateIntObjectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeIntParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_4_0_0 = (RuleCall)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cHexadecimalExpressionParserRuleCall_4_0_1 = (RuleCall)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_4_0_2 = (RuleCall)cAlternatives_4_0.eContents().get(2);
		private final RuleCall cNumberExpressionParserRuleCall_4_0_3 = (RuleCall)cAlternatives_4_0.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_4_0_4 = (RuleCall)cAlternatives_4_0.eContents().get(4);
		private final Keyword cNowKeyword_4_0_5 = (Keyword)cAlternatives_4_0.eContents().get(5);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_4_0_6 = (RuleCall)cAlternatives_4_0.eContents().get(6);
		private final RuleCall cBracketExpressionParserRuleCall_4_0_7 = (RuleCall)cAlternatives_4_0.eContents().get(7);
		private final RuleCall cMSGVariablesParserRuleCall_4_0_8 = (RuleCall)cAlternatives_4_0.eContents().get(8);
		private final RuleCall cCOMMATerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//CreateIntObjectExpression returns ecore::EString:
		//    NEW (TypeInt) ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NEW (TypeInt) ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//NEW
		public RuleCall getNEWTerminalRuleCall_0() { return cNEWTerminalRuleCall_0; }
		
		//(TypeInt)
		public RuleCall getTypeIntParserRuleCall_1() { return cTypeIntParserRuleCall_1; }
		
		//('[' INT? ']')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_3() { return cOPENPARENTHESISTerminalRuleCall_3; }
		
		//((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)*
		public Group getGroup_4() { return cGroup_4; }
		
		//(SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables)
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_4_0_0() { return cSyntaxExpressionParserRuleCall_4_0_0; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_4_0_1() { return cHexadecimalExpressionParserRuleCall_4_0_1; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_4_0_2() { return cADDRESSEXPRESIONTerminalRuleCall_4_0_2; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_4_0_3() { return cNumberExpressionParserRuleCall_4_0_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_4_0_4() { return cIdentifierParserRuleCall_4_0_4; }
		
		//"now"
		public Keyword getNowKeyword_4_0_5() { return cNowKeyword_4_0_5; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_4_0_6() { return cIdentifierValueExpressionParserRuleCall_4_0_6; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_4_0_7() { return cBracketExpressionParserRuleCall_4_0_7; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_4_0_8() { return cMSGVariablesParserRuleCall_4_0_8; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_4_1() { return cCOMMATerminalRuleCall_4_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_5() { return cCLOSEPARENTHESISTerminalRuleCall_5; }
	}
	public class CreateBoolObjectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CreateBoolObjectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeBoolParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_4_0_0 = (RuleCall)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_4_0_1 = (RuleCall)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_4_0_2 = (RuleCall)cAlternatives_4_0.eContents().get(2);
		private final RuleCall cBracketExpressionParserRuleCall_4_0_3 = (RuleCall)cAlternatives_4_0.eContents().get(3);
		private final RuleCall cMSGVariablesParserRuleCall_4_0_4 = (RuleCall)cAlternatives_4_0.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//CreateBoolObjectExpression returns ecore::EString:
		//    NEW (TypeBool) ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|Identifier|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NEW (TypeBool) ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|Identifier|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//NEW
		public RuleCall getNEWTerminalRuleCall_0() { return cNEWTerminalRuleCall_0; }
		
		//(TypeBool)
		public RuleCall getTypeBoolParserRuleCall_1() { return cTypeBoolParserRuleCall_1; }
		
		//('[' INT? ']')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_3() { return cOPENPARENTHESISTerminalRuleCall_3; }
		
		//((SyntaxExpression|Identifier|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)*
		public Group getGroup_4() { return cGroup_4; }
		
		//(SyntaxExpression|Identifier|IdentifierValueExpression|BracketExpression|MSGVariables)
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_4_0_0() { return cSyntaxExpressionParserRuleCall_4_0_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_4_0_1() { return cIdentifierParserRuleCall_4_0_1; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_4_0_2() { return cIdentifierValueExpressionParserRuleCall_4_0_2; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_4_0_3() { return cBracketExpressionParserRuleCall_4_0_3; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_4_0_4() { return cMSGVariablesParserRuleCall_4_0_4; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_4_1() { return cCOMMATerminalRuleCall_4_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_5() { return cCLOSEPARENTHESISTerminalRuleCall_5; }
	}
	public class CreateStringObjectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CreateStringObjectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeStringParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_4_0_0 = (RuleCall)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cHexadecimalExpressionParserRuleCall_4_0_1 = (RuleCall)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_4_0_2 = (RuleCall)cAlternatives_4_0.eContents().get(2);
		private final RuleCall cNumberExpressionParserRuleCall_4_0_3 = (RuleCall)cAlternatives_4_0.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_4_0_4 = (RuleCall)cAlternatives_4_0.eContents().get(4);
		private final Keyword cNowKeyword_4_0_5 = (Keyword)cAlternatives_4_0.eContents().get(5);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_4_0_6 = (RuleCall)cAlternatives_4_0.eContents().get(6);
		private final RuleCall cBracketExpressionParserRuleCall_4_0_7 = (RuleCall)cAlternatives_4_0.eContents().get(7);
		private final RuleCall cMSGVariablesParserRuleCall_4_0_8 = (RuleCall)cAlternatives_4_0.eContents().get(8);
		private final RuleCall cCOMMATerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//CreateStringObjectExpression returns ecore::EString:
		//    NEW (TypeString) ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NEW (TypeString) ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//NEW
		public RuleCall getNEWTerminalRuleCall_0() { return cNEWTerminalRuleCall_0; }
		
		//(TypeString)
		public RuleCall getTypeStringParserRuleCall_1() { return cTypeStringParserRuleCall_1; }
		
		//('[' INT? ']')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_3() { return cOPENPARENTHESISTerminalRuleCall_3; }
		
		//((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)*
		public Group getGroup_4() { return cGroup_4; }
		
		//(SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables)
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_4_0_0() { return cSyntaxExpressionParserRuleCall_4_0_0; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_4_0_1() { return cHexadecimalExpressionParserRuleCall_4_0_1; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_4_0_2() { return cADDRESSEXPRESIONTerminalRuleCall_4_0_2; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_4_0_3() { return cNumberExpressionParserRuleCall_4_0_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_4_0_4() { return cIdentifierParserRuleCall_4_0_4; }
		
		//"now"
		public Keyword getNowKeyword_4_0_5() { return cNowKeyword_4_0_5; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_4_0_6() { return cIdentifierValueExpressionParserRuleCall_4_0_6; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_4_0_7() { return cBracketExpressionParserRuleCall_4_0_7; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_4_0_8() { return cMSGVariablesParserRuleCall_4_0_8; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_4_1() { return cCOMMATerminalRuleCall_4_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_5() { return cCLOSEPARENTHESISTerminalRuleCall_5; }
	}
	public class CreateByteObjectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CreateByteObjectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeBytesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_4_0_0 = (RuleCall)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cHexadecimalExpressionParserRuleCall_4_0_1 = (RuleCall)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_4_0_2 = (RuleCall)cAlternatives_4_0.eContents().get(2);
		private final RuleCall cNumberExpressionParserRuleCall_4_0_3 = (RuleCall)cAlternatives_4_0.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_4_0_4 = (RuleCall)cAlternatives_4_0.eContents().get(4);
		private final Keyword cNowKeyword_4_0_5 = (Keyword)cAlternatives_4_0.eContents().get(5);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_4_0_6 = (RuleCall)cAlternatives_4_0.eContents().get(6);
		private final RuleCall cBracketExpressionParserRuleCall_4_0_7 = (RuleCall)cAlternatives_4_0.eContents().get(7);
		private final RuleCall cMSGVariablesParserRuleCall_4_0_8 = (RuleCall)cAlternatives_4_0.eContents().get(8);
		private final RuleCall cCOMMATerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//CreateByteObjectExpression returns ecore::EString:
		//    NEW (TypeBytes) ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NEW (TypeBytes) ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//NEW
		public RuleCall getNEWTerminalRuleCall_0() { return cNEWTerminalRuleCall_0; }
		
		//(TypeBytes)
		public RuleCall getTypeBytesParserRuleCall_1() { return cTypeBytesParserRuleCall_1; }
		
		//('[' INT? ']')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_3() { return cOPENPARENTHESISTerminalRuleCall_3; }
		
		//((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)*
		public Group getGroup_4() { return cGroup_4; }
		
		//(SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables)
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_4_0_0() { return cSyntaxExpressionParserRuleCall_4_0_0; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_4_0_1() { return cHexadecimalExpressionParserRuleCall_4_0_1; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_4_0_2() { return cADDRESSEXPRESIONTerminalRuleCall_4_0_2; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_4_0_3() { return cNumberExpressionParserRuleCall_4_0_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_4_0_4() { return cIdentifierParserRuleCall_4_0_4; }
		
		//"now"
		public Keyword getNowKeyword_4_0_5() { return cNowKeyword_4_0_5; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_4_0_6() { return cIdentifierValueExpressionParserRuleCall_4_0_6; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_4_0_7() { return cBracketExpressionParserRuleCall_4_0_7; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_4_0_8() { return cMSGVariablesParserRuleCall_4_0_8; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_4_1() { return cCOMMATerminalRuleCall_4_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_5() { return cCLOSEPARENTHESISTerminalRuleCall_5; }
	}
	public class VarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.VarExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cAssignValueExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//VarExpression returns ecore::EString:
		//    "var" Identifier AssignValueExpression?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" Identifier AssignValueExpression?
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }
		
		//AssignValueExpression?
		public RuleCall getAssignValueExpressionParserRuleCall_2() { return cAssignValueExpressionParserRuleCall_2; }
	}
	public class LogicalUnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.LogicalUnaryOperator");
		private final Keyword cExclamationMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//LogicalUnaryOperator returns ecore::EString:
		//     "!"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"!"
		public Keyword getExclamationMarkKeyword() { return cExclamationMarkKeyword; }
	}
	public class NegationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.NegationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalUnaryOperatorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cMSGVariablesParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final Keyword cNowKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final RuleCall cBracketExpressionParserRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		
		//NegationExpression returns ecore::EString:
		//    LogicalUnaryOperator (Identifier|SyntaxExpression|MSGVariables|"now"|IdentifierValueExpression|BracketExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalUnaryOperator (Identifier|SyntaxExpression|MSGVariables|"now"|IdentifierValueExpression|BracketExpression)
		public Group getGroup() { return cGroup; }
		
		//LogicalUnaryOperator
		public RuleCall getLogicalUnaryOperatorParserRuleCall_0() { return cLogicalUnaryOperatorParserRuleCall_0; }
		
		//(Identifier|SyntaxExpression|MSGVariables|"now"|IdentifierValueExpression|BracketExpression)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_0() { return cIdentifierParserRuleCall_1_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_1_1() { return cSyntaxExpressionParserRuleCall_1_1; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_1_2() { return cMSGVariablesParserRuleCall_1_2; }
		
		//"now"
		public Keyword getNowKeyword_1_3() { return cNowKeyword_1_3; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_1_4() { return cIdentifierValueExpressionParserRuleCall_1_4; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_1_5() { return cBracketExpressionParserRuleCall_1_5; }
	}
	public class SyntaxExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.SyntaxExpression");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SyntaxExpression returns ecore::EString:
		//    STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class TypeCastingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TypeCastingExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSingularTypeParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Keyword cTypeKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cAddressKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_2_0_0 = (RuleCall)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cHexadecimalExpressionParserRuleCall_2_0_1 = (RuleCall)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_2_0_2 = (RuleCall)cAlternatives_2_0.eContents().get(2);
		private final RuleCall cIdentifierParserRuleCall_2_0_3 = (RuleCall)cAlternatives_2_0.eContents().get(3);
		private final RuleCall cNumberExpressionParserRuleCall_2_0_4 = (RuleCall)cAlternatives_2_0.eContents().get(4);
		private final RuleCall cIdentifierDotExpressionParserRuleCall_2_0_5 = (RuleCall)cAlternatives_2_0.eContents().get(5);
		private final RuleCall cMSGSENDERTerminalRuleCall_2_0_6 = (RuleCall)cAlternatives_2_0.eContents().get(6);
		private final Keyword cNowKeyword_2_0_7 = (Keyword)cAlternatives_2_0.eContents().get(7);
		private final RuleCall cCOMMATerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cDOTTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//TypeCastingExpression returns ecore::EString:
		//    (SingularType|"type"|"address") OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|Identifier|NumberExpression|IdentifierDotExpression|MSGSENDER|"now") COMMA?)* CLOSEPARENTHESIS  (DOT Identifier)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(SingularType|"type"|"address") OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|Identifier|NumberExpression|IdentifierDotExpression|MSGSENDER|"now") COMMA?)* CLOSEPARENTHESIS  (DOT Identifier)?
		public Group getGroup() { return cGroup; }
		
		//(SingularType|"type"|"address")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//SingularType
		public RuleCall getSingularTypeParserRuleCall_0_0() { return cSingularTypeParserRuleCall_0_0; }
		
		//"type"
		public Keyword getTypeKeyword_0_1() { return cTypeKeyword_0_1; }
		
		//"address"
		public Keyword getAddressKeyword_0_2() { return cAddressKeyword_0_2; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|Identifier|NumberExpression|IdentifierDotExpression|MSGSENDER|"now") COMMA?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|Identifier|NumberExpression|IdentifierDotExpression|MSGSENDER|"now")
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_2_0_0() { return cSyntaxExpressionParserRuleCall_2_0_0; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_2_0_1() { return cHexadecimalExpressionParserRuleCall_2_0_1; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_2_0_2() { return cADDRESSEXPRESIONTerminalRuleCall_2_0_2; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_0_3() { return cIdentifierParserRuleCall_2_0_3; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_2_0_4() { return cNumberExpressionParserRuleCall_2_0_4; }
		
		//IdentifierDotExpression
		public RuleCall getIdentifierDotExpressionParserRuleCall_2_0_5() { return cIdentifierDotExpressionParserRuleCall_2_0_5; }
		
		//MSGSENDER
		public RuleCall getMSGSENDERTerminalRuleCall_2_0_6() { return cMSGSENDERTerminalRuleCall_2_0_6; }
		
		//"now"
		public Keyword getNowKeyword_2_0_7() { return cNowKeyword_2_0_7; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_2_1() { return cCOMMATerminalRuleCall_2_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_3() { return cCLOSEPARENTHESISTerminalRuleCall_3; }
		
		//(DOT Identifier)?
		public Group getGroup_4() { return cGroup_4; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_4_0() { return cDOTTerminalRuleCall_4_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_4_1() { return cIdentifierParserRuleCall_4_1; }
	}
	public class PayableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.PayableExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPayableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1_0_0 = (RuleCall)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1_0_1 = (RuleCall)cAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cIdentifierDotExpressionParserRuleCall_1_1_0_2 = (RuleCall)cAlternatives_1_1_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_1_0_3 = (RuleCall)cAlternatives_1_1_0.eContents().get(3);
		private final RuleCall cBOOLVALUETerminalRuleCall_1_1_0_4 = (RuleCall)cAlternatives_1_1_0.eContents().get(4);
		private final RuleCall cMSGVariablesParserRuleCall_1_1_0_5 = (RuleCall)cAlternatives_1_1_0.eContents().get(5);
		private final RuleCall cHEXEXPRESSIONTerminalRuleCall_1_1_0_6 = (RuleCall)cAlternatives_1_1_0.eContents().get(6);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_1_1_0_7 = (RuleCall)cAlternatives_1_1_0.eContents().get(7);
		private final Keyword cNowKeyword_1_1_0_8 = (Keyword)cAlternatives_1_1_0.eContents().get(8);
		private final RuleCall cTypeCastingExpressionParserRuleCall_1_1_0_9 = (RuleCall)cAlternatives_1_1_0.eContents().get(9);
		private final RuleCall cCOMMATerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cDOTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//PayableExpression returns ecore::EString:
		//    "payable" (OPENPARENTHESIS ((STRING|Identifier|IdentifierDotExpression|INT|BOOLVALUE|MSGVariables|HEXEXPRESSION|ADDRESSEXPRESION|"now"|TypeCastingExpression) COMMA?)* CLOSEPARENTHESIS) (DOT Expression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"payable" (OPENPARENTHESIS ((STRING|Identifier|IdentifierDotExpression|INT|BOOLVALUE|MSGVariables|HEXEXPRESSION|ADDRESSEXPRESION|"now"|TypeCastingExpression) COMMA?)* CLOSEPARENTHESIS) (DOT Expression)?
		public Group getGroup() { return cGroup; }
		
		//"payable"
		public Keyword getPayableKeyword_0() { return cPayableKeyword_0; }
		
		//(OPENPARENTHESIS ((STRING|Identifier|IdentifierDotExpression|INT|BOOLVALUE|MSGVariables|HEXEXPRESSION|ADDRESSEXPRESION|"now"|TypeCastingExpression) COMMA?)* CLOSEPARENTHESIS)
		public Group getGroup_1() { return cGroup_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1_0() { return cOPENPARENTHESISTerminalRuleCall_1_0; }
		
		//((STRING|Identifier|IdentifierDotExpression|INT|BOOLVALUE|MSGVariables|HEXEXPRESSION|ADDRESSEXPRESION|"now"|TypeCastingExpression) COMMA?)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//(STRING|Identifier|IdentifierDotExpression|INT|BOOLVALUE|MSGVariables|HEXEXPRESSION|ADDRESSEXPRESION|"now"|TypeCastingExpression)
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1_0_0() { return cSTRINGTerminalRuleCall_1_1_0_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1_0_1() { return cIdentifierParserRuleCall_1_1_0_1; }
		
		//IdentifierDotExpression
		public RuleCall getIdentifierDotExpressionParserRuleCall_1_1_0_2() { return cIdentifierDotExpressionParserRuleCall_1_1_0_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_0_3() { return cINTTerminalRuleCall_1_1_0_3; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_1_1_0_4() { return cBOOLVALUETerminalRuleCall_1_1_0_4; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_1_1_0_5() { return cMSGVariablesParserRuleCall_1_1_0_5; }
		
		//HEXEXPRESSION
		public RuleCall getHEXEXPRESSIONTerminalRuleCall_1_1_0_6() { return cHEXEXPRESSIONTerminalRuleCall_1_1_0_6; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_1_1_0_7() { return cADDRESSEXPRESIONTerminalRuleCall_1_1_0_7; }
		
		//"now"
		public Keyword getNowKeyword_1_1_0_8() { return cNowKeyword_1_1_0_8; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_1_1_0_9() { return cTypeCastingExpressionParserRuleCall_1_1_0_9; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_1_1_1() { return cCOMMATerminalRuleCall_1_1_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_1_2() { return cCLOSEPARENTHESISTerminalRuleCall_1_2; }
		
		//(DOT Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_2_0() { return cDOTTerminalRuleCall_2_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }
	}
	public class NewPersonalizedTypeUserInicializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.NewPersonalizedTypeUserInicialization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUserKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cCompanyKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Alternatives cAlternatives_4_0_0 = (Alternatives)cGroup_4_0.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_4_0_0_0 = (RuleCall)cAlternatives_4_0_0.eContents().get(0);
		private final RuleCall cHexadecimalExpressionParserRuleCall_4_0_0_1 = (RuleCall)cAlternatives_4_0_0.eContents().get(1);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_4_0_0_2 = (RuleCall)cAlternatives_4_0_0.eContents().get(2);
		private final RuleCall cNumberExpressionParserRuleCall_4_0_0_3 = (RuleCall)cAlternatives_4_0_0.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_4_0_0_4 = (RuleCall)cAlternatives_4_0_0.eContents().get(4);
		private final Keyword cNowKeyword_4_0_0_5 = (Keyword)cAlternatives_4_0_0.eContents().get(5);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_4_0_0_6 = (RuleCall)cAlternatives_4_0_0.eContents().get(6);
		private final RuleCall cBracketExpressionParserRuleCall_4_0_0_7 = (RuleCall)cAlternatives_4_0_0.eContents().get(7);
		private final RuleCall cMSGVariablesParserRuleCall_4_0_0_8 = (RuleCall)cAlternatives_4_0_0.eContents().get(8);
		private final RuleCall cBOOLVALUETerminalRuleCall_4_0_0_9 = (RuleCall)cAlternatives_4_0_0.eContents().get(9);
		private final RuleCall cCOMMATerminalRuleCall_4_0_1 = (RuleCall)cGroup_4_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final RuleCall cOPENKEYTerminalRuleCall_4_1_0 = (RuleCall)cGroup_4_1.eContents().get(0);
		private final RuleCall cFieldAssignParserRuleCall_4_1_1 = (RuleCall)cGroup_4_1.eContents().get(1);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_4_1_2_0 = (RuleCall)cGroup_4_1_2.eContents().get(0);
		private final RuleCall cFieldAssignParserRuleCall_4_1_2_1 = (RuleCall)cGroup_4_1_2.eContents().get(1);
		private final RuleCall cCLOSEKEYTerminalRuleCall_4_1_3 = (RuleCall)cGroup_4_1.eContents().get(3);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//NewPersonalizedTypeUserInicialization:
		//    NEW? ("User"|Identifier|"Company") ('[' INT? ']')* OPENPARENTHESIS ((((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE) COMMA?)*)|(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY)) CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NEW? ("User"|Identifier|"Company") ('[' INT? ']')* OPENPARENTHESIS ((((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE) COMMA?)*)|(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY)) CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//NEW?
		public RuleCall getNEWTerminalRuleCall_0() { return cNEWTerminalRuleCall_0; }
		
		//("User"|Identifier|"Company")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"User"
		public Keyword getUserKeyword_1_0() { return cUserKeyword_1_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1() { return cIdentifierParserRuleCall_1_1; }
		
		//"Company"
		public Keyword getCompanyKeyword_1_2() { return cCompanyKeyword_1_2; }
		
		//('[' INT? ']')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_3() { return cOPENPARENTHESISTerminalRuleCall_3; }
		
		//((((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE) COMMA?)*)|(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY))
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//(((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE) COMMA?)*)
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//(SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
		public Alternatives getAlternatives_4_0_0() { return cAlternatives_4_0_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_4_0_0_0() { return cSyntaxExpressionParserRuleCall_4_0_0_0; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_4_0_0_1() { return cHexadecimalExpressionParserRuleCall_4_0_0_1; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_4_0_0_2() { return cADDRESSEXPRESIONTerminalRuleCall_4_0_0_2; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_4_0_0_3() { return cNumberExpressionParserRuleCall_4_0_0_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_4_0_0_4() { return cIdentifierParserRuleCall_4_0_0_4; }
		
		//"now"
		public Keyword getNowKeyword_4_0_0_5() { return cNowKeyword_4_0_0_5; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_4_0_0_6() { return cIdentifierValueExpressionParserRuleCall_4_0_0_6; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_4_0_0_7() { return cBracketExpressionParserRuleCall_4_0_0_7; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_4_0_0_8() { return cMSGVariablesParserRuleCall_4_0_0_8; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_4_0_0_9() { return cBOOLVALUETerminalRuleCall_4_0_0_9; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_4_0_1() { return cCOMMATerminalRuleCall_4_0_1; }
		
		//(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY)
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_4_1_0() { return cOPENKEYTerminalRuleCall_4_1_0; }
		
		//FieldAssign
		public RuleCall getFieldAssignParserRuleCall_4_1_1() { return cFieldAssignParserRuleCall_4_1_1; }
		
		//(COMMA? FieldAssign)*
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_4_1_2_0() { return cCOMMATerminalRuleCall_4_1_2_0; }
		
		//FieldAssign
		public RuleCall getFieldAssignParserRuleCall_4_1_2_1() { return cFieldAssignParserRuleCall_4_1_2_1; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_4_1_3() { return cCLOSEKEYTerminalRuleCall_4_1_3; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_5() { return cCLOSEPARENTHESISTerminalRuleCall_5; }
	}
	public class FieldAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.FieldAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cSyntaxExpressionParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cHexadecimalExpressionParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final RuleCall cNumberExpressionParserRuleCall_2_3 = (RuleCall)cAlternatives_2.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_2_4 = (RuleCall)cAlternatives_2.eContents().get(4);
		private final Keyword cNowKeyword_2_5 = (Keyword)cAlternatives_2.eContents().get(5);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_2_6 = (RuleCall)cAlternatives_2.eContents().get(6);
		private final RuleCall cBracketExpressionParserRuleCall_2_7 = (RuleCall)cAlternatives_2.eContents().get(7);
		private final RuleCall cMSGVariablesParserRuleCall_2_8 = (RuleCall)cAlternatives_2.eContents().get(8);
		private final RuleCall cBOOLVALUETerminalRuleCall_2_9 = (RuleCall)cAlternatives_2.eContents().get(9);
		
		//FieldAssign:
		//    Identifier ":" (SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Identifier ":" (SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
		public Group getGroup() { return cGroup; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_2_0() { return cSyntaxExpressionParserRuleCall_2_0; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_2_1() { return cHexadecimalExpressionParserRuleCall_2_1; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_2_2() { return cADDRESSEXPRESIONTerminalRuleCall_2_2; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_2_3() { return cNumberExpressionParserRuleCall_2_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_4() { return cIdentifierParserRuleCall_2_4; }
		
		//"now"
		public Keyword getNowKeyword_2_5() { return cNowKeyword_2_5; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_2_6() { return cIdentifierValueExpressionParserRuleCall_2_6; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_2_7() { return cBracketExpressionParserRuleCall_2_7; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_2_8() { return cMSGVariablesParserRuleCall_2_8; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_2_9() { return cBOOLVALUETerminalRuleCall_2_9; }
	}
	public class NewPersonalizedTypeCompanyInicializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.NewPersonalizedTypeCompanyInicialization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCompanyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Alternatives cAlternatives_4_0_0 = (Alternatives)cGroup_4_0.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_4_0_0_0 = (RuleCall)cAlternatives_4_0_0.eContents().get(0);
		private final RuleCall cHexadecimalExpressionParserRuleCall_4_0_0_1 = (RuleCall)cAlternatives_4_0_0.eContents().get(1);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_4_0_0_2 = (RuleCall)cAlternatives_4_0_0.eContents().get(2);
		private final RuleCall cNumberExpressionParserRuleCall_4_0_0_3 = (RuleCall)cAlternatives_4_0_0.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_4_0_0_4 = (RuleCall)cAlternatives_4_0_0.eContents().get(4);
		private final Keyword cNowKeyword_4_0_0_5 = (Keyword)cAlternatives_4_0_0.eContents().get(5);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_4_0_0_6 = (RuleCall)cAlternatives_4_0_0.eContents().get(6);
		private final RuleCall cBracketExpressionParserRuleCall_4_0_0_7 = (RuleCall)cAlternatives_4_0_0.eContents().get(7);
		private final RuleCall cMSGVariablesParserRuleCall_4_0_0_8 = (RuleCall)cAlternatives_4_0_0.eContents().get(8);
		private final RuleCall cBOOLVALUETerminalRuleCall_4_0_0_9 = (RuleCall)cAlternatives_4_0_0.eContents().get(9);
		private final RuleCall cCOMMATerminalRuleCall_4_0_1 = (RuleCall)cGroup_4_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final RuleCall cOPENKEYTerminalRuleCall_4_1_0 = (RuleCall)cGroup_4_1.eContents().get(0);
		private final RuleCall cFieldAssignParserRuleCall_4_1_1 = (RuleCall)cGroup_4_1.eContents().get(1);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_4_1_2_0 = (RuleCall)cGroup_4_1_2.eContents().get(0);
		private final RuleCall cFieldAssignParserRuleCall_4_1_2_1 = (RuleCall)cGroup_4_1_2.eContents().get(1);
		private final RuleCall cCLOSEKEYTerminalRuleCall_4_1_3 = (RuleCall)cGroup_4_1.eContents().get(3);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//NewPersonalizedTypeCompanyInicialization:
		//    NEW? ("Company") ('[' INT? ']')*  OPENPARENTHESIS ((((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE) COMMA?)*)|(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY)) CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NEW? ("Company") ('[' INT? ']')*  OPENPARENTHESIS ((((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE) COMMA?)*)|(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY)) CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//NEW?
		public RuleCall getNEWTerminalRuleCall_0() { return cNEWTerminalRuleCall_0; }
		
		//("Company")
		public Keyword getCompanyKeyword_1() { return cCompanyKeyword_1; }
		
		//('[' INT? ']')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_3() { return cOPENPARENTHESISTerminalRuleCall_3; }
		
		//((((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE) COMMA?)*)|(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY))
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//(((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE) COMMA?)*)
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//(SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
		public Alternatives getAlternatives_4_0_0() { return cAlternatives_4_0_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_4_0_0_0() { return cSyntaxExpressionParserRuleCall_4_0_0_0; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_4_0_0_1() { return cHexadecimalExpressionParserRuleCall_4_0_0_1; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_4_0_0_2() { return cADDRESSEXPRESIONTerminalRuleCall_4_0_0_2; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_4_0_0_3() { return cNumberExpressionParserRuleCall_4_0_0_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_4_0_0_4() { return cIdentifierParserRuleCall_4_0_0_4; }
		
		//"now"
		public Keyword getNowKeyword_4_0_0_5() { return cNowKeyword_4_0_0_5; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_4_0_0_6() { return cIdentifierValueExpressionParserRuleCall_4_0_0_6; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_4_0_0_7() { return cBracketExpressionParserRuleCall_4_0_0_7; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_4_0_0_8() { return cMSGVariablesParserRuleCall_4_0_0_8; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_4_0_0_9() { return cBOOLVALUETerminalRuleCall_4_0_0_9; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_4_0_1() { return cCOMMATerminalRuleCall_4_0_1; }
		
		//(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY)
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_4_1_0() { return cOPENKEYTerminalRuleCall_4_1_0; }
		
		//FieldAssign
		public RuleCall getFieldAssignParserRuleCall_4_1_1() { return cFieldAssignParserRuleCall_4_1_1; }
		
		//(COMMA? FieldAssign)*
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_4_1_2_0() { return cCOMMATerminalRuleCall_4_1_2_0; }
		
		//FieldAssign
		public RuleCall getFieldAssignParserRuleCall_4_1_2_1() { return cFieldAssignParserRuleCall_4_1_2_1; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_4_1_3() { return cCLOSEKEYTerminalRuleCall_4_1_3; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_5() { return cCLOSEPARENTHESISTerminalRuleCall_5; }
	}
	public class PersonalizedTypeUserInicializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.PersonalizedTypeUserInicialization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cUserKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Alternatives cAlternatives_0_3_0 = (Alternatives)cGroup_0_3.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_0_3_0_0 = (RuleCall)cAlternatives_0_3_0.eContents().get(0);
		private final RuleCall cHexadecimalExpressionParserRuleCall_0_3_0_1 = (RuleCall)cAlternatives_0_3_0.eContents().get(1);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_0_3_0_2 = (RuleCall)cAlternatives_0_3_0.eContents().get(2);
		private final RuleCall cNumberExpressionParserRuleCall_0_3_0_3 = (RuleCall)cAlternatives_0_3_0.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_0_3_0_4 = (RuleCall)cAlternatives_0_3_0.eContents().get(4);
		private final Keyword cNowKeyword_0_3_0_5 = (Keyword)cAlternatives_0_3_0.eContents().get(5);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_0_3_0_6 = (RuleCall)cAlternatives_0_3_0.eContents().get(6);
		private final RuleCall cBracketExpressionParserRuleCall_0_3_0_7 = (RuleCall)cAlternatives_0_3_0.eContents().get(7);
		private final RuleCall cMSGVariablesParserRuleCall_0_3_0_8 = (RuleCall)cAlternatives_0_3_0.eContents().get(8);
		private final RuleCall cBOOLVALUETerminalRuleCall_0_3_0_9 = (RuleCall)cAlternatives_0_3_0.eContents().get(9);
		private final RuleCall cCOMMATerminalRuleCall_0_3_1 = (RuleCall)cGroup_0_3.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final RuleCall cOPENKEYTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cFieldAssignParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_1_0_2_0 = (RuleCall)cGroup_1_0_2.eContents().get(0);
		private final RuleCall cFieldAssignParserRuleCall_1_0_2_1 = (RuleCall)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cCLOSEKEYTerminalRuleCall_1_0_3 = (RuleCall)cGroup_1_0.eContents().get(3);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		///* */
		//PersonalizedTypeUserInicialization:
		//    ("User") ('[' INT? ']')* OPENPARENTHESIS ((
		//        (SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
		//        COMMA?)*)|(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY) CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//("User") ('[' INT? ']')* OPENPARENTHESIS ((
		//    (SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
		//    COMMA?)*)|(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY) CLOSEPARENTHESIS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//("User") ('[' INT? ']')* OPENPARENTHESIS ((
		//    (SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
		//    COMMA?)*)
		public Group getGroup_0() { return cGroup_0; }
		
		//("User")
		public Keyword getUserKeyword_0_0() { return cUserKeyword_0_0; }
		
		//('[' INT? ']')*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1_0() { return cLeftSquareBracketKeyword_0_1_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0_1_1() { return cINTTerminalRuleCall_0_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1_2() { return cRightSquareBracketKeyword_0_1_2; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_0_2() { return cOPENPARENTHESISTerminalRuleCall_0_2; }
		
		//((
		//       (SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
		//       COMMA?)*)
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//(SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
		public Alternatives getAlternatives_0_3_0() { return cAlternatives_0_3_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_0_3_0_0() { return cSyntaxExpressionParserRuleCall_0_3_0_0; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_0_3_0_1() { return cHexadecimalExpressionParserRuleCall_0_3_0_1; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_0_3_0_2() { return cADDRESSEXPRESIONTerminalRuleCall_0_3_0_2; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_0_3_0_3() { return cNumberExpressionParserRuleCall_0_3_0_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_3_0_4() { return cIdentifierParserRuleCall_0_3_0_4; }
		
		//"now"
		public Keyword getNowKeyword_0_3_0_5() { return cNowKeyword_0_3_0_5; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_0_3_0_6() { return cIdentifierValueExpressionParserRuleCall_0_3_0_6; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_0_3_0_7() { return cBracketExpressionParserRuleCall_0_3_0_7; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_0_3_0_8() { return cMSGVariablesParserRuleCall_0_3_0_8; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_0_3_0_9() { return cBOOLVALUETerminalRuleCall_0_3_0_9; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_0_3_1() { return cCOMMATerminalRuleCall_0_3_1; }
		
		//(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY) CLOSEPARENTHESIS
		public Group getGroup_1() { return cGroup_1; }
		
		//(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_1_0_0() { return cOPENKEYTerminalRuleCall_1_0_0; }
		
		//FieldAssign
		public RuleCall getFieldAssignParserRuleCall_1_0_1() { return cFieldAssignParserRuleCall_1_0_1; }
		
		//(COMMA? FieldAssign)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_1_0_2_0() { return cCOMMATerminalRuleCall_1_0_2_0; }
		
		//FieldAssign
		public RuleCall getFieldAssignParserRuleCall_1_0_2_1() { return cFieldAssignParserRuleCall_1_0_2_1; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_1_0_3() { return cCLOSEKEYTerminalRuleCall_1_0_3; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_1_1() { return cCLOSEPARENTHESISTerminalRuleCall_1_1; }
	}
	public class PersonalizedTypeCompanyInicializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.PersonalizedTypeCompanyInicialization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCompanyKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Alternatives cAlternatives_0_3_0 = (Alternatives)cGroup_0_3.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_0_3_0_0 = (RuleCall)cAlternatives_0_3_0.eContents().get(0);
		private final RuleCall cHexadecimalExpressionParserRuleCall_0_3_0_1 = (RuleCall)cAlternatives_0_3_0.eContents().get(1);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_0_3_0_2 = (RuleCall)cAlternatives_0_3_0.eContents().get(2);
		private final RuleCall cNumberExpressionParserRuleCall_0_3_0_3 = (RuleCall)cAlternatives_0_3_0.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_0_3_0_4 = (RuleCall)cAlternatives_0_3_0.eContents().get(4);
		private final Keyword cNowKeyword_0_3_0_5 = (Keyword)cAlternatives_0_3_0.eContents().get(5);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_0_3_0_6 = (RuleCall)cAlternatives_0_3_0.eContents().get(6);
		private final RuleCall cBracketExpressionParserRuleCall_0_3_0_7 = (RuleCall)cAlternatives_0_3_0.eContents().get(7);
		private final RuleCall cMSGVariablesParserRuleCall_0_3_0_8 = (RuleCall)cAlternatives_0_3_0.eContents().get(8);
		private final RuleCall cBOOLVALUETerminalRuleCall_0_3_0_9 = (RuleCall)cAlternatives_0_3_0.eContents().get(9);
		private final RuleCall cCOMMATerminalRuleCall_0_3_1 = (RuleCall)cGroup_0_3.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final RuleCall cOPENKEYTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cFieldAssignParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_1_0_2_0 = (RuleCall)cGroup_1_0_2.eContents().get(0);
		private final RuleCall cFieldAssignParserRuleCall_1_0_2_1 = (RuleCall)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cCLOSEKEYTerminalRuleCall_1_0_3 = (RuleCall)cGroup_1_0.eContents().get(3);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PersonalizedTypeCompanyInicialization:
		//    ("Company") ('[' INT? ']')* OPENPARENTHESIS ((
		//        (SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
		//        COMMA?)*)|(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY) CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//("Company") ('[' INT? ']')* OPENPARENTHESIS ((
		//    (SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
		//    COMMA?)*)|(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY) CLOSEPARENTHESIS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//("Company") ('[' INT? ']')* OPENPARENTHESIS ((
		//    (SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
		//    COMMA?)*)
		public Group getGroup_0() { return cGroup_0; }
		
		//("Company")
		public Keyword getCompanyKeyword_0_0() { return cCompanyKeyword_0_0; }
		
		//('[' INT? ']')*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1_0() { return cLeftSquareBracketKeyword_0_1_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0_1_1() { return cINTTerminalRuleCall_0_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1_2() { return cRightSquareBracketKeyword_0_1_2; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_0_2() { return cOPENPARENTHESISTerminalRuleCall_0_2; }
		
		//((
		//       (SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
		//       COMMA?)*)
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//(SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
		public Alternatives getAlternatives_0_3_0() { return cAlternatives_0_3_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_0_3_0_0() { return cSyntaxExpressionParserRuleCall_0_3_0_0; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_0_3_0_1() { return cHexadecimalExpressionParserRuleCall_0_3_0_1; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_0_3_0_2() { return cADDRESSEXPRESIONTerminalRuleCall_0_3_0_2; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_0_3_0_3() { return cNumberExpressionParserRuleCall_0_3_0_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_3_0_4() { return cIdentifierParserRuleCall_0_3_0_4; }
		
		//"now"
		public Keyword getNowKeyword_0_3_0_5() { return cNowKeyword_0_3_0_5; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_0_3_0_6() { return cIdentifierValueExpressionParserRuleCall_0_3_0_6; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_0_3_0_7() { return cBracketExpressionParserRuleCall_0_3_0_7; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_0_3_0_8() { return cMSGVariablesParserRuleCall_0_3_0_8; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_0_3_0_9() { return cBOOLVALUETerminalRuleCall_0_3_0_9; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_0_3_1() { return cCOMMATerminalRuleCall_0_3_1; }
		
		//(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY) CLOSEPARENTHESIS
		public Group getGroup_1() { return cGroup_1; }
		
		//(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_1_0_0() { return cOPENKEYTerminalRuleCall_1_0_0; }
		
		//FieldAssign
		public RuleCall getFieldAssignParserRuleCall_1_0_1() { return cFieldAssignParserRuleCall_1_0_1; }
		
		//(COMMA? FieldAssign)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_1_0_2_0() { return cCOMMATerminalRuleCall_1_0_2_0; }
		
		//FieldAssign
		public RuleCall getFieldAssignParserRuleCall_1_0_2_1() { return cFieldAssignParserRuleCall_1_0_2_1; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_1_0_3() { return cCLOSEKEYTerminalRuleCall_1_0_3; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_1_1() { return cCLOSEPARENTHESISTerminalRuleCall_1_1; }
	}
	public class TimeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TimeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSecondsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cMinutesKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cHoursKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cDaysKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cWeeksKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cYearsKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		
		//TimeExpression returns ecore::EString:
		//    INT ("seconds" | "minutes" | "hours" | "days" | "weeks" | "years" )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ("seconds" | "minutes" | "hours" | "days" | "weeks" | "years" )
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//("seconds" | "minutes" | "hours" | "days" | "weeks" | "years" )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"seconds"
		public Keyword getSecondsKeyword_1_0() { return cSecondsKeyword_1_0; }
		
		//"minutes"
		public Keyword getMinutesKeyword_1_1() { return cMinutesKeyword_1_1; }
		
		//"hours"
		public Keyword getHoursKeyword_1_2() { return cHoursKeyword_1_2; }
		
		//"days"
		public Keyword getDaysKeyword_1_3() { return cDaysKeyword_1_3; }
		
		//"weeks"
		public Keyword getWeeksKeyword_1_4() { return cWeeksKeyword_1_4; }
		
		//"years"
		public Keyword getYearsKeyword_1_5() { return cYearsKeyword_1_5; }
	}
	public class TupleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TupleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cNumberExpressionParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cBOOLVALUETerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Alternatives cAlternatives_1_0_4_0 = (Alternatives)cGroup_1_0_4.eContents().get(0);
		private final RuleCall cSingularTypeParserRuleCall_1_0_4_0_0 = (RuleCall)cAlternatives_1_0_4_0.eContents().get(0);
		private final Keyword cCompanyKeyword_1_0_4_0_1 = (Keyword)cAlternatives_1_0_4_0.eContents().get(1);
		private final Keyword cUserKeyword_1_0_4_0_2 = (Keyword)cAlternatives_1_0_4_0.eContents().get(2);
		private final RuleCall cIdentifierParserRuleCall_1_0_4_1 = (RuleCall)cGroup_1_0_4.eContents().get(1);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_1_0_5 = (RuleCall)cAlternatives_1_0.eContents().get(5);
		private final RuleCall cArithmeticalExpressionParserRuleCall_1_0_6 = (RuleCall)cAlternatives_1_0.eContents().get(6);
		private final RuleCall cBracketExpressionParserRuleCall_1_0_7 = (RuleCall)cAlternatives_1_0.eContents().get(7);
		private final RuleCall cMSGVariablesParserRuleCall_1_0_8 = (RuleCall)cAlternatives_1_0.eContents().get(8);
		private final RuleCall cCOMMATerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//TupleExpression returns ecore::EString:
		//    OPENPARENTHESIS ((SyntaxExpression|NumberExpression|BOOLVALUE|ADDRESSEXPRESION|(SingularType|"Company"|"User")? Identifier|IdentifierValueExpression|ArithmeticalExpression|BracketExpression|MSGVariables) COMMA?)+ CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OPENPARENTHESIS ((SyntaxExpression|NumberExpression|BOOLVALUE|ADDRESSEXPRESION|(SingularType|"Company"|"User")? Identifier|IdentifierValueExpression|ArithmeticalExpression|BracketExpression|MSGVariables) COMMA?)+ CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_0() { return cOPENPARENTHESISTerminalRuleCall_0; }
		
		//((SyntaxExpression|NumberExpression|BOOLVALUE|ADDRESSEXPRESION|(SingularType|"Company"|"User")? Identifier|IdentifierValueExpression|ArithmeticalExpression|BracketExpression|MSGVariables) COMMA?)+
		public Group getGroup_1() { return cGroup_1; }
		
		//(SyntaxExpression|NumberExpression|BOOLVALUE|ADDRESSEXPRESION|(SingularType|"Company"|"User")? Identifier|IdentifierValueExpression|ArithmeticalExpression|BracketExpression|MSGVariables)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_1_0_0() { return cSyntaxExpressionParserRuleCall_1_0_0; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_1_0_1() { return cNumberExpressionParserRuleCall_1_0_1; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_1_0_2() { return cBOOLVALUETerminalRuleCall_1_0_2; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_1_0_3() { return cADDRESSEXPRESIONTerminalRuleCall_1_0_3; }
		
		//(SingularType|"Company"|"User")? Identifier
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }
		
		//(SingularType|"Company"|"User")?
		public Alternatives getAlternatives_1_0_4_0() { return cAlternatives_1_0_4_0; }
		
		//SingularType
		public RuleCall getSingularTypeParserRuleCall_1_0_4_0_0() { return cSingularTypeParserRuleCall_1_0_4_0_0; }
		
		//"Company"
		public Keyword getCompanyKeyword_1_0_4_0_1() { return cCompanyKeyword_1_0_4_0_1; }
		
		//"User"
		public Keyword getUserKeyword_1_0_4_0_2() { return cUserKeyword_1_0_4_0_2; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_0_4_1() { return cIdentifierParserRuleCall_1_0_4_1; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_1_0_5() { return cIdentifierValueExpressionParserRuleCall_1_0_5; }
		
		//ArithmeticalExpression
		public RuleCall getArithmeticalExpressionParserRuleCall_1_0_6() { return cArithmeticalExpressionParserRuleCall_1_0_6; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_1_0_7() { return cBracketExpressionParserRuleCall_1_0_7; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_1_0_8() { return cMSGVariablesParserRuleCall_1_0_8; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_1_1() { return cCOMMATerminalRuleCall_1_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_2() { return cCLOSEPARENTHESISTerminalRuleCall_2; }
	}
	public class ReturnExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.ReturnExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReturnExpressionNoValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReturnExpressionValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ReturnExpression:
		//    ReturnExpressionNoValue | ReturnExpressionValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ReturnExpressionNoValue | ReturnExpressionValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ReturnExpressionNoValue
		public RuleCall getReturnExpressionNoValueParserRuleCall_0() { return cReturnExpressionNoValueParserRuleCall_0; }
		
		//ReturnExpressionValue
		public RuleCall getReturnExpressionValueParserRuleCall_1() { return cReturnExpressionValueParserRuleCall_1; }
	}
	public class ReturnExpressionValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.ReturnExpressionValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRETURNTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNEWTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cCryptographycFunctionsComparationExpresionParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cCryptographycFunctionsParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cBracketExpressionParserRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final RuleCall cSyntaxExpressionParserRuleCall_2_3 = (RuleCall)cAlternatives_2.eContents().get(3);
		private final RuleCall cNumberExpressionParserRuleCall_2_4 = (RuleCall)cAlternatives_2.eContents().get(4);
		private final Group cGroup_2_5 = (Group)cAlternatives_2.eContents().get(5);
		private final Keyword cHyphenMinusKeyword_2_5_0 = (Keyword)cGroup_2_5.eContents().get(0);
		private final RuleCall cNumberExpressionParserRuleCall_2_5_1 = (RuleCall)cGroup_2_5.eContents().get(1);
		private final RuleCall cTupleExpressionParserRuleCall_2_6 = (RuleCall)cAlternatives_2.eContents().get(6);
		private final Group cGroup_2_7 = (Group)cAlternatives_2.eContents().get(7);
		private final RuleCall cIdentifierParserRuleCall_2_7_0 = (RuleCall)cGroup_2_7.eContents().get(0);
		private final Group cGroup_2_7_1 = (Group)cGroup_2_7.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_2_7_1_0 = (RuleCall)cGroup_2_7_1.eContents().get(0);
		private final Group cGroup_2_7_1_1 = (Group)cGroup_2_7_1.eContents().get(1);
		private final Alternatives cAlternatives_2_7_1_1_0 = (Alternatives)cGroup_2_7_1_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_2_7_1_1_0_0 = (RuleCall)cAlternatives_2_7_1_1_0.eContents().get(0);
		private final RuleCall cBracketExpressionParserRuleCall_2_7_1_1_0_1 = (RuleCall)cAlternatives_2_7_1_1_0.eContents().get(1);
		private final RuleCall cIdentifierDotExpressionParserRuleCall_2_7_1_1_0_2 = (RuleCall)cAlternatives_2_7_1_1_0.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_7_1_1_1 = (RuleCall)cGroup_2_7_1_1.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_2_7_1_2 = (RuleCall)cGroup_2_7_1.eContents().get(2);
		private final Group cGroup_2_8 = (Group)cAlternatives_2.eContents().get(8);
		private final RuleCall cSingularTypeParserRuleCall_2_8_0 = (RuleCall)cGroup_2_8.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_2_8_1 = (RuleCall)cGroup_2_8.eContents().get(1);
		private final RuleCall cBOOLVALUETerminalRuleCall_2_9 = (RuleCall)cAlternatives_2.eContents().get(9);
		private final Group cGroup_2_10 = (Group)cAlternatives_2.eContents().get(10);
		private final RuleCall cIdentifierDotExpressionParserRuleCall_2_10_0 = (RuleCall)cGroup_2_10.eContents().get(0);
		private final Group cGroup_2_10_1 = (Group)cGroup_2_10.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_2_10_1_0 = (RuleCall)cGroup_2_10_1.eContents().get(0);
		private final Group cGroup_2_10_1_1 = (Group)cGroup_2_10_1.eContents().get(1);
		private final Alternatives cAlternatives_2_10_1_1_0 = (Alternatives)cGroup_2_10_1_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_2_10_1_1_0_0 = (RuleCall)cAlternatives_2_10_1_1_0.eContents().get(0);
		private final RuleCall cBracketExpressionParserRuleCall_2_10_1_1_0_1 = (RuleCall)cAlternatives_2_10_1_1_0.eContents().get(1);
		private final RuleCall cIdentifierDotExpressionParserRuleCall_2_10_1_1_0_2 = (RuleCall)cAlternatives_2_10_1_1_0.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_10_1_1_1 = (RuleCall)cGroup_2_10_1_1.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_2_10_1_2 = (RuleCall)cGroup_2_10_1.eContents().get(2);
		private final RuleCall cArithmeticalComparationExpressionParserRuleCall_2_11 = (RuleCall)cAlternatives_2.eContents().get(11);
		private final RuleCall cArithmeticalExpressionParserRuleCall_2_12 = (RuleCall)cAlternatives_2.eContents().get(12);
		private final RuleCall cMSGVariablesParserRuleCall_2_13 = (RuleCall)cAlternatives_2.eContents().get(13);
		private final RuleCall cBlockVariablesParserRuleCall_2_14 = (RuleCall)cAlternatives_2.eContents().get(14);
		private final RuleCall cPayableExpressionParserRuleCall_2_15 = (RuleCall)cAlternatives_2.eContents().get(15);
		private final RuleCall cTypeCastingExpressionParserRuleCall_2_16 = (RuleCall)cAlternatives_2.eContents().get(16);
		
		//ReturnExpressionValue returns ecore::EString:
		//    RETURN NEW? (CryptographycFunctionsComparationExpresion|CryptographycFunctions|BracketExpression|SyntaxExpression|NumberExpression| "-" NumberExpression |TupleExpression| Identifier (OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression) COMMA?)* CLOSEPARENTHESIS)?|SingularType? Identifier |BOOLVALUE|IdentifierDotExpression (OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression) COMMA?)* CLOSEPARENTHESIS)? |ArithmeticalComparationExpression|ArithmeticalExpression|MSGVariables|BlockVariables|PayableExpression|TypeCastingExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RETURN NEW? (CryptographycFunctionsComparationExpresion|CryptographycFunctions|BracketExpression|SyntaxExpression|NumberExpression| "-" NumberExpression |TupleExpression| Identifier (OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression) COMMA?)* CLOSEPARENTHESIS)?|SingularType? Identifier |BOOLVALUE|IdentifierDotExpression (OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression) COMMA?)* CLOSEPARENTHESIS)? |ArithmeticalComparationExpression|ArithmeticalExpression|MSGVariables|BlockVariables|PayableExpression|TypeCastingExpression)
		public Group getGroup() { return cGroup; }
		
		//RETURN
		public RuleCall getRETURNTerminalRuleCall_0() { return cRETURNTerminalRuleCall_0; }
		
		//NEW?
		public RuleCall getNEWTerminalRuleCall_1() { return cNEWTerminalRuleCall_1; }
		
		//(CryptographycFunctionsComparationExpresion|CryptographycFunctions|BracketExpression|SyntaxExpression|NumberExpression| "-" NumberExpression |TupleExpression| Identifier (OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression) COMMA?)* CLOSEPARENTHESIS)?|SingularType? Identifier |BOOLVALUE|IdentifierDotExpression (OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression) COMMA?)* CLOSEPARENTHESIS)? |ArithmeticalComparationExpression|ArithmeticalExpression|MSGVariables|BlockVariables|PayableExpression|TypeCastingExpression)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//CryptographycFunctionsComparationExpresion
		public RuleCall getCryptographycFunctionsComparationExpresionParserRuleCall_2_0() { return cCryptographycFunctionsComparationExpresionParserRuleCall_2_0; }
		
		//CryptographycFunctions
		public RuleCall getCryptographycFunctionsParserRuleCall_2_1() { return cCryptographycFunctionsParserRuleCall_2_1; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_2_2() { return cBracketExpressionParserRuleCall_2_2; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_2_3() { return cSyntaxExpressionParserRuleCall_2_3; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_2_4() { return cNumberExpressionParserRuleCall_2_4; }
		
		//"-" NumberExpression
		public Group getGroup_2_5() { return cGroup_2_5; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_2_5_0() { return cHyphenMinusKeyword_2_5_0; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_2_5_1() { return cNumberExpressionParserRuleCall_2_5_1; }
		
		//TupleExpression
		public RuleCall getTupleExpressionParserRuleCall_2_6() { return cTupleExpressionParserRuleCall_2_6; }
		
		//Identifier (OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression) COMMA?)* CLOSEPARENTHESIS)?
		public Group getGroup_2_7() { return cGroup_2_7; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_7_0() { return cIdentifierParserRuleCall_2_7_0; }
		
		//(OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression) COMMA?)* CLOSEPARENTHESIS)?
		public Group getGroup_2_7_1() { return cGroup_2_7_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_2_7_1_0() { return cOPENPARENTHESISTerminalRuleCall_2_7_1_0; }
		
		//((Identifier|BracketExpression|IdentifierDotExpression) COMMA?)*
		public Group getGroup_2_7_1_1() { return cGroup_2_7_1_1; }
		
		//(Identifier|BracketExpression|IdentifierDotExpression)
		public Alternatives getAlternatives_2_7_1_1_0() { return cAlternatives_2_7_1_1_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_7_1_1_0_0() { return cIdentifierParserRuleCall_2_7_1_1_0_0; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_2_7_1_1_0_1() { return cBracketExpressionParserRuleCall_2_7_1_1_0_1; }
		
		//IdentifierDotExpression
		public RuleCall getIdentifierDotExpressionParserRuleCall_2_7_1_1_0_2() { return cIdentifierDotExpressionParserRuleCall_2_7_1_1_0_2; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_2_7_1_1_1() { return cCOMMATerminalRuleCall_2_7_1_1_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_2_7_1_2() { return cCLOSEPARENTHESISTerminalRuleCall_2_7_1_2; }
		
		//SingularType? Identifier
		public Group getGroup_2_8() { return cGroup_2_8; }
		
		//SingularType?
		public RuleCall getSingularTypeParserRuleCall_2_8_0() { return cSingularTypeParserRuleCall_2_8_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_8_1() { return cIdentifierParserRuleCall_2_8_1; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_2_9() { return cBOOLVALUETerminalRuleCall_2_9; }
		
		//IdentifierDotExpression (OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression) COMMA?)* CLOSEPARENTHESIS)?
		public Group getGroup_2_10() { return cGroup_2_10; }
		
		//IdentifierDotExpression
		public RuleCall getIdentifierDotExpressionParserRuleCall_2_10_0() { return cIdentifierDotExpressionParserRuleCall_2_10_0; }
		
		//(OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression) COMMA?)* CLOSEPARENTHESIS)?
		public Group getGroup_2_10_1() { return cGroup_2_10_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_2_10_1_0() { return cOPENPARENTHESISTerminalRuleCall_2_10_1_0; }
		
		//((Identifier|BracketExpression|IdentifierDotExpression) COMMA?)*
		public Group getGroup_2_10_1_1() { return cGroup_2_10_1_1; }
		
		//(Identifier|BracketExpression|IdentifierDotExpression)
		public Alternatives getAlternatives_2_10_1_1_0() { return cAlternatives_2_10_1_1_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_10_1_1_0_0() { return cIdentifierParserRuleCall_2_10_1_1_0_0; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_2_10_1_1_0_1() { return cBracketExpressionParserRuleCall_2_10_1_1_0_1; }
		
		//IdentifierDotExpression
		public RuleCall getIdentifierDotExpressionParserRuleCall_2_10_1_1_0_2() { return cIdentifierDotExpressionParserRuleCall_2_10_1_1_0_2; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_2_10_1_1_1() { return cCOMMATerminalRuleCall_2_10_1_1_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_2_10_1_2() { return cCLOSEPARENTHESISTerminalRuleCall_2_10_1_2; }
		
		//ArithmeticalComparationExpression
		public RuleCall getArithmeticalComparationExpressionParserRuleCall_2_11() { return cArithmeticalComparationExpressionParserRuleCall_2_11; }
		
		//ArithmeticalExpression
		public RuleCall getArithmeticalExpressionParserRuleCall_2_12() { return cArithmeticalExpressionParserRuleCall_2_12; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_2_13() { return cMSGVariablesParserRuleCall_2_13; }
		
		//BlockVariables
		public RuleCall getBlockVariablesParserRuleCall_2_14() { return cBlockVariablesParserRuleCall_2_14; }
		
		//PayableExpression
		public RuleCall getPayableExpressionParserRuleCall_2_15() { return cPayableExpressionParserRuleCall_2_15; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_2_16() { return cTypeCastingExpressionParserRuleCall_2_16; }
	}
	public class ReturnExpressionNoValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.ReturnExpressionNoValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRETURNTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ReturnExpressionNoValue returns ecore::EString:
		//    RETURN SEMICOLON
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RETURN SEMICOLON
		public Group getGroup() { return cGroup; }
		
		//RETURN
		public RuleCall getRETURNTerminalRuleCall_0() { return cRETURNTerminalRuleCall_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1() { return cSEMICOLONTerminalRuleCall_1; }
	}
	public class CryptographycFunctionsComparationExpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CryptographycFunctionsComparationExpresion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cCryptographycFunctionsParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIdentifierDotExpressionParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cCryptographycFunctionsParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final RuleCall cHexadecimalExpressionParserRuleCall_2_3 = (RuleCall)cAlternatives_2.eContents().get(3);
		private final RuleCall cIdentifierDotExpressionParserRuleCall_2_4 = (RuleCall)cAlternatives_2.eContents().get(4);
		private final RuleCall cSyntaxExpressionParserRuleCall_2_5 = (RuleCall)cAlternatives_2.eContents().get(5);
		private final RuleCall cBOOLVALUETerminalRuleCall_2_6 = (RuleCall)cAlternatives_2.eContents().get(6);
		private final RuleCall cNegationExpressionParserRuleCall_2_7 = (RuleCall)cAlternatives_2.eContents().get(7);
		private final RuleCall cMSGSENDERTerminalRuleCall_2_8 = (RuleCall)cAlternatives_2.eContents().get(8);
		
		//CryptographycFunctionsComparationExpresion returns ecore::EString:
		//    (CryptographycFunctions|Identifier|IdentifierDotExpression) ("=="|"!=") (CryptographycFunctions|Identifier|ADDRESSEXPRESION|HexadecimalExpression|IdentifierDotExpression|SyntaxExpression|BOOLVALUE|NegationExpression|MSGSENDER)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(CryptographycFunctions|Identifier|IdentifierDotExpression) ("=="|"!=") (CryptographycFunctions|Identifier|ADDRESSEXPRESION|HexadecimalExpression|IdentifierDotExpression|SyntaxExpression|BOOLVALUE|NegationExpression|MSGSENDER)
		public Group getGroup() { return cGroup; }
		
		//(CryptographycFunctions|Identifier|IdentifierDotExpression)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//CryptographycFunctions
		public RuleCall getCryptographycFunctionsParserRuleCall_0_0() { return cCryptographycFunctionsParserRuleCall_0_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_1() { return cIdentifierParserRuleCall_0_1; }
		
		//IdentifierDotExpression
		public RuleCall getIdentifierDotExpressionParserRuleCall_0_2() { return cIdentifierDotExpressionParserRuleCall_0_2; }
		
		//("=="|"!=")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0() { return cEqualsSignEqualsSignKeyword_1_0; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_1() { return cExclamationMarkEqualsSignKeyword_1_1; }
		
		//(CryptographycFunctions|Identifier|ADDRESSEXPRESION|HexadecimalExpression|IdentifierDotExpression|SyntaxExpression|BOOLVALUE|NegationExpression|MSGSENDER)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//CryptographycFunctions
		public RuleCall getCryptographycFunctionsParserRuleCall_2_0() { return cCryptographycFunctionsParserRuleCall_2_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_1() { return cIdentifierParserRuleCall_2_1; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_2_2() { return cADDRESSEXPRESIONTerminalRuleCall_2_2; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_2_3() { return cHexadecimalExpressionParserRuleCall_2_3; }
		
		//IdentifierDotExpression
		public RuleCall getIdentifierDotExpressionParserRuleCall_2_4() { return cIdentifierDotExpressionParserRuleCall_2_4; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_2_5() { return cSyntaxExpressionParserRuleCall_2_5; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_2_6() { return cBOOLVALUETerminalRuleCall_2_6; }
		
		//NegationExpression
		public RuleCall getNegationExpressionParserRuleCall_2_7() { return cNegationExpressionParserRuleCall_2_7; }
		
		//MSGSENDER
		public RuleCall getMSGSENDERTerminalRuleCall_2_8() { return cMSGSENDERTerminalRuleCall_2_8; }
	}
	public class ComparationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.ComparationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cNegationExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cSyntaxExpressionParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cNegationExpressionParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//ComparationExpression returns ecore::EString:
		//    (SyntaxExpression|NegationExpression) ("=="|"!=") (SyntaxExpression|NegationExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(SyntaxExpression|NegationExpression) ("=="|"!=") (SyntaxExpression|NegationExpression)
		public Group getGroup() { return cGroup; }
		
		//(SyntaxExpression|NegationExpression)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_0_0() { return cSyntaxExpressionParserRuleCall_0_0; }
		
		//NegationExpression
		public RuleCall getNegationExpressionParserRuleCall_0_1() { return cNegationExpressionParserRuleCall_0_1; }
		
		//("=="|"!=")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0() { return cEqualsSignEqualsSignKeyword_1_0; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_1() { return cExclamationMarkEqualsSignKeyword_1_1; }
		
		//(SyntaxExpression|NegationExpression)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_2_0() { return cSyntaxExpressionParserRuleCall_2_0; }
		
		//NegationExpression
		public RuleCall getNegationExpressionParserRuleCall_2_1() { return cNegationExpressionParserRuleCall_2_1; }
	}
	public class ArithmeticalComparationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.ArithmeticalComparationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cBOOLVALUETerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cNumberExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIncrementLoopExpressionParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cDecrementLoopExpressionParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cMSGVariablesParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cBCKTIMESTAMPTerminalRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cBCKNUMBERTerminalRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final Keyword cNowKeyword_0_8 = (Keyword)cAlternatives_0.eContents().get(8);
		private final RuleCall cBracketExpressionParserRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final Group cGroup_0_10 = (Group)cAlternatives_0.eContents().get(10);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_0_10_0 = (RuleCall)cGroup_0_10.eContents().get(0);
		private final Group cGroup_0_10_1 = (Group)cGroup_0_10.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_0_10_1_0 = (RuleCall)cGroup_0_10_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_0_10_1_1 = (RuleCall)cGroup_0_10_1.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cLessThanSignKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cLessThanSignEqualsSignKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cBOOLVALUETerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cNumberExpressionParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cIncrementLoopExpressionParserRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final RuleCall cDecrementLoopExpressionParserRuleCall_2_3 = (RuleCall)cAlternatives_2.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_2_4 = (RuleCall)cAlternatives_2.eContents().get(4);
		private final RuleCall cMSGVariablesParserRuleCall_2_5 = (RuleCall)cAlternatives_2.eContents().get(5);
		private final RuleCall cBCKTIMESTAMPTerminalRuleCall_2_6 = (RuleCall)cAlternatives_2.eContents().get(6);
		private final RuleCall cBCKNUMBERTerminalRuleCall_2_7 = (RuleCall)cAlternatives_2.eContents().get(7);
		private final Keyword cNowKeyword_2_8 = (Keyword)cAlternatives_2.eContents().get(8);
		private final RuleCall cBracketExpressionParserRuleCall_2_9 = (RuleCall)cAlternatives_2.eContents().get(9);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_2_10 = (RuleCall)cAlternatives_2.eContents().get(10);
		private final RuleCall cTypeCastingExpressionParserRuleCall_2_11 = (RuleCall)cAlternatives_2.eContents().get(11);
		
		//ArithmeticalComparationExpression returns ecore::EString:
		//    (BOOLVALUE|NumberExpression|IncrementLoopExpression|DecrementLoopExpression|Identifier|MSGVariables|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression (DOT Identifier)*)  ("=="|"!="|'>'|">="|'<'|"<=")  (BOOLVALUE|NumberExpression|IncrementLoopExpression|DecrementLoopExpression|Identifier|MSGVariables|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression|TypeCastingExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(BOOLVALUE|NumberExpression|IncrementLoopExpression|DecrementLoopExpression|Identifier|MSGVariables|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression (DOT Identifier)*)  ("=="|"!="|'>'|">="|'<'|"<=")  (BOOLVALUE|NumberExpression|IncrementLoopExpression|DecrementLoopExpression|Identifier|MSGVariables|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression|TypeCastingExpression)
		public Group getGroup() { return cGroup; }
		
		//(BOOLVALUE|NumberExpression|IncrementLoopExpression|DecrementLoopExpression|Identifier|MSGVariables|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression (DOT Identifier)*)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_0_0() { return cBOOLVALUETerminalRuleCall_0_0; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_0_1() { return cNumberExpressionParserRuleCall_0_1; }
		
		//IncrementLoopExpression
		public RuleCall getIncrementLoopExpressionParserRuleCall_0_2() { return cIncrementLoopExpressionParserRuleCall_0_2; }
		
		//DecrementLoopExpression
		public RuleCall getDecrementLoopExpressionParserRuleCall_0_3() { return cDecrementLoopExpressionParserRuleCall_0_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_4() { return cIdentifierParserRuleCall_0_4; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_0_5() { return cMSGVariablesParserRuleCall_0_5; }
		
		//BCKTIMESTAMP
		public RuleCall getBCKTIMESTAMPTerminalRuleCall_0_6() { return cBCKTIMESTAMPTerminalRuleCall_0_6; }
		
		//BCKNUMBER
		public RuleCall getBCKNUMBERTerminalRuleCall_0_7() { return cBCKNUMBERTerminalRuleCall_0_7; }
		
		//"now"
		public Keyword getNowKeyword_0_8() { return cNowKeyword_0_8; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_0_9() { return cBracketExpressionParserRuleCall_0_9; }
		
		//IdentifierValueExpression (DOT Identifier)*
		public Group getGroup_0_10() { return cGroup_0_10; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_0_10_0() { return cIdentifierValueExpressionParserRuleCall_0_10_0; }
		
		//(DOT Identifier)*
		public Group getGroup_0_10_1() { return cGroup_0_10_1; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_0_10_1_0() { return cDOTTerminalRuleCall_0_10_1_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_10_1_1() { return cIdentifierParserRuleCall_0_10_1_1; }
		
		//("=="|"!="|'>'|">="|'<'|"<=")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0() { return cEqualsSignEqualsSignKeyword_1_0; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_1() { return cExclamationMarkEqualsSignKeyword_1_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_2() { return cGreaterThanSignKeyword_1_2; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_3() { return cGreaterThanSignEqualsSignKeyword_1_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_4() { return cLessThanSignKeyword_1_4; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_5() { return cLessThanSignEqualsSignKeyword_1_5; }
		
		//(BOOLVALUE|NumberExpression|IncrementLoopExpression|DecrementLoopExpression|Identifier|MSGVariables|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression|TypeCastingExpression)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_2_0() { return cBOOLVALUETerminalRuleCall_2_0; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_2_1() { return cNumberExpressionParserRuleCall_2_1; }
		
		//IncrementLoopExpression
		public RuleCall getIncrementLoopExpressionParserRuleCall_2_2() { return cIncrementLoopExpressionParserRuleCall_2_2; }
		
		//DecrementLoopExpression
		public RuleCall getDecrementLoopExpressionParserRuleCall_2_3() { return cDecrementLoopExpressionParserRuleCall_2_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_4() { return cIdentifierParserRuleCall_2_4; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_2_5() { return cMSGVariablesParserRuleCall_2_5; }
		
		//BCKTIMESTAMP
		public RuleCall getBCKTIMESTAMPTerminalRuleCall_2_6() { return cBCKTIMESTAMPTerminalRuleCall_2_6; }
		
		//BCKNUMBER
		public RuleCall getBCKNUMBERTerminalRuleCall_2_7() { return cBCKNUMBERTerminalRuleCall_2_7; }
		
		//"now"
		public Keyword getNowKeyword_2_8() { return cNowKeyword_2_8; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_2_9() { return cBracketExpressionParserRuleCall_2_9; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_2_10() { return cIdentifierValueExpressionParserRuleCall_2_10; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_2_11() { return cTypeCastingExpressionParserRuleCall_2_11; }
	}
	public class NumberExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.NumberExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberExpression:
		//    (INT|FLOAT)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(INT|FLOAT)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_1() { return cFLOATTerminalRuleCall_1; }
	}
	public class ArithmeticalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.ArithmeticalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cNumberExpressionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cMSGVALUETerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cMSGBALANCETerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cBCKTIMESTAMPTerminalRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cBCKNUMBERTerminalRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final Keyword cNowKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final RuleCall cBracketExpressionParserRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cTimeExpressionParserRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final RuleCall cCoinExpressionParserRuleCall_0_10 = (RuleCall)cAlternatives_0.eContents().get(10);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Keyword cSolidusKeyword_1_0_3 = (Keyword)cAlternatives_1_0.eContents().get(3);
		private final Keyword cPercentSignKeyword_1_0_4 = (Keyword)cAlternatives_1_0.eContents().get(4);
		private final Keyword cAsteriskAsteriskKeyword_1_0_5 = (Keyword)cAlternatives_1_0.eContents().get(5);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cNumberExpressionParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cMSGVALUETerminalRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cMSGBALANCETerminalRuleCall_1_1_3 = (RuleCall)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cBCKTIMESTAMPTerminalRuleCall_1_1_4 = (RuleCall)cAlternatives_1_1.eContents().get(4);
		private final RuleCall cBCKNUMBERTerminalRuleCall_1_1_5 = (RuleCall)cAlternatives_1_1.eContents().get(5);
		private final Keyword cNowKeyword_1_1_6 = (Keyword)cAlternatives_1_1.eContents().get(6);
		private final RuleCall cBracketExpressionParserRuleCall_1_1_7 = (RuleCall)cAlternatives_1_1.eContents().get(7);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_1_1_8 = (RuleCall)cAlternatives_1_1.eContents().get(8);
		private final RuleCall cTimeExpressionParserRuleCall_1_1_9 = (RuleCall)cAlternatives_1_1.eContents().get(9);
		private final RuleCall cCoinExpressionParserRuleCall_1_1_10 = (RuleCall)cAlternatives_1_1.eContents().get(10);
		
		//ArithmeticalExpression returns ecore::EString:
		//    (NumberExpression|Identifier|MSGVALUE|MSGBALANCE|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression|TimeExpression|CoinExpression)  (('+'|'-'|'*'|'/'|'%'|"**")  (NumberExpression|Identifier|MSGVALUE|MSGBALANCE|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression|TimeExpression|CoinExpression))+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(NumberExpression|Identifier|MSGVALUE|MSGBALANCE|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression|TimeExpression|CoinExpression)  (('+'|'-'|'*'|'/'|'%'|"**")  (NumberExpression|Identifier|MSGVALUE|MSGBALANCE|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression|TimeExpression|CoinExpression))+
		public Group getGroup() { return cGroup; }
		
		//(NumberExpression|Identifier|MSGVALUE|MSGBALANCE|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression|TimeExpression|CoinExpression)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_0_0() { return cNumberExpressionParserRuleCall_0_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_1() { return cIdentifierParserRuleCall_0_1; }
		
		//MSGVALUE
		public RuleCall getMSGVALUETerminalRuleCall_0_2() { return cMSGVALUETerminalRuleCall_0_2; }
		
		//MSGBALANCE
		public RuleCall getMSGBALANCETerminalRuleCall_0_3() { return cMSGBALANCETerminalRuleCall_0_3; }
		
		//BCKTIMESTAMP
		public RuleCall getBCKTIMESTAMPTerminalRuleCall_0_4() { return cBCKTIMESTAMPTerminalRuleCall_0_4; }
		
		//BCKNUMBER
		public RuleCall getBCKNUMBERTerminalRuleCall_0_5() { return cBCKNUMBERTerminalRuleCall_0_5; }
		
		//"now"
		public Keyword getNowKeyword_0_6() { return cNowKeyword_0_6; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_0_7() { return cBracketExpressionParserRuleCall_0_7; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_0_8() { return cIdentifierValueExpressionParserRuleCall_0_8; }
		
		//TimeExpression
		public RuleCall getTimeExpressionParserRuleCall_0_9() { return cTimeExpressionParserRuleCall_0_9; }
		
		//CoinExpression
		public RuleCall getCoinExpressionParserRuleCall_0_10() { return cCoinExpressionParserRuleCall_0_10; }
		
		//(('+'|'-'|'*'|'/'|'%'|"**")  (NumberExpression|Identifier|MSGVALUE|MSGBALANCE|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression|TimeExpression|CoinExpression))+
		public Group getGroup_1() { return cGroup_1; }
		
		//('+'|'-'|'*'|'/'|'%'|"**")
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_2() { return cAsteriskKeyword_1_0_2; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_3() { return cSolidusKeyword_1_0_3; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_0_4() { return cPercentSignKeyword_1_0_4; }
		
		//"**"
		public Keyword getAsteriskAsteriskKeyword_1_0_5() { return cAsteriskAsteriskKeyword_1_0_5; }
		
		//(NumberExpression|Identifier|MSGVALUE|MSGBALANCE|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression|TimeExpression|CoinExpression)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_1_1_0() { return cNumberExpressionParserRuleCall_1_1_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1_1() { return cIdentifierParserRuleCall_1_1_1; }
		
		//MSGVALUE
		public RuleCall getMSGVALUETerminalRuleCall_1_1_2() { return cMSGVALUETerminalRuleCall_1_1_2; }
		
		//MSGBALANCE
		public RuleCall getMSGBALANCETerminalRuleCall_1_1_3() { return cMSGBALANCETerminalRuleCall_1_1_3; }
		
		//BCKTIMESTAMP
		public RuleCall getBCKTIMESTAMPTerminalRuleCall_1_1_4() { return cBCKTIMESTAMPTerminalRuleCall_1_1_4; }
		
		//BCKNUMBER
		public RuleCall getBCKNUMBERTerminalRuleCall_1_1_5() { return cBCKNUMBERTerminalRuleCall_1_1_5; }
		
		//"now"
		public Keyword getNowKeyword_1_1_6() { return cNowKeyword_1_1_6; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_1_1_7() { return cBracketExpressionParserRuleCall_1_1_7; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_1_1_8() { return cIdentifierValueExpressionParserRuleCall_1_1_8; }
		
		//TimeExpression
		public RuleCall getTimeExpressionParserRuleCall_1_1_9() { return cTimeExpressionParserRuleCall_1_1_9; }
		
		//CoinExpression
		public RuleCall getCoinExpressionParserRuleCall_1_1_10() { return cCoinExpressionParserRuleCall_1_1_10; }
	}
	public class IncrementLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.IncrementLoopExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//IncrementLoopExpression returns ecore::EString:
		//    INT "++" | Identifier "++"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT "++" | Identifier "++"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT "++"
		public Group getGroup_0() { return cGroup_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_0_1() { return cPlusSignPlusSignKeyword_0_1; }
		
		//Identifier "++"
		public Group getGroup_1() { return cGroup_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_0() { return cIdentifierParserRuleCall_1_0; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_1() { return cPlusSignPlusSignKeyword_1_1; }
	}
	public class DecrementLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.DecrementLoopExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//DecrementLoopExpression returns ecore::EString:
		//    INT "--" | Identifier "--"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT "--" | Identifier "--"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT "--"
		public Group getGroup_0() { return cGroup_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_0_1() { return cHyphenMinusHyphenMinusKeyword_0_1; }
		
		//Identifier "--"
		public Group getGroup_1() { return cGroup_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_0() { return cIdentifierParserRuleCall_1_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1; }
	}
	public class BitwiseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.BitwiseExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_0_0_2 = (RuleCall)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cTypeCastingExpressionParserRuleCall_0_0_3 = (RuleCall)cAlternatives_0_0.eContents().get(3);
		private final Keyword cVerticalLineKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_0_2_0 = (RuleCall)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_0_2_1 = (RuleCall)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_0_2_2 = (RuleCall)cAlternatives_0_2.eContents().get(2);
		private final RuleCall cBitwiseExpressionParserRuleCall_0_2_3 = (RuleCall)cAlternatives_0_2.eContents().get(3);
		private final RuleCall cTypeCastingExpressionParserRuleCall_0_2_4 = (RuleCall)cAlternatives_0_2.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cTypeCastingExpressionParserRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_2_0 = (RuleCall)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_2_1 = (RuleCall)cAlternatives_1_2.eContents().get(1);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_1_2_2 = (RuleCall)cAlternatives_1_2.eContents().get(2);
		private final RuleCall cBitwiseExpressionParserRuleCall_1_2_3 = (RuleCall)cAlternatives_1_2.eContents().get(3);
		private final RuleCall cTypeCastingExpressionParserRuleCall_1_2_4 = (RuleCall)cAlternatives_1_2.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_0_0 = (RuleCall)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_2_0_1 = (RuleCall)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_2_0_2 = (RuleCall)cAlternatives_2_0.eContents().get(2);
		private final RuleCall cTypeCastingExpressionParserRuleCall_2_0_3 = (RuleCall)cAlternatives_2_0.eContents().get(3);
		private final Keyword cCircumflexAccentKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_2_0 = (RuleCall)cAlternatives_2_2.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_2_2_1 = (RuleCall)cAlternatives_2_2.eContents().get(1);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_2_2_2 = (RuleCall)cAlternatives_2_2.eContents().get(2);
		private final RuleCall cBitwiseExpressionParserRuleCall_2_2_3 = (RuleCall)cAlternatives_2_2.eContents().get(3);
		private final RuleCall cTypeCastingExpressionParserRuleCall_2_2_4 = (RuleCall)cAlternatives_2_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_3_0_0 = (RuleCall)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_3_0_1 = (RuleCall)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_3_0_2 = (RuleCall)cAlternatives_3_0.eContents().get(2);
		private final RuleCall cTypeCastingExpressionParserRuleCall_3_0_3 = (RuleCall)cAlternatives_3_0.eContents().get(3);
		private final Keyword cTildeKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3_2_0 = (RuleCall)cAlternatives_3_2.eContents().get(0);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_3_2_1 = (RuleCall)cAlternatives_3_2.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_3_2_2 = (RuleCall)cAlternatives_3_2.eContents().get(2);
		private final RuleCall cBitwiseExpressionParserRuleCall_3_2_3 = (RuleCall)cAlternatives_3_2.eContents().get(3);
		private final RuleCall cTypeCastingExpressionParserRuleCall_3_2_4 = (RuleCall)cAlternatives_3_2.eContents().get(4);
		
		//BitwiseExpression returns ecore::EString:
		//    (INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "|" (INT|Identifier|IdentifierValueExpression|BitwiseExpression|TypeCastingExpression) | (INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "&" (INT|Identifier|IdentifierValueExpression|BitwiseExpression|TypeCastingExpression) | (INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "^" (INT|Identifier|IdentifierValueExpression|BitwiseExpression|TypeCastingExpression) | (INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "~" (INT|IdentifierValueExpression|Identifier|BitwiseExpression|TypeCastingExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "|" (INT|Identifier|IdentifierValueExpression|BitwiseExpression|TypeCastingExpression) | (INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "&" (INT|Identifier|IdentifierValueExpression|BitwiseExpression|TypeCastingExpression) | (INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "^" (INT|Identifier|IdentifierValueExpression|BitwiseExpression|TypeCastingExpression) | (INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "~" (INT|IdentifierValueExpression|Identifier|BitwiseExpression|TypeCastingExpression)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "|" (INT|Identifier|IdentifierValueExpression|BitwiseExpression|TypeCastingExpression)
		public Group getGroup_0() { return cGroup_0; }
		
		//(INT|Identifier|IdentifierValueExpression|TypeCastingExpression)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0_0() { return cINTTerminalRuleCall_0_0_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_0_1() { return cIdentifierParserRuleCall_0_0_1; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_0_0_2() { return cIdentifierValueExpressionParserRuleCall_0_0_2; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_0_0_3() { return cTypeCastingExpressionParserRuleCall_0_0_3; }
		
		//"|"
		public Keyword getVerticalLineKeyword_0_1() { return cVerticalLineKeyword_0_1; }
		
		//(INT|Identifier|IdentifierValueExpression|BitwiseExpression|TypeCastingExpression)
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_2_0() { return cINTTerminalRuleCall_0_2_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_2_1() { return cIdentifierParserRuleCall_0_2_1; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_0_2_2() { return cIdentifierValueExpressionParserRuleCall_0_2_2; }
		
		//BitwiseExpression
		public RuleCall getBitwiseExpressionParserRuleCall_0_2_3() { return cBitwiseExpressionParserRuleCall_0_2_3; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_0_2_4() { return cTypeCastingExpressionParserRuleCall_0_2_4; }
		
		//(INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "&" (INT|Identifier|IdentifierValueExpression|BitwiseExpression|TypeCastingExpression)
		public Group getGroup_1() { return cGroup_1; }
		
		//(INT|Identifier|IdentifierValueExpression|TypeCastingExpression)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0_0() { return cINTTerminalRuleCall_1_0_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_0_1() { return cIdentifierParserRuleCall_1_0_1; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_1_0_2() { return cIdentifierValueExpressionParserRuleCall_1_0_2; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_1_0_3() { return cTypeCastingExpressionParserRuleCall_1_0_3; }
		
		//"&"
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }
		
		//(INT|Identifier|IdentifierValueExpression|BitwiseExpression|TypeCastingExpression)
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2_0() { return cINTTerminalRuleCall_1_2_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_2_1() { return cIdentifierParserRuleCall_1_2_1; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_1_2_2() { return cIdentifierValueExpressionParserRuleCall_1_2_2; }
		
		//BitwiseExpression
		public RuleCall getBitwiseExpressionParserRuleCall_1_2_3() { return cBitwiseExpressionParserRuleCall_1_2_3; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_1_2_4() { return cTypeCastingExpressionParserRuleCall_1_2_4; }
		
		//(INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "^" (INT|Identifier|IdentifierValueExpression|BitwiseExpression|TypeCastingExpression)
		public Group getGroup_2() { return cGroup_2; }
		
		//(INT|Identifier|IdentifierValueExpression|TypeCastingExpression)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0_0() { return cINTTerminalRuleCall_2_0_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_0_1() { return cIdentifierParserRuleCall_2_0_1; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_2_0_2() { return cIdentifierValueExpressionParserRuleCall_2_0_2; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_2_0_3() { return cTypeCastingExpressionParserRuleCall_2_0_3; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_2_1() { return cCircumflexAccentKeyword_2_1; }
		
		//(INT|Identifier|IdentifierValueExpression|BitwiseExpression|TypeCastingExpression)
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_2_0() { return cINTTerminalRuleCall_2_2_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_2_1() { return cIdentifierParserRuleCall_2_2_1; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_2_2_2() { return cIdentifierValueExpressionParserRuleCall_2_2_2; }
		
		//BitwiseExpression
		public RuleCall getBitwiseExpressionParserRuleCall_2_2_3() { return cBitwiseExpressionParserRuleCall_2_2_3; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_2_2_4() { return cTypeCastingExpressionParserRuleCall_2_2_4; }
		
		//(INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "~" (INT|IdentifierValueExpression|Identifier|BitwiseExpression|TypeCastingExpression)
		public Group getGroup_3() { return cGroup_3; }
		
		//(INT|Identifier|IdentifierValueExpression|TypeCastingExpression)
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_0_0() { return cINTTerminalRuleCall_3_0_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_3_0_1() { return cIdentifierParserRuleCall_3_0_1; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_3_0_2() { return cIdentifierValueExpressionParserRuleCall_3_0_2; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_3_0_3() { return cTypeCastingExpressionParserRuleCall_3_0_3; }
		
		//"~"
		public Keyword getTildeKeyword_3_1() { return cTildeKeyword_3_1; }
		
		//(INT|IdentifierValueExpression|Identifier|BitwiseExpression|TypeCastingExpression)
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_2_0() { return cINTTerminalRuleCall_3_2_0; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_3_2_1() { return cIdentifierValueExpressionParserRuleCall_3_2_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_3_2_2() { return cIdentifierParserRuleCall_3_2_2; }
		
		//BitwiseExpression
		public RuleCall getBitwiseExpressionParserRuleCall_3_2_3() { return cBitwiseExpressionParserRuleCall_3_2_3; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_3_2_4() { return cTypeCastingExpressionParserRuleCall_3_2_4; }
	}
	public class ShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.ShiftExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_0_2_0 = (RuleCall)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_0_2_1 = (RuleCall)cAlternatives_0_2.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_2_0 = (RuleCall)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_2_1 = (RuleCall)cAlternatives_1_2.eContents().get(1);
		
		//ShiftExpression returns ecore::EString:
		//    ((INT|Identifier) ">>" (INT|Identifier)  | (INT|Identifier) "<<" (INT|Identifier))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//((INT|Identifier) ">>" (INT|Identifier)  | (INT|Identifier) "<<" (INT|Identifier))
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(INT|Identifier) ">>" (INT|Identifier)
		public Group getGroup_0() { return cGroup_0; }
		
		//(INT|Identifier)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0_0() { return cINTTerminalRuleCall_0_0_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_0_1() { return cIdentifierParserRuleCall_0_0_1; }
		
		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_0_1() { return cGreaterThanSignGreaterThanSignKeyword_0_1; }
		
		//(INT|Identifier)
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_2_0() { return cINTTerminalRuleCall_0_2_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_2_1() { return cIdentifierParserRuleCall_0_2_1; }
		
		//(INT|Identifier) "<<" (INT|Identifier)
		public Group getGroup_1() { return cGroup_1; }
		
		//(INT|Identifier)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0_0() { return cINTTerminalRuleCall_1_0_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_0_1() { return cIdentifierParserRuleCall_1_0_1; }
		
		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_1_1() { return cLessThanSignLessThanSignKeyword_1_1; }
		
		//(INT|Identifier)
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2_0() { return cINTTerminalRuleCall_1_2_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_2_1() { return cIdentifierParserRuleCall_1_2_1; }
	}
	public class CallFunctionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CallFunctionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_0_1_1_0 = (RuleCall)cGroup_0_1_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_0_1_1_1 = (RuleCall)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_0_1_1_2 = (RuleCall)cGroup_0_1_1.eContents().get(2);
		private final RuleCall cIdentifierParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_3_0_0 = (RuleCall)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_3_0_1 = (RuleCall)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cHexadecimalExpressionParserRuleCall_3_0_2 = (RuleCall)cAlternatives_3_0.eContents().get(2);
		private final RuleCall cBlockVariablesParserRuleCall_3_0_3 = (RuleCall)cAlternatives_3_0.eContents().get(3);
		private final RuleCall cMSGVariablesParserRuleCall_3_0_4 = (RuleCall)cAlternatives_3_0.eContents().get(4);
		private final RuleCall cIdentifierParserRuleCall_3_0_5 = (RuleCall)cAlternatives_3_0.eContents().get(5);
		private final RuleCall cIdentifierDotExpressionParserRuleCall_3_0_6 = (RuleCall)cAlternatives_3_0.eContents().get(6);
		private final RuleCall cTypeCastingExpressionParserRuleCall_3_0_7 = (RuleCall)cAlternatives_3_0.eContents().get(7);
		private final RuleCall cBracketExpressionParserRuleCall_3_0_8 = (RuleCall)cAlternatives_3_0.eContents().get(8);
		private final RuleCall cNumberExpressionParserRuleCall_3_0_9 = (RuleCall)cAlternatives_3_0.eContents().get(9);
		private final RuleCall cArithmeticalExpressionParserRuleCall_3_0_10 = (RuleCall)cAlternatives_3_0.eContents().get(10);
		private final RuleCall cArithmeticalComparationExpressionParserRuleCall_3_0_11 = (RuleCall)cAlternatives_3_0.eContents().get(11);
		private final RuleCall cAbyExpressionParserRuleCall_3_0_12 = (RuleCall)cAlternatives_3_0.eContents().get(12);
		private final RuleCall cParenthesisExpressionParserRuleCall_3_0_13 = (RuleCall)cAlternatives_3_0.eContents().get(13);
		private final Keyword cNowKeyword_3_0_14 = (Keyword)cAlternatives_3_0.eContents().get(14);
		private final RuleCall cCOMMATerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//CallFunctionExpression returns ecore::EString:
		//    (IdentifierValueExpression|Identifier (OPENPARENTHESIS (Identifier) CLOSEPARENTHESIS)|Identifier)  (DOT Identifier)* OPENPARENTHESIS ((SyntaxExpression|ADDRESSEXPRESION|HexadecimalExpression|BlockVariables|MSGVariables| Identifier|IdentifierDotExpression|TypeCastingExpression|BracketExpression|NumberExpression|ArithmeticalExpression|ArithmeticalComparationExpression|AbyExpression|ParenthesisExpression|"now") COMMA? )* CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(IdentifierValueExpression|Identifier (OPENPARENTHESIS (Identifier) CLOSEPARENTHESIS)|Identifier)  (DOT Identifier)* OPENPARENTHESIS ((SyntaxExpression|ADDRESSEXPRESION|HexadecimalExpression|BlockVariables|MSGVariables| Identifier|IdentifierDotExpression|TypeCastingExpression|BracketExpression|NumberExpression|ArithmeticalExpression|ArithmeticalComparationExpression|AbyExpression|ParenthesisExpression|"now") COMMA? )* CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//(IdentifierValueExpression|Identifier (OPENPARENTHESIS (Identifier) CLOSEPARENTHESIS)|Identifier)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_0_0() { return cIdentifierValueExpressionParserRuleCall_0_0; }
		
		//Identifier (OPENPARENTHESIS (Identifier) CLOSEPARENTHESIS)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_1_0() { return cIdentifierParserRuleCall_0_1_0; }
		
		//(OPENPARENTHESIS (Identifier) CLOSEPARENTHESIS)
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_0_1_1_0() { return cOPENPARENTHESISTerminalRuleCall_0_1_1_0; }
		
		//(Identifier)
		public RuleCall getIdentifierParserRuleCall_0_1_1_1() { return cIdentifierParserRuleCall_0_1_1_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_0_1_1_2() { return cCLOSEPARENTHESISTerminalRuleCall_0_1_1_2; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_2() { return cIdentifierParserRuleCall_0_2; }
		
		//(DOT Identifier)*
		public Group getGroup_1() { return cGroup_1; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1_0() { return cDOTTerminalRuleCall_1_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1() { return cIdentifierParserRuleCall_1_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_2() { return cOPENPARENTHESISTerminalRuleCall_2; }
		
		//((SyntaxExpression|ADDRESSEXPRESION|HexadecimalExpression|BlockVariables|MSGVariables| Identifier|IdentifierDotExpression|TypeCastingExpression|BracketExpression|NumberExpression|ArithmeticalExpression|ArithmeticalComparationExpression|AbyExpression|ParenthesisExpression|"now") COMMA? )*
		public Group getGroup_3() { return cGroup_3; }
		
		//(SyntaxExpression|ADDRESSEXPRESION|HexadecimalExpression|BlockVariables|MSGVariables| Identifier|IdentifierDotExpression|TypeCastingExpression|BracketExpression|NumberExpression|ArithmeticalExpression|ArithmeticalComparationExpression|AbyExpression|ParenthesisExpression|"now")
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_3_0_0() { return cSyntaxExpressionParserRuleCall_3_0_0; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_3_0_1() { return cADDRESSEXPRESIONTerminalRuleCall_3_0_1; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_3_0_2() { return cHexadecimalExpressionParserRuleCall_3_0_2; }
		
		//BlockVariables
		public RuleCall getBlockVariablesParserRuleCall_3_0_3() { return cBlockVariablesParserRuleCall_3_0_3; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_3_0_4() { return cMSGVariablesParserRuleCall_3_0_4; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_3_0_5() { return cIdentifierParserRuleCall_3_0_5; }
		
		//IdentifierDotExpression
		public RuleCall getIdentifierDotExpressionParserRuleCall_3_0_6() { return cIdentifierDotExpressionParserRuleCall_3_0_6; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_3_0_7() { return cTypeCastingExpressionParserRuleCall_3_0_7; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_3_0_8() { return cBracketExpressionParserRuleCall_3_0_8; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_3_0_9() { return cNumberExpressionParserRuleCall_3_0_9; }
		
		//ArithmeticalExpression
		public RuleCall getArithmeticalExpressionParserRuleCall_3_0_10() { return cArithmeticalExpressionParserRuleCall_3_0_10; }
		
		//ArithmeticalComparationExpression
		public RuleCall getArithmeticalComparationExpressionParserRuleCall_3_0_11() { return cArithmeticalComparationExpressionParserRuleCall_3_0_11; }
		
		//AbyExpression
		public RuleCall getAbyExpressionParserRuleCall_3_0_12() { return cAbyExpressionParserRuleCall_3_0_12; }
		
		//ParenthesisExpression
		public RuleCall getParenthesisExpressionParserRuleCall_3_0_13() { return cParenthesisExpressionParserRuleCall_3_0_13; }
		
		//"now"
		public Keyword getNowKeyword_3_0_14() { return cNowKeyword_3_0_14; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_3_1() { return cCOMMATerminalRuleCall_3_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_4() { return cCLOSEPARENTHESISTerminalRuleCall_4; }
	}
	public class ParenthesisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.ParenthesisExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1_0_0 = (RuleCall)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1_0_1 = (RuleCall)cAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cIdentifierDotExpressionParserRuleCall_1_1_0_2 = (RuleCall)cAlternatives_1_1_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_1_0_3 = (RuleCall)cAlternatives_1_1_0.eContents().get(3);
		private final RuleCall cBOOLVALUETerminalRuleCall_1_1_0_4 = (RuleCall)cAlternatives_1_1_0.eContents().get(4);
		private final RuleCall cMSGVariablesParserRuleCall_1_1_0_5 = (RuleCall)cAlternatives_1_1_0.eContents().get(5);
		private final RuleCall cHEXEXPRESSIONTerminalRuleCall_1_1_0_6 = (RuleCall)cAlternatives_1_1_0.eContents().get(6);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_1_1_0_7 = (RuleCall)cAlternatives_1_1_0.eContents().get(7);
		private final Keyword cNowKeyword_1_1_0_8 = (Keyword)cAlternatives_1_1_0.eContents().get(8);
		private final RuleCall cTypeCastingExpressionParserRuleCall_1_1_0_9 = (RuleCall)cAlternatives_1_1_0.eContents().get(9);
		private final RuleCall cCOMMATerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cDOTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//ParenthesisExpression returns ecore::EString:
		//    Identifier (OPENPARENTHESIS ((STRING|Identifier|IdentifierDotExpression|INT|BOOLVALUE|MSGVariables|HEXEXPRESSION|ADDRESSEXPRESION|"now"|TypeCastingExpression) COMMA?)* CLOSEPARENTHESIS) (DOT Expression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Identifier (OPENPARENTHESIS ((STRING|Identifier|IdentifierDotExpression|INT|BOOLVALUE|MSGVariables|HEXEXPRESSION|ADDRESSEXPRESION|"now"|TypeCastingExpression) COMMA?)* CLOSEPARENTHESIS) (DOT Expression)?
		public Group getGroup() { return cGroup; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//(OPENPARENTHESIS ((STRING|Identifier|IdentifierDotExpression|INT|BOOLVALUE|MSGVariables|HEXEXPRESSION|ADDRESSEXPRESION|"now"|TypeCastingExpression) COMMA?)* CLOSEPARENTHESIS)
		public Group getGroup_1() { return cGroup_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1_0() { return cOPENPARENTHESISTerminalRuleCall_1_0; }
		
		//((STRING|Identifier|IdentifierDotExpression|INT|BOOLVALUE|MSGVariables|HEXEXPRESSION|ADDRESSEXPRESION|"now"|TypeCastingExpression) COMMA?)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//(STRING|Identifier|IdentifierDotExpression|INT|BOOLVALUE|MSGVariables|HEXEXPRESSION|ADDRESSEXPRESION|"now"|TypeCastingExpression)
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1_0_0() { return cSTRINGTerminalRuleCall_1_1_0_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1_0_1() { return cIdentifierParserRuleCall_1_1_0_1; }
		
		//IdentifierDotExpression
		public RuleCall getIdentifierDotExpressionParserRuleCall_1_1_0_2() { return cIdentifierDotExpressionParserRuleCall_1_1_0_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_0_3() { return cINTTerminalRuleCall_1_1_0_3; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_1_1_0_4() { return cBOOLVALUETerminalRuleCall_1_1_0_4; }
		
		//MSGVariables
		public RuleCall getMSGVariablesParserRuleCall_1_1_0_5() { return cMSGVariablesParserRuleCall_1_1_0_5; }
		
		//HEXEXPRESSION
		public RuleCall getHEXEXPRESSIONTerminalRuleCall_1_1_0_6() { return cHEXEXPRESSIONTerminalRuleCall_1_1_0_6; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_1_1_0_7() { return cADDRESSEXPRESIONTerminalRuleCall_1_1_0_7; }
		
		//"now"
		public Keyword getNowKeyword_1_1_0_8() { return cNowKeyword_1_1_0_8; }
		
		//TypeCastingExpression
		public RuleCall getTypeCastingExpressionParserRuleCall_1_1_0_9() { return cTypeCastingExpressionParserRuleCall_1_1_0_9; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_1_1_1() { return cCOMMATerminalRuleCall_1_1_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_1_2() { return cCLOSEPARENTHESISTerminalRuleCall_1_2; }
		
		//(DOT Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_2_0() { return cDOTTerminalRuleCall_2_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }
	}
	public class BracketExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.BracketExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_1_2 = (Alternatives)cGroup_1_1_1.eContents().get(2);
		private final RuleCall cIdentifierParserRuleCall_1_1_1_2_0 = (RuleCall)cAlternatives_1_1_1_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1_2_1 = (RuleCall)cAlternatives_1_1_1_2.eContents().get(1);
		private final RuleCall cBOOLVALUETerminalRuleCall_1_1_1_2_2 = (RuleCall)cAlternatives_1_1_1_2.eContents().get(2);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_1_1_1_2_3 = (RuleCall)cAlternatives_1_1_1_2.eContents().get(3);
		private final RuleCall cHexadecimalExpressionParserRuleCall_1_1_1_2_4 = (RuleCall)cAlternatives_1_1_1_2.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_1_1_1_3 = (Keyword)cGroup_1_1_1.eContents().get(3);
		private final RuleCall cIdentifierValueExpressionParserRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_1_3 = (RuleCall)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cBOOLVALUETerminalRuleCall_1_1_4 = (RuleCall)cAlternatives_1_1.eContents().get(4);
		private final RuleCall cMSGSENDERTerminalRuleCall_1_1_5 = (RuleCall)cAlternatives_1_1.eContents().get(5);
		private final RuleCall cHEXEXPRESSIONTerminalRuleCall_1_1_6 = (RuleCall)cAlternatives_1_1.eContents().get(6);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_1_1_7 = (RuleCall)cAlternatives_1_1.eContents().get(7);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cDOTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//BracketExpression returns ecore::EString:
		//    Identifier ('[' (Identifier|Identifier '[' (Identifier|INT|BOOLVALUE|ADDRESSEXPRESION|HexadecimalExpression) ']'|IdentifierValueExpression|INT|BOOLVALUE|MSGSENDER|HEXEXPRESSION|ADDRESSEXPRESION) ']')+ (DOT Identifier)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Identifier ('[' (Identifier|Identifier '[' (Identifier|INT|BOOLVALUE|ADDRESSEXPRESION|HexadecimalExpression) ']'|IdentifierValueExpression|INT|BOOLVALUE|MSGSENDER|HEXEXPRESSION|ADDRESSEXPRESION) ']')+ (DOT Identifier)*
		public Group getGroup() { return cGroup; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//('[' (Identifier|Identifier '[' (Identifier|INT|BOOLVALUE|ADDRESSEXPRESION|HexadecimalExpression) ']'|IdentifierValueExpression|INT|BOOLVALUE|MSGSENDER|HEXEXPRESSION|ADDRESSEXPRESION) ']')+
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//(Identifier|Identifier '[' (Identifier|INT|BOOLVALUE|ADDRESSEXPRESION|HexadecimalExpression) ']'|IdentifierValueExpression|INT|BOOLVALUE|MSGSENDER|HEXEXPRESSION|ADDRESSEXPRESION)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1_0() { return cIdentifierParserRuleCall_1_1_0; }
		
		//Identifier '[' (Identifier|INT|BOOLVALUE|ADDRESSEXPRESION|HexadecimalExpression) ']'
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1_1_0() { return cIdentifierParserRuleCall_1_1_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_1_1() { return cLeftSquareBracketKeyword_1_1_1_1; }
		
		//(Identifier|INT|BOOLVALUE|ADDRESSEXPRESION|HexadecimalExpression)
		public Alternatives getAlternatives_1_1_1_2() { return cAlternatives_1_1_1_2; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1_1_2_0() { return cIdentifierParserRuleCall_1_1_1_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1_2_1() { return cINTTerminalRuleCall_1_1_1_2_1; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_1_1_1_2_2() { return cBOOLVALUETerminalRuleCall_1_1_1_2_2; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_1_1_1_2_3() { return cADDRESSEXPRESIONTerminalRuleCall_1_1_1_2_3; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_1_1_1_2_4() { return cHexadecimalExpressionParserRuleCall_1_1_1_2_4; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_1_3() { return cRightSquareBracketKeyword_1_1_1_3; }
		
		//IdentifierValueExpression
		public RuleCall getIdentifierValueExpressionParserRuleCall_1_1_2() { return cIdentifierValueExpressionParserRuleCall_1_1_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_3() { return cINTTerminalRuleCall_1_1_3; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_1_1_4() { return cBOOLVALUETerminalRuleCall_1_1_4; }
		
		//MSGSENDER
		public RuleCall getMSGSENDERTerminalRuleCall_1_1_5() { return cMSGSENDERTerminalRuleCall_1_1_5; }
		
		//HEXEXPRESSION
		public RuleCall getHEXEXPRESSIONTerminalRuleCall_1_1_6() { return cHEXEXPRESSIONTerminalRuleCall_1_1_6; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_1_1_7() { return cADDRESSEXPRESIONTerminalRuleCall_1_1_7; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//(DOT Identifier)*
		public Group getGroup_2() { return cGroup_2; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_2_0() { return cDOTTerminalRuleCall_2_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_1() { return cIdentifierParserRuleCall_2_1; }
	}
	public class IdentifierValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.IdentifierValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//IdentifierValueExpression returns ecore::EString:
		//    Identifier DOT Identifier
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Identifier DOT Identifier
		public Group getGroup() { return cGroup; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1() { return cDOTTerminalRuleCall_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2() { return cIdentifierParserRuleCall_2; }
	}
	public class IdentifierDotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.IdentifierDotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cDOTTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//IdentifierDotExpression returns ecore::EString:
		//    Identifier DOT Identifier (DOT Identifier)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Identifier DOT Identifier (DOT Identifier)*
		public Group getGroup() { return cGroup; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1() { return cDOTTerminalRuleCall_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2() { return cIdentifierParserRuleCall_2; }
		
		//(DOT Identifier)*
		public Group getGroup_3() { return cGroup_3; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_3_0() { return cDOTTerminalRuleCall_3_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_3_1() { return cIdentifierParserRuleCall_3_1; }
	}
	public class AssemblyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.AssemblyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssemblyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENKEYTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Keyword cLetKeyword_2_0_0_0 = (Keyword)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_2_0_0_1 = (RuleCall)cGroup_2_0_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_2_0_0_2 = (Keyword)cGroup_2_0_0.eContents().get(2);
		private final Alternatives cAlternatives_2_0_0_3 = (Alternatives)cGroup_2_0_0.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_2_0_0_3_0 = (RuleCall)cAlternatives_2_0_0_3.eContents().get(0);
		private final RuleCall cNumberExpressionParserRuleCall_2_0_0_3_1 = (RuleCall)cAlternatives_2_0_0_3.eContents().get(1);
		private final RuleCall cArithmeticalExpressionParserRuleCall_2_0_0_3_2 = (RuleCall)cAlternatives_2_0_0_3.eContents().get(2);
		private final RuleCall cCallFunctionExpressionParserRuleCall_2_0_0_3_3 = (RuleCall)cAlternatives_2_0_0_3.eContents().get(3);
		private final RuleCall cCallFunctionExpressionParserRuleCall_2_0_1 = (RuleCall)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cEOLINETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cCLOSEKEYTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//AssemblyExpression returns ecore::EString:
		//    "assembly" OPENKEY ((("let"? Identifier ":=" (Identifier|NumberExpression|ArithmeticalExpression|CallFunctionExpression)) | CallFunctionExpression)  EOLINE?)* CLOSEKEY
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"assembly" OPENKEY ((("let"? Identifier ":=" (Identifier|NumberExpression|ArithmeticalExpression|CallFunctionExpression)) | CallFunctionExpression)  EOLINE?)* CLOSEKEY
		public Group getGroup() { return cGroup; }
		
		//"assembly"
		public Keyword getAssemblyKeyword_0() { return cAssemblyKeyword_0; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_1() { return cOPENKEYTerminalRuleCall_1; }
		
		//((("let"? Identifier ":=" (Identifier|NumberExpression|ArithmeticalExpression|CallFunctionExpression)) | CallFunctionExpression)  EOLINE?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(("let"? Identifier ":=" (Identifier|NumberExpression|ArithmeticalExpression|CallFunctionExpression)) | CallFunctionExpression)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//("let"? Identifier ":=" (Identifier|NumberExpression|ArithmeticalExpression|CallFunctionExpression))
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//"let"?
		public Keyword getLetKeyword_2_0_0_0() { return cLetKeyword_2_0_0_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_0_0_1() { return cIdentifierParserRuleCall_2_0_0_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_2_0_0_2() { return cColonEqualsSignKeyword_2_0_0_2; }
		
		//(Identifier|NumberExpression|ArithmeticalExpression|CallFunctionExpression)
		public Alternatives getAlternatives_2_0_0_3() { return cAlternatives_2_0_0_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_0_0_3_0() { return cIdentifierParserRuleCall_2_0_0_3_0; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_2_0_0_3_1() { return cNumberExpressionParserRuleCall_2_0_0_3_1; }
		
		//ArithmeticalExpression
		public RuleCall getArithmeticalExpressionParserRuleCall_2_0_0_3_2() { return cArithmeticalExpressionParserRuleCall_2_0_0_3_2; }
		
		//CallFunctionExpression
		public RuleCall getCallFunctionExpressionParserRuleCall_2_0_0_3_3() { return cCallFunctionExpressionParserRuleCall_2_0_0_3_3; }
		
		//CallFunctionExpression
		public RuleCall getCallFunctionExpressionParserRuleCall_2_0_1() { return cCallFunctionExpressionParserRuleCall_2_0_1; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_2_1() { return cEOLINETerminalRuleCall_2_1; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_3() { return cCLOSEKEYTerminalRuleCall_3; }
	}
	public class RevertExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.RevertExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRevertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final RuleCall cParenthesisExpressionParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//RevertExpression returns ecore::EString:
		//    "revert" (OPENPARENTHESIS SyntaxExpression? CLOSEPARENTHESIS | ParenthesisExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"revert" (OPENPARENTHESIS SyntaxExpression? CLOSEPARENTHESIS | ParenthesisExpression)
		public Group getGroup() { return cGroup; }
		
		//"revert"
		public Keyword getRevertKeyword_0() { return cRevertKeyword_0; }
		
		//(OPENPARENTHESIS SyntaxExpression? CLOSEPARENTHESIS | ParenthesisExpression)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//OPENPARENTHESIS SyntaxExpression? CLOSEPARENTHESIS
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1_0_0() { return cOPENPARENTHESISTerminalRuleCall_1_0_0; }
		
		//SyntaxExpression?
		public RuleCall getSyntaxExpressionParserRuleCall_1_0_1() { return cSyntaxExpressionParserRuleCall_1_0_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_1_0_2() { return cCLOSEPARENTHESISTerminalRuleCall_1_0_2; }
		
		//ParenthesisExpression
		public RuleCall getParenthesisExpressionParserRuleCall_1_1() { return cParenthesisExpressionParserRuleCall_1_1; }
	}
	public class DeleteExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.DeleteExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cBracketExpressionParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//DeleteExpression returns ecore::EString:
		//    "delete" (Identifier|BracketExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"delete" (Identifier|BracketExpression)
		public Group getGroup() { return cGroup; }
		
		//"delete"
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//(Identifier|BracketExpression)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_0() { return cIdentifierParserRuleCall_1_0; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_1_1() { return cBracketExpressionParserRuleCall_1_1; }
	}
	public class StructInicializationKeyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.StructInicializationKeyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cOPENKEYTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_2 = (Alternatives)cGroup_1_1.eContents().get(2);
		private final RuleCall cIdentifierParserRuleCall_1_1_2_0 = (RuleCall)cAlternatives_1_1_2.eContents().get(0);
		private final RuleCall cSyntaxExpressionParserRuleCall_1_1_2_1 = (RuleCall)cAlternatives_1_1_2.eContents().get(1);
		private final RuleCall cNumberExpressionParserRuleCall_1_1_2_2 = (RuleCall)cAlternatives_1_1_2.eContents().get(2);
		private final RuleCall cBOOLVALUETerminalRuleCall_1_1_2_3 = (RuleCall)cAlternatives_1_1_2.eContents().get(3);
		private final RuleCall cBracketExpressionParserRuleCall_1_1_2_4 = (RuleCall)cAlternatives_1_1_2.eContents().get(4);
		private final RuleCall cADDRESSEXPRESIONTerminalRuleCall_1_1_2_5 = (RuleCall)cAlternatives_1_1_2.eContents().get(5);
		private final RuleCall cHexadecimalExpressionParserRuleCall_1_1_2_6 = (RuleCall)cAlternatives_1_1_2.eContents().get(6);
		private final RuleCall cIdentifierDotExpressionParserRuleCall_1_1_2_7 = (RuleCall)cAlternatives_1_1_2.eContents().get(7);
		private final RuleCall cCOMMATerminalRuleCall_1_1_3 = (RuleCall)cGroup_1_1.eContents().get(3);
		private final RuleCall cCLOSEKEYTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//StructInicializationKeyExpression returns ecore::EString:
		//    OPENPARENTHESIS (OPENKEY (Identifier ':' (Identifier|SyntaxExpression|NumberExpression|BOOLVALUE|BracketExpression|ADDRESSEXPRESION|HexadecimalExpression|IdentifierDotExpression) COMMA?)* CLOSEKEY) CLOSEPARENTHESIS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OPENPARENTHESIS (OPENKEY (Identifier ':' (Identifier|SyntaxExpression|NumberExpression|BOOLVALUE|BracketExpression|ADDRESSEXPRESION|HexadecimalExpression|IdentifierDotExpression) COMMA?)* CLOSEKEY) CLOSEPARENTHESIS
		public Group getGroup() { return cGroup; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_0() { return cOPENPARENTHESISTerminalRuleCall_0; }
		
		//(OPENKEY (Identifier ':' (Identifier|SyntaxExpression|NumberExpression|BOOLVALUE|BracketExpression|ADDRESSEXPRESION|HexadecimalExpression|IdentifierDotExpression) COMMA?)* CLOSEKEY)
		public Group getGroup_1() { return cGroup_1; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_1_0() { return cOPENKEYTerminalRuleCall_1_0; }
		
		//(Identifier ':' (Identifier|SyntaxExpression|NumberExpression|BOOLVALUE|BracketExpression|ADDRESSEXPRESION|HexadecimalExpression|IdentifierDotExpression) COMMA?)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1_0() { return cIdentifierParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1_1() { return cColonKeyword_1_1_1; }
		
		//(Identifier|SyntaxExpression|NumberExpression|BOOLVALUE|BracketExpression|ADDRESSEXPRESION|HexadecimalExpression|IdentifierDotExpression)
		public Alternatives getAlternatives_1_1_2() { return cAlternatives_1_1_2; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1_2_0() { return cIdentifierParserRuleCall_1_1_2_0; }
		
		//SyntaxExpression
		public RuleCall getSyntaxExpressionParserRuleCall_1_1_2_1() { return cSyntaxExpressionParserRuleCall_1_1_2_1; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_1_1_2_2() { return cNumberExpressionParserRuleCall_1_1_2_2; }
		
		//BOOLVALUE
		public RuleCall getBOOLVALUETerminalRuleCall_1_1_2_3() { return cBOOLVALUETerminalRuleCall_1_1_2_3; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_1_1_2_4() { return cBracketExpressionParserRuleCall_1_1_2_4; }
		
		//ADDRESSEXPRESION
		public RuleCall getADDRESSEXPRESIONTerminalRuleCall_1_1_2_5() { return cADDRESSEXPRESIONTerminalRuleCall_1_1_2_5; }
		
		//HexadecimalExpression
		public RuleCall getHexadecimalExpressionParserRuleCall_1_1_2_6() { return cHexadecimalExpressionParserRuleCall_1_1_2_6; }
		
		//IdentifierDotExpression
		public RuleCall getIdentifierDotExpressionParserRuleCall_1_1_2_7() { return cIdentifierDotExpressionParserRuleCall_1_1_2_7; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_1_1_3() { return cCOMMATerminalRuleCall_1_1_3; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_1_2() { return cCLOSEKEYTerminalRuleCall_1_2; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_2() { return cCLOSEPARENTHESISTerminalRuleCall_2; }
	}
	public class LogicalComparationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.LogicalComparationExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LogicalComparationExpression returns ecore::EString:
		//    AndExpression|OrExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression|OrExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_1() { return cOrExpressionParserRuleCall_1; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cNegationExpressionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cArithmeticalComparationExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cComparationExpressionParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cIdentifierParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cBracketExpressionParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cIdentifierDotExpressionParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final Keyword cAmpersandAmpersandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_2_0_0_0 = (RuleCall)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cLogicalComparationExpressionParserRuleCall_2_0_0_1 = (RuleCall)cGroup_2_0_0.eContents().get(1);
		private final Group cGroup_2_0_1 = (Group)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cComparationExpressionParserRuleCall_2_0_1_0 = (RuleCall)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_2_0_1_1 = (RuleCall)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cLogicalComparationExpressionParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cComparationExpressionParserRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final RuleCall cArithmeticalComparationExpressionParserRuleCall_2_3 = (RuleCall)cAlternatives_2.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_2_4 = (RuleCall)cAlternatives_2.eContents().get(4);
		
		//AndExpression returns ecore::EString:
		//    (NegationExpression|ArithmeticalComparationExpression|ComparationExpression|Identifier|BracketExpression|IdentifierDotExpression) "&&" ((OPENPARENTHESIS LogicalComparationExpression|ComparationExpression CLOSEPARENTHESIS)|LogicalComparationExpression|ComparationExpression|ArithmeticalComparationExpression|Identifier)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(NegationExpression|ArithmeticalComparationExpression|ComparationExpression|Identifier|BracketExpression|IdentifierDotExpression) "&&" ((OPENPARENTHESIS LogicalComparationExpression|ComparationExpression CLOSEPARENTHESIS)|LogicalComparationExpression|ComparationExpression|ArithmeticalComparationExpression|Identifier)
		public Group getGroup() { return cGroup; }
		
		//(NegationExpression|ArithmeticalComparationExpression|ComparationExpression|Identifier|BracketExpression|IdentifierDotExpression)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//NegationExpression
		public RuleCall getNegationExpressionParserRuleCall_0_0() { return cNegationExpressionParserRuleCall_0_0; }
		
		//ArithmeticalComparationExpression
		public RuleCall getArithmeticalComparationExpressionParserRuleCall_0_1() { return cArithmeticalComparationExpressionParserRuleCall_0_1; }
		
		//ComparationExpression
		public RuleCall getComparationExpressionParserRuleCall_0_2() { return cComparationExpressionParserRuleCall_0_2; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_3() { return cIdentifierParserRuleCall_0_3; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_0_4() { return cBracketExpressionParserRuleCall_0_4; }
		
		//IdentifierDotExpression
		public RuleCall getIdentifierDotExpressionParserRuleCall_0_5() { return cIdentifierDotExpressionParserRuleCall_0_5; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1() { return cAmpersandAmpersandKeyword_1; }
		
		//((OPENPARENTHESIS LogicalComparationExpression|ComparationExpression CLOSEPARENTHESIS)|LogicalComparationExpression|ComparationExpression|ArithmeticalComparationExpression|Identifier)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(OPENPARENTHESIS LogicalComparationExpression|ComparationExpression CLOSEPARENTHESIS)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//OPENPARENTHESIS LogicalComparationExpression
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_2_0_0_0() { return cOPENPARENTHESISTerminalRuleCall_2_0_0_0; }
		
		//LogicalComparationExpression
		public RuleCall getLogicalComparationExpressionParserRuleCall_2_0_0_1() { return cLogicalComparationExpressionParserRuleCall_2_0_0_1; }
		
		//ComparationExpression CLOSEPARENTHESIS
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//ComparationExpression
		public RuleCall getComparationExpressionParserRuleCall_2_0_1_0() { return cComparationExpressionParserRuleCall_2_0_1_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_2_0_1_1() { return cCLOSEPARENTHESISTerminalRuleCall_2_0_1_1; }
		
		//LogicalComparationExpression
		public RuleCall getLogicalComparationExpressionParserRuleCall_2_1() { return cLogicalComparationExpressionParserRuleCall_2_1; }
		
		//ComparationExpression
		public RuleCall getComparationExpressionParserRuleCall_2_2() { return cComparationExpressionParserRuleCall_2_2; }
		
		//ArithmeticalComparationExpression
		public RuleCall getArithmeticalComparationExpressionParserRuleCall_2_3() { return cArithmeticalComparationExpressionParserRuleCall_2_3; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_4() { return cIdentifierParserRuleCall_2_4; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cNegationExpressionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cArithmeticalComparationExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cComparationExpressionParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cIdentifierParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cBracketExpressionParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cIdentifierDotExpressionParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final Keyword cVerticalLineVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final RuleCall cLogicalComparationExpressionParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_2_0_2 = (RuleCall)cGroup_2_0.eContents().get(2);
		private final RuleCall cComparationExpressionParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cArithmeticalComparationExpressionParserRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final RuleCall cIdentifierParserRuleCall_2_3 = (RuleCall)cAlternatives_2.eContents().get(3);
		
		//OrExpression returns ecore::EString:
		//    (NegationExpression|ArithmeticalComparationExpression|ComparationExpression|Identifier|BracketExpression|IdentifierDotExpression) "||" ((OPENPARENTHESIS LogicalComparationExpression CLOSEPARENTHESIS)|ComparationExpression|ArithmeticalComparationExpression|Identifier)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(NegationExpression|ArithmeticalComparationExpression|ComparationExpression|Identifier|BracketExpression|IdentifierDotExpression) "||" ((OPENPARENTHESIS LogicalComparationExpression CLOSEPARENTHESIS)|ComparationExpression|ArithmeticalComparationExpression|Identifier)
		public Group getGroup() { return cGroup; }
		
		//(NegationExpression|ArithmeticalComparationExpression|ComparationExpression|Identifier|BracketExpression|IdentifierDotExpression)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//NegationExpression
		public RuleCall getNegationExpressionParserRuleCall_0_0() { return cNegationExpressionParserRuleCall_0_0; }
		
		//ArithmeticalComparationExpression
		public RuleCall getArithmeticalComparationExpressionParserRuleCall_0_1() { return cArithmeticalComparationExpressionParserRuleCall_0_1; }
		
		//ComparationExpression
		public RuleCall getComparationExpressionParserRuleCall_0_2() { return cComparationExpressionParserRuleCall_0_2; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0_3() { return cIdentifierParserRuleCall_0_3; }
		
		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_0_4() { return cBracketExpressionParserRuleCall_0_4; }
		
		//IdentifierDotExpression
		public RuleCall getIdentifierDotExpressionParserRuleCall_0_5() { return cIdentifierDotExpressionParserRuleCall_0_5; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1() { return cVerticalLineVerticalLineKeyword_1; }
		
		//((OPENPARENTHESIS LogicalComparationExpression CLOSEPARENTHESIS)|ComparationExpression|ArithmeticalComparationExpression|Identifier)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(OPENPARENTHESIS LogicalComparationExpression CLOSEPARENTHESIS)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_2_0_0() { return cOPENPARENTHESISTerminalRuleCall_2_0_0; }
		
		//LogicalComparationExpression
		public RuleCall getLogicalComparationExpressionParserRuleCall_2_0_1() { return cLogicalComparationExpressionParserRuleCall_2_0_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_2_0_2() { return cCLOSEPARENTHESISTerminalRuleCall_2_0_2; }
		
		//ComparationExpression
		public RuleCall getComparationExpressionParserRuleCall_2_1() { return cComparationExpressionParserRuleCall_2_1; }
		
		//ArithmeticalComparationExpression
		public RuleCall getArithmeticalComparationExpressionParserRuleCall_2_2() { return cArithmeticalComparationExpressionParserRuleCall_2_2; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2_3() { return cIdentifierParserRuleCall_2_3; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cConditionAlternatives_2_0 = (Alternatives)cConditionAssignment_2.eContents().get(0);
		private final RuleCall cConditionCryptographycFunctionsComparationExpresionParserRuleCall_2_0_0 = (RuleCall)cConditionAlternatives_2_0.eContents().get(0);
		private final RuleCall cConditionLogicalComparationExpressionParserRuleCall_2_0_1 = (RuleCall)cConditionAlternatives_2_0.eContents().get(1);
		private final RuleCall cConditionArithmeticalComparationExpressionParserRuleCall_2_0_2 = (RuleCall)cConditionAlternatives_2_0.eContents().get(2);
		private final RuleCall cConditionComparationExpressionParserRuleCall_2_0_3 = (RuleCall)cConditionAlternatives_2_0.eContents().get(3);
		private final RuleCall cConditionBracketExpressionParserRuleCall_2_0_4 = (RuleCall)cConditionAlternatives_2_0.eContents().get(4);
		private final RuleCall cConditionIdentifierValueExpressionParserRuleCall_2_0_5 = (RuleCall)cConditionAlternatives_2_0.eContents().get(5);
		private final RuleCall cConditionNegationExpressionParserRuleCall_2_0_6 = (RuleCall)cConditionAlternatives_2_0.eContents().get(6);
		private final RuleCall cConditionCallFunctionExpressionParserRuleCall_2_0_7 = (RuleCall)cConditionAlternatives_2_0.eContents().get(7);
		private final RuleCall cConditionBoolValueExpressionParserRuleCall_2_0_8 = (RuleCall)cConditionAlternatives_2_0.eContents().get(8);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cOPENKEYTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEOLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cRestrictionAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cRestrictionRestrictionClauseParserRuleCall_6_0_0 = (RuleCall)cRestrictionAssignment_6_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cPropertiesPropertiesParserRuleCall_6_1_0 = (RuleCall)cPropertiesAssignment_6_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final Alternatives cExpressionsAlternatives_6_2_0 = (Alternatives)cExpressionsAssignment_6_2.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_6_2_0_0 = (RuleCall)cExpressionsAlternatives_6_2_0.eContents().get(0);
		private final RuleCall cExpressionsBREAKTerminalRuleCall_6_2_0_1 = (RuleCall)cExpressionsAlternatives_6_2_0.eContents().get(1);
		private final RuleCall cExpressionsCONTINUETerminalRuleCall_6_2_0_2 = (RuleCall)cExpressionsAlternatives_6_2_0.eContents().get(2);
		private final Assignment cConditionalExprAssignment_6_3 = (Assignment)cAlternatives_6.eContents().get(3);
		private final RuleCall cConditionalExprConditionParserRuleCall_6_3_0 = (RuleCall)cConditionalExprAssignment_6_3.eContents().get(0);
		private final Assignment cUndeterminedloopsAssignment_6_4 = (Assignment)cAlternatives_6.eContents().get(4);
		private final RuleCall cUndeterminedloopsUnDeterminedLoopParserRuleCall_6_4_0 = (RuleCall)cUndeterminedloopsAssignment_6_4.eContents().get(0);
		private final Assignment cDeterminedloopsAssignment_6_5 = (Assignment)cAlternatives_6.eContents().get(5);
		private final RuleCall cDeterminedloopsForLoopParserRuleCall_6_5_0 = (RuleCall)cDeterminedloopsAssignment_6_5.eContents().get(0);
		private final Group cGroup_6_6 = (Group)cAlternatives_6.eContents().get(6);
		private final RuleCall cEMITTerminalRuleCall_6_6_0 = (RuleCall)cGroup_6_6.eContents().get(0);
		private final Assignment cEventAssignment_6_6_1 = (Assignment)cGroup_6_6.eContents().get(1);
		private final CrossReference cEventEventCrossReference_6_6_1_0 = (CrossReference)cEventAssignment_6_6_1.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_6_6_1_0_1 = (RuleCall)cEventEventCrossReference_6_6_1_0.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_6_6_2 = (RuleCall)cGroup_6_6.eContents().get(2);
		private final Assignment cInputParamsEventAssignment_6_6_3 = (Assignment)cGroup_6_6.eContents().get(3);
		private final RuleCall cInputParamsEventInputParamParserRuleCall_6_6_3_0 = (RuleCall)cInputParamsEventAssignment_6_6_3.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_6_6_4 = (RuleCall)cGroup_6_6.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_6_6_5 = (RuleCall)cGroup_6_6.eContents().get(5);
		private final RuleCall cEOLINETerminalRuleCall_6_6_6 = (RuleCall)cGroup_6_6.eContents().get(6);
		private final RuleCall cCLOSEKEYTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cEOLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final RuleCall cELSETerminalRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final RuleCall cOPENKEYTerminalRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final RuleCall cEOLINETerminalRuleCall_9_2 = (RuleCall)cGroup_9.eContents().get(2);
		private final Alternatives cAlternatives_9_3 = (Alternatives)cGroup_9.eContents().get(3);
		private final Assignment cRestrictionElseAssignment_9_3_0 = (Assignment)cAlternatives_9_3.eContents().get(0);
		private final RuleCall cRestrictionElseRestrictionClauseParserRuleCall_9_3_0_0 = (RuleCall)cRestrictionElseAssignment_9_3_0.eContents().get(0);
		private final Assignment cPropertiesElseAssignment_9_3_1 = (Assignment)cAlternatives_9_3.eContents().get(1);
		private final RuleCall cPropertiesElsePropertiesParserRuleCall_9_3_1_0 = (RuleCall)cPropertiesElseAssignment_9_3_1.eContents().get(0);
		private final Assignment cExpressionsElseAssignment_9_3_2 = (Assignment)cAlternatives_9_3.eContents().get(2);
		private final Alternatives cExpressionsElseAlternatives_9_3_2_0 = (Alternatives)cExpressionsElseAssignment_9_3_2.eContents().get(0);
		private final RuleCall cExpressionsElseExpressionParserRuleCall_9_3_2_0_0 = (RuleCall)cExpressionsElseAlternatives_9_3_2_0.eContents().get(0);
		private final RuleCall cExpressionsElseBREAKTerminalRuleCall_9_3_2_0_1 = (RuleCall)cExpressionsElseAlternatives_9_3_2_0.eContents().get(1);
		private final RuleCall cExpressionsElseCONTINUETerminalRuleCall_9_3_2_0_2 = (RuleCall)cExpressionsElseAlternatives_9_3_2_0.eContents().get(2);
		private final Assignment cConditionalExprElseAssignment_9_3_3 = (Assignment)cAlternatives_9_3.eContents().get(3);
		private final RuleCall cConditionalExprElseConditionParserRuleCall_9_3_3_0 = (RuleCall)cConditionalExprElseAssignment_9_3_3.eContents().get(0);
		private final Assignment cUndeterminedloopsElseAssignment_9_3_4 = (Assignment)cAlternatives_9_3.eContents().get(4);
		private final RuleCall cUndeterminedloopsElseUnDeterminedLoopParserRuleCall_9_3_4_0 = (RuleCall)cUndeterminedloopsElseAssignment_9_3_4.eContents().get(0);
		private final Assignment cDeterminedloopsElseAssignment_9_3_5 = (Assignment)cAlternatives_9_3.eContents().get(5);
		private final RuleCall cDeterminedloopsElseForLoopParserRuleCall_9_3_5_0 = (RuleCall)cDeterminedloopsElseAssignment_9_3_5.eContents().get(0);
		private final Group cGroup_9_3_6 = (Group)cAlternatives_9_3.eContents().get(6);
		private final RuleCall cEMITTerminalRuleCall_9_3_6_0 = (RuleCall)cGroup_9_3_6.eContents().get(0);
		private final Assignment cEventElseAssignment_9_3_6_1 = (Assignment)cGroup_9_3_6.eContents().get(1);
		private final CrossReference cEventElseEventCrossReference_9_3_6_1_0 = (CrossReference)cEventElseAssignment_9_3_6_1.eContents().get(0);
		private final RuleCall cEventElseEventIDTerminalRuleCall_9_3_6_1_0_1 = (RuleCall)cEventElseEventCrossReference_9_3_6_1_0.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_9_3_6_2 = (RuleCall)cGroup_9_3_6.eContents().get(2);
		private final Assignment cInputParamsEventElseAssignment_9_3_6_3 = (Assignment)cGroup_9_3_6.eContents().get(3);
		private final RuleCall cInputParamsEventElseInputParamParserRuleCall_9_3_6_3_0 = (RuleCall)cInputParamsEventElseAssignment_9_3_6_3.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_9_3_6_4 = (RuleCall)cGroup_9_3_6.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_9_3_6_5 = (RuleCall)cGroup_9_3_6.eContents().get(5);
		private final RuleCall cEOLINETerminalRuleCall_9_3_6_6 = (RuleCall)cGroup_9_3_6.eContents().get(6);
		private final RuleCall cCLOSEKEYTerminalRuleCall_9_4 = (RuleCall)cGroup_9.eContents().get(4);
		private final RuleCall cEOLINETerminalRuleCall_9_5 = (RuleCall)cGroup_9.eContents().get(5);
		
		//Condition:
		//    IF OPENPARENTHESIS condition=(CryptographycFunctionsComparationExpresion|LogicalComparationExpression|ArithmeticalComparationExpression|ComparationExpression|BracketExpression|IdentifierValueExpression|NegationExpression|CallFunctionExpression|BoolValueExpression) CLOSEPARENTHESIS OPENKEY EOLINE?
		//        (restriction += RestrictionClause |properties += Properties| expressions += (Expression|BREAK|CONTINUE) | conditionalExpr += Condition | undeterminedloops += UnDeterminedLoop  | determinedloops += ForLoop| (EMIT event += [Event] OPENPARENTHESIS inputParamsEvent+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?))*
		//    CLOSEKEY EOLINE?
		//    (ELSE OPENKEY EOLINE?
		//        (restrictionElse += RestrictionClause |propertiesElse += Properties|expressionsElse += (Expression|BREAK|CONTINUE) | conditionalExprElse += Condition| undeterminedloopsElse += UnDeterminedLoop  | determinedloopsElse += ForLoop | (EMIT eventElse += [Event] OPENPARENTHESIS inputParamsEventElse+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?))*
		//    CLOSEKEY EOLINE?)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IF OPENPARENTHESIS condition=(CryptographycFunctionsComparationExpresion|LogicalComparationExpression|ArithmeticalComparationExpression|ComparationExpression|BracketExpression|IdentifierValueExpression|NegationExpression|CallFunctionExpression|BoolValueExpression) CLOSEPARENTHESIS OPENKEY EOLINE?
		//    (restriction += RestrictionClause |properties += Properties| expressions += (Expression|BREAK|CONTINUE) | conditionalExpr += Condition | undeterminedloops += UnDeterminedLoop  | determinedloops += ForLoop| (EMIT event += [Event] OPENPARENTHESIS inputParamsEvent+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?))*
		//CLOSEKEY EOLINE?
		//(ELSE OPENKEY EOLINE?
		//    (restrictionElse += RestrictionClause |propertiesElse += Properties|expressionsElse += (Expression|BREAK|CONTINUE) | conditionalExprElse += Condition| undeterminedloopsElse += UnDeterminedLoop  | determinedloopsElse += ForLoop | (EMIT eventElse += [Event] OPENPARENTHESIS inputParamsEventElse+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?))*
		//CLOSEKEY EOLINE?)?
		public Group getGroup() { return cGroup; }
		
		//IF
		public RuleCall getIFTerminalRuleCall_0() { return cIFTerminalRuleCall_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//condition=(CryptographycFunctionsComparationExpresion|LogicalComparationExpression|ArithmeticalComparationExpression|ComparationExpression|BracketExpression|IdentifierValueExpression|NegationExpression|CallFunctionExpression|BoolValueExpression)
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//(CryptographycFunctionsComparationExpresion|LogicalComparationExpression|ArithmeticalComparationExpression|ComparationExpression|BracketExpression|IdentifierValueExpression|NegationExpression|CallFunctionExpression|BoolValueExpression)
		public Alternatives getConditionAlternatives_2_0() { return cConditionAlternatives_2_0; }
		
		//CryptographycFunctionsComparationExpresion
		public RuleCall getConditionCryptographycFunctionsComparationExpresionParserRuleCall_2_0_0() { return cConditionCryptographycFunctionsComparationExpresionParserRuleCall_2_0_0; }
		
		//LogicalComparationExpression
		public RuleCall getConditionLogicalComparationExpressionParserRuleCall_2_0_1() { return cConditionLogicalComparationExpressionParserRuleCall_2_0_1; }
		
		//ArithmeticalComparationExpression
		public RuleCall getConditionArithmeticalComparationExpressionParserRuleCall_2_0_2() { return cConditionArithmeticalComparationExpressionParserRuleCall_2_0_2; }
		
		//ComparationExpression
		public RuleCall getConditionComparationExpressionParserRuleCall_2_0_3() { return cConditionComparationExpressionParserRuleCall_2_0_3; }
		
		//BracketExpression
		public RuleCall getConditionBracketExpressionParserRuleCall_2_0_4() { return cConditionBracketExpressionParserRuleCall_2_0_4; }
		
		//IdentifierValueExpression
		public RuleCall getConditionIdentifierValueExpressionParserRuleCall_2_0_5() { return cConditionIdentifierValueExpressionParserRuleCall_2_0_5; }
		
		//NegationExpression
		public RuleCall getConditionNegationExpressionParserRuleCall_2_0_6() { return cConditionNegationExpressionParserRuleCall_2_0_6; }
		
		//CallFunctionExpression
		public RuleCall getConditionCallFunctionExpressionParserRuleCall_2_0_7() { return cConditionCallFunctionExpressionParserRuleCall_2_0_7; }
		
		//BoolValueExpression
		public RuleCall getConditionBoolValueExpressionParserRuleCall_2_0_8() { return cConditionBoolValueExpressionParserRuleCall_2_0_8; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_3() { return cCLOSEPARENTHESISTerminalRuleCall_3; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_4() { return cOPENKEYTerminalRuleCall_4; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_5() { return cEOLINETerminalRuleCall_5; }
		
		//(restriction += RestrictionClause |properties += Properties| expressions += (Expression|BREAK|CONTINUE) | conditionalExpr += Condition | undeterminedloops += UnDeterminedLoop  | determinedloops += ForLoop| (EMIT event += [Event] OPENPARENTHESIS inputParamsEvent+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?))*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//restriction += RestrictionClause
		public Assignment getRestrictionAssignment_6_0() { return cRestrictionAssignment_6_0; }
		
		//RestrictionClause
		public RuleCall getRestrictionRestrictionClauseParserRuleCall_6_0_0() { return cRestrictionRestrictionClauseParserRuleCall_6_0_0; }
		
		//properties += Properties
		public Assignment getPropertiesAssignment_6_1() { return cPropertiesAssignment_6_1; }
		
		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_6_1_0() { return cPropertiesPropertiesParserRuleCall_6_1_0; }
		
		//expressions += (Expression|BREAK|CONTINUE)
		public Assignment getExpressionsAssignment_6_2() { return cExpressionsAssignment_6_2; }
		
		//(Expression|BREAK|CONTINUE)
		public Alternatives getExpressionsAlternatives_6_2_0() { return cExpressionsAlternatives_6_2_0; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_6_2_0_0() { return cExpressionsExpressionParserRuleCall_6_2_0_0; }
		
		//BREAK
		public RuleCall getExpressionsBREAKTerminalRuleCall_6_2_0_1() { return cExpressionsBREAKTerminalRuleCall_6_2_0_1; }
		
		//CONTINUE
		public RuleCall getExpressionsCONTINUETerminalRuleCall_6_2_0_2() { return cExpressionsCONTINUETerminalRuleCall_6_2_0_2; }
		
		//conditionalExpr += Condition
		public Assignment getConditionalExprAssignment_6_3() { return cConditionalExprAssignment_6_3; }
		
		//Condition
		public RuleCall getConditionalExprConditionParserRuleCall_6_3_0() { return cConditionalExprConditionParserRuleCall_6_3_0; }
		
		//undeterminedloops += UnDeterminedLoop
		public Assignment getUndeterminedloopsAssignment_6_4() { return cUndeterminedloopsAssignment_6_4; }
		
		//UnDeterminedLoop
		public RuleCall getUndeterminedloopsUnDeterminedLoopParserRuleCall_6_4_0() { return cUndeterminedloopsUnDeterminedLoopParserRuleCall_6_4_0; }
		
		//determinedloops += ForLoop
		public Assignment getDeterminedloopsAssignment_6_5() { return cDeterminedloopsAssignment_6_5; }
		
		//ForLoop
		public RuleCall getDeterminedloopsForLoopParserRuleCall_6_5_0() { return cDeterminedloopsForLoopParserRuleCall_6_5_0; }
		
		//(EMIT event += [Event] OPENPARENTHESIS inputParamsEvent+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?)
		public Group getGroup_6_6() { return cGroup_6_6; }
		
		//EMIT
		public RuleCall getEMITTerminalRuleCall_6_6_0() { return cEMITTerminalRuleCall_6_6_0; }
		
		//event += [Event]
		public Assignment getEventAssignment_6_6_1() { return cEventAssignment_6_6_1; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_6_6_1_0() { return cEventEventCrossReference_6_6_1_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_6_6_1_0_1() { return cEventEventIDTerminalRuleCall_6_6_1_0_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_6_6_2() { return cOPENPARENTHESISTerminalRuleCall_6_6_2; }
		
		//inputParamsEvent+=InputParam*
		public Assignment getInputParamsEventAssignment_6_6_3() { return cInputParamsEventAssignment_6_6_3; }
		
		//InputParam
		public RuleCall getInputParamsEventInputParamParserRuleCall_6_6_3_0() { return cInputParamsEventInputParamParserRuleCall_6_6_3_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_6_6_4() { return cCLOSEPARENTHESISTerminalRuleCall_6_6_4; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_6_6_5() { return cSEMICOLONTerminalRuleCall_6_6_5; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_6_6_6() { return cEOLINETerminalRuleCall_6_6_6; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_7() { return cCLOSEKEYTerminalRuleCall_7; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8() { return cEOLINETerminalRuleCall_8; }
		
		//(ELSE OPENKEY EOLINE?
		//    (restrictionElse += RestrictionClause |propertiesElse += Properties|expressionsElse += (Expression|BREAK|CONTINUE) | conditionalExprElse += Condition| undeterminedloopsElse += UnDeterminedLoop  | determinedloopsElse += ForLoop | (EMIT eventElse += [Event] OPENPARENTHESIS inputParamsEventElse+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?))*
		//CLOSEKEY EOLINE?)?
		public Group getGroup_9() { return cGroup_9; }
		
		//ELSE
		public RuleCall getELSETerminalRuleCall_9_0() { return cELSETerminalRuleCall_9_0; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_9_1() { return cOPENKEYTerminalRuleCall_9_1; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_9_2() { return cEOLINETerminalRuleCall_9_2; }
		
		//(restrictionElse += RestrictionClause |propertiesElse += Properties|expressionsElse += (Expression|BREAK|CONTINUE) | conditionalExprElse += Condition| undeterminedloopsElse += UnDeterminedLoop  | determinedloopsElse += ForLoop | (EMIT eventElse += [Event] OPENPARENTHESIS inputParamsEventElse+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?))*
		public Alternatives getAlternatives_9_3() { return cAlternatives_9_3; }
		
		//restrictionElse += RestrictionClause
		public Assignment getRestrictionElseAssignment_9_3_0() { return cRestrictionElseAssignment_9_3_0; }
		
		//RestrictionClause
		public RuleCall getRestrictionElseRestrictionClauseParserRuleCall_9_3_0_0() { return cRestrictionElseRestrictionClauseParserRuleCall_9_3_0_0; }
		
		//propertiesElse += Properties
		public Assignment getPropertiesElseAssignment_9_3_1() { return cPropertiesElseAssignment_9_3_1; }
		
		//Properties
		public RuleCall getPropertiesElsePropertiesParserRuleCall_9_3_1_0() { return cPropertiesElsePropertiesParserRuleCall_9_3_1_0; }
		
		//expressionsElse += (Expression|BREAK|CONTINUE)
		public Assignment getExpressionsElseAssignment_9_3_2() { return cExpressionsElseAssignment_9_3_2; }
		
		//(Expression|BREAK|CONTINUE)
		public Alternatives getExpressionsElseAlternatives_9_3_2_0() { return cExpressionsElseAlternatives_9_3_2_0; }
		
		//Expression
		public RuleCall getExpressionsElseExpressionParserRuleCall_9_3_2_0_0() { return cExpressionsElseExpressionParserRuleCall_9_3_2_0_0; }
		
		//BREAK
		public RuleCall getExpressionsElseBREAKTerminalRuleCall_9_3_2_0_1() { return cExpressionsElseBREAKTerminalRuleCall_9_3_2_0_1; }
		
		//CONTINUE
		public RuleCall getExpressionsElseCONTINUETerminalRuleCall_9_3_2_0_2() { return cExpressionsElseCONTINUETerminalRuleCall_9_3_2_0_2; }
		
		//conditionalExprElse += Condition
		public Assignment getConditionalExprElseAssignment_9_3_3() { return cConditionalExprElseAssignment_9_3_3; }
		
		//Condition
		public RuleCall getConditionalExprElseConditionParserRuleCall_9_3_3_0() { return cConditionalExprElseConditionParserRuleCall_9_3_3_0; }
		
		//undeterminedloopsElse += UnDeterminedLoop
		public Assignment getUndeterminedloopsElseAssignment_9_3_4() { return cUndeterminedloopsElseAssignment_9_3_4; }
		
		//UnDeterminedLoop
		public RuleCall getUndeterminedloopsElseUnDeterminedLoopParserRuleCall_9_3_4_0() { return cUndeterminedloopsElseUnDeterminedLoopParserRuleCall_9_3_4_0; }
		
		//determinedloopsElse += ForLoop
		public Assignment getDeterminedloopsElseAssignment_9_3_5() { return cDeterminedloopsElseAssignment_9_3_5; }
		
		//ForLoop
		public RuleCall getDeterminedloopsElseForLoopParserRuleCall_9_3_5_0() { return cDeterminedloopsElseForLoopParserRuleCall_9_3_5_0; }
		
		//(EMIT eventElse += [Event] OPENPARENTHESIS inputParamsEventElse+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?)
		public Group getGroup_9_3_6() { return cGroup_9_3_6; }
		
		//EMIT
		public RuleCall getEMITTerminalRuleCall_9_3_6_0() { return cEMITTerminalRuleCall_9_3_6_0; }
		
		//eventElse += [Event]
		public Assignment getEventElseAssignment_9_3_6_1() { return cEventElseAssignment_9_3_6_1; }
		
		//[Event]
		public CrossReference getEventElseEventCrossReference_9_3_6_1_0() { return cEventElseEventCrossReference_9_3_6_1_0; }
		
		//ID
		public RuleCall getEventElseEventIDTerminalRuleCall_9_3_6_1_0_1() { return cEventElseEventIDTerminalRuleCall_9_3_6_1_0_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_9_3_6_2() { return cOPENPARENTHESISTerminalRuleCall_9_3_6_2; }
		
		//inputParamsEventElse+=InputParam*
		public Assignment getInputParamsEventElseAssignment_9_3_6_3() { return cInputParamsEventElseAssignment_9_3_6_3; }
		
		//InputParam
		public RuleCall getInputParamsEventElseInputParamParserRuleCall_9_3_6_3_0() { return cInputParamsEventElseInputParamParserRuleCall_9_3_6_3_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_9_3_6_4() { return cCLOSEPARENTHESISTerminalRuleCall_9_3_6_4; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_9_3_6_5() { return cSEMICOLONTerminalRuleCall_9_3_6_5; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_9_3_6_6() { return cEOLINETerminalRuleCall_9_3_6_6; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_9_4() { return cCLOSEKEYTerminalRuleCall_9_4; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_9_5() { return cEOLINETerminalRuleCall_9_5; }
	}
	public class UnDeterminedLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.UnDeterminedLoop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhileLoopParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoWhileLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnDeterminedLoop:
		//    WhileLoop|DoWhileLoop
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//WhileLoop|DoWhileLoop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_0() { return cWhileLoopParserRuleCall_0; }
		
		//DoWhileLoop
		public RuleCall getDoWhileLoopParserRuleCall_1() { return cDoWhileLoopParserRuleCall_1; }
	}
	public class WhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.WhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cConditionAlternatives_2_0 = (Alternatives)cConditionAssignment_2.eContents().get(0);
		private final RuleCall cConditionAndExpressionParserRuleCall_2_0_0 = (RuleCall)cConditionAlternatives_2_0.eContents().get(0);
		private final RuleCall cConditionOrExpressionParserRuleCall_2_0_1 = (RuleCall)cConditionAlternatives_2_0.eContents().get(1);
		private final RuleCall cConditionArithmeticalComparationExpressionParserRuleCall_2_0_2 = (RuleCall)cConditionAlternatives_2_0.eContents().get(2);
		private final RuleCall cConditionComparationExpressionParserRuleCall_2_0_3 = (RuleCall)cConditionAlternatives_2_0.eContents().get(3);
		private final RuleCall cConditionIdentifierValueExpressionParserRuleCall_2_0_4 = (RuleCall)cConditionAlternatives_2_0.eContents().get(4);
		private final RuleCall cConditionCallFunctionExpressionParserRuleCall_2_0_5 = (RuleCall)cConditionAlternatives_2_0.eContents().get(5);
		private final RuleCall cConditionBoolValueExpressionParserRuleCall_2_0_6 = (RuleCall)cConditionAlternatives_2_0.eContents().get(6);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cOPENKEYTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEOLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cGasrestrictionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGasrestrictionRestrictionGasParserRuleCall_6_0 = (RuleCall)cGasrestrictionAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cRestrictionAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cRestrictionRestrictionClauseParserRuleCall_7_0_0 = (RuleCall)cRestrictionAssignment_7_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cPropertiesPropertiesParserRuleCall_7_1_0 = (RuleCall)cPropertiesAssignment_7_1.eContents().get(0);
		private final Assignment cConditionsAssignment_7_2 = (Assignment)cAlternatives_7.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_7_2_0 = (RuleCall)cConditionsAssignment_7_2.eContents().get(0);
		private final Assignment cUndeterminedloopsAssignment_7_3 = (Assignment)cAlternatives_7.eContents().get(3);
		private final RuleCall cUndeterminedloopsUnDeterminedLoopParserRuleCall_7_3_0 = (RuleCall)cUndeterminedloopsAssignment_7_3.eContents().get(0);
		private final Assignment cDeterminedloopsAssignment_7_4 = (Assignment)cAlternatives_7.eContents().get(4);
		private final RuleCall cDeterminedloopsForLoopParserRuleCall_7_4_0 = (RuleCall)cDeterminedloopsAssignment_7_4.eContents().get(0);
		private final Group cGroup_7_5 = (Group)cAlternatives_7.eContents().get(5);
		private final RuleCall cEMITTerminalRuleCall_7_5_0 = (RuleCall)cGroup_7_5.eContents().get(0);
		private final Assignment cEventAssignment_7_5_1 = (Assignment)cGroup_7_5.eContents().get(1);
		private final CrossReference cEventEventCrossReference_7_5_1_0 = (CrossReference)cEventAssignment_7_5_1.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_7_5_1_0_1 = (RuleCall)cEventEventCrossReference_7_5_1_0.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_7_5_2 = (RuleCall)cGroup_7_5.eContents().get(2);
		private final Assignment cInputParamsAssignment_7_5_3 = (Assignment)cGroup_7_5.eContents().get(3);
		private final RuleCall cInputParamsInputParamParserRuleCall_7_5_3_0 = (RuleCall)cInputParamsAssignment_7_5_3.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_7_5_4 = (RuleCall)cGroup_7_5.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_7_5_5 = (RuleCall)cGroup_7_5.eContents().get(5);
		private final RuleCall cEOLINETerminalRuleCall_7_5_6 = (RuleCall)cGroup_7_5.eContents().get(6);
		private final Assignment cExpressionsAssignment_7_6 = (Assignment)cAlternatives_7.eContents().get(6);
		private final Alternatives cExpressionsAlternatives_7_6_0 = (Alternatives)cExpressionsAssignment_7_6.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_7_6_0_0 = (RuleCall)cExpressionsAlternatives_7_6_0.eContents().get(0);
		private final RuleCall cExpressionsBREAKTerminalRuleCall_7_6_0_1 = (RuleCall)cExpressionsAlternatives_7_6_0.eContents().get(1);
		private final RuleCall cExpressionsCONTINUETerminalRuleCall_7_6_0_2 = (RuleCall)cExpressionsAlternatives_7_6_0.eContents().get(2);
		private final RuleCall cCLOSEKEYTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cEOLINETerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//WhileLoop:
		//    "while" OPENPARENTHESIS condition=(AndExpression|OrExpression|ArithmeticalComparationExpression|ComparationExpression|IdentifierValueExpression|CallFunctionExpression|BoolValueExpression) CLOSEPARENTHESIS OPENKEY EOLINE?
		//        gasrestriction += RestrictionGas
		//        (restriction += RestrictionClause |properties += Properties| conditions += Condition | undeterminedloops += UnDeterminedLoop | determinedloops += ForLoop | (EMIT event += [Event] OPENPARENTHESIS inputParams+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE) | expressions += (Expression|BREAK|CONTINUE))*
		//    CLOSEKEY EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"while" OPENPARENTHESIS condition=(AndExpression|OrExpression|ArithmeticalComparationExpression|ComparationExpression|IdentifierValueExpression|CallFunctionExpression|BoolValueExpression) CLOSEPARENTHESIS OPENKEY EOLINE?
		//    gasrestriction += RestrictionGas
		//    (restriction += RestrictionClause |properties += Properties| conditions += Condition | undeterminedloops += UnDeterminedLoop | determinedloops += ForLoop | (EMIT event += [Event] OPENPARENTHESIS inputParams+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE) | expressions += (Expression|BREAK|CONTINUE))*
		//CLOSEKEY EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//condition=(AndExpression|OrExpression|ArithmeticalComparationExpression|ComparationExpression|IdentifierValueExpression|CallFunctionExpression|BoolValueExpression)
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//(AndExpression|OrExpression|ArithmeticalComparationExpression|ComparationExpression|IdentifierValueExpression|CallFunctionExpression|BoolValueExpression)
		public Alternatives getConditionAlternatives_2_0() { return cConditionAlternatives_2_0; }
		
		//AndExpression
		public RuleCall getConditionAndExpressionParserRuleCall_2_0_0() { return cConditionAndExpressionParserRuleCall_2_0_0; }
		
		//OrExpression
		public RuleCall getConditionOrExpressionParserRuleCall_2_0_1() { return cConditionOrExpressionParserRuleCall_2_0_1; }
		
		//ArithmeticalComparationExpression
		public RuleCall getConditionArithmeticalComparationExpressionParserRuleCall_2_0_2() { return cConditionArithmeticalComparationExpressionParserRuleCall_2_0_2; }
		
		//ComparationExpression
		public RuleCall getConditionComparationExpressionParserRuleCall_2_0_3() { return cConditionComparationExpressionParserRuleCall_2_0_3; }
		
		//IdentifierValueExpression
		public RuleCall getConditionIdentifierValueExpressionParserRuleCall_2_0_4() { return cConditionIdentifierValueExpressionParserRuleCall_2_0_4; }
		
		//CallFunctionExpression
		public RuleCall getConditionCallFunctionExpressionParserRuleCall_2_0_5() { return cConditionCallFunctionExpressionParserRuleCall_2_0_5; }
		
		//BoolValueExpression
		public RuleCall getConditionBoolValueExpressionParserRuleCall_2_0_6() { return cConditionBoolValueExpressionParserRuleCall_2_0_6; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_3() { return cCLOSEPARENTHESISTerminalRuleCall_3; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_4() { return cOPENKEYTerminalRuleCall_4; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_5() { return cEOLINETerminalRuleCall_5; }
		
		//gasrestriction += RestrictionGas
		public Assignment getGasrestrictionAssignment_6() { return cGasrestrictionAssignment_6; }
		
		//RestrictionGas
		public RuleCall getGasrestrictionRestrictionGasParserRuleCall_6_0() { return cGasrestrictionRestrictionGasParserRuleCall_6_0; }
		
		//(restriction += RestrictionClause |properties += Properties| conditions += Condition | undeterminedloops += UnDeterminedLoop | determinedloops += ForLoop | (EMIT event += [Event] OPENPARENTHESIS inputParams+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE) | expressions += (Expression|BREAK|CONTINUE))*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//restriction += RestrictionClause
		public Assignment getRestrictionAssignment_7_0() { return cRestrictionAssignment_7_0; }
		
		//RestrictionClause
		public RuleCall getRestrictionRestrictionClauseParserRuleCall_7_0_0() { return cRestrictionRestrictionClauseParserRuleCall_7_0_0; }
		
		//properties += Properties
		public Assignment getPropertiesAssignment_7_1() { return cPropertiesAssignment_7_1; }
		
		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_7_1_0() { return cPropertiesPropertiesParserRuleCall_7_1_0; }
		
		//conditions += Condition
		public Assignment getConditionsAssignment_7_2() { return cConditionsAssignment_7_2; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_7_2_0() { return cConditionsConditionParserRuleCall_7_2_0; }
		
		//undeterminedloops += UnDeterminedLoop
		public Assignment getUndeterminedloopsAssignment_7_3() { return cUndeterminedloopsAssignment_7_3; }
		
		//UnDeterminedLoop
		public RuleCall getUndeterminedloopsUnDeterminedLoopParserRuleCall_7_3_0() { return cUndeterminedloopsUnDeterminedLoopParserRuleCall_7_3_0; }
		
		//determinedloops += ForLoop
		public Assignment getDeterminedloopsAssignment_7_4() { return cDeterminedloopsAssignment_7_4; }
		
		//ForLoop
		public RuleCall getDeterminedloopsForLoopParserRuleCall_7_4_0() { return cDeterminedloopsForLoopParserRuleCall_7_4_0; }
		
		//(EMIT event += [Event] OPENPARENTHESIS inputParams+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE)
		public Group getGroup_7_5() { return cGroup_7_5; }
		
		//EMIT
		public RuleCall getEMITTerminalRuleCall_7_5_0() { return cEMITTerminalRuleCall_7_5_0; }
		
		//event += [Event]
		public Assignment getEventAssignment_7_5_1() { return cEventAssignment_7_5_1; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_7_5_1_0() { return cEventEventCrossReference_7_5_1_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_7_5_1_0_1() { return cEventEventIDTerminalRuleCall_7_5_1_0_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_7_5_2() { return cOPENPARENTHESISTerminalRuleCall_7_5_2; }
		
		//inputParams+=InputParam*
		public Assignment getInputParamsAssignment_7_5_3() { return cInputParamsAssignment_7_5_3; }
		
		//InputParam
		public RuleCall getInputParamsInputParamParserRuleCall_7_5_3_0() { return cInputParamsInputParamParserRuleCall_7_5_3_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_7_5_4() { return cCLOSEPARENTHESISTerminalRuleCall_7_5_4; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7_5_5() { return cSEMICOLONTerminalRuleCall_7_5_5; }
		
		//EOLINE
		public RuleCall getEOLINETerminalRuleCall_7_5_6() { return cEOLINETerminalRuleCall_7_5_6; }
		
		//expressions += (Expression|BREAK|CONTINUE)
		public Assignment getExpressionsAssignment_7_6() { return cExpressionsAssignment_7_6; }
		
		//(Expression|BREAK|CONTINUE)
		public Alternatives getExpressionsAlternatives_7_6_0() { return cExpressionsAlternatives_7_6_0; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_7_6_0_0() { return cExpressionsExpressionParserRuleCall_7_6_0_0; }
		
		//BREAK
		public RuleCall getExpressionsBREAKTerminalRuleCall_7_6_0_1() { return cExpressionsBREAKTerminalRuleCall_7_6_0_1; }
		
		//CONTINUE
		public RuleCall getExpressionsCONTINUETerminalRuleCall_7_6_0_2() { return cExpressionsCONTINUETerminalRuleCall_7_6_0_2; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_8() { return cCLOSEKEYTerminalRuleCall_8; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_9() { return cEOLINETerminalRuleCall_9; }
	}
	public class ForLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.ForLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cTypeCounterAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Alternatives cTypeCounterAlternatives_2_0_0_0 = (Alternatives)cTypeCounterAssignment_2_0_0.eContents().get(0);
		private final Keyword cTypeCounterUintKeyword_2_0_0_0_0 = (Keyword)cTypeCounterAlternatives_2_0_0_0.eContents().get(0);
		private final Keyword cTypeCounterIntKeyword_2_0_0_0_1 = (Keyword)cTypeCounterAlternatives_2_0_0_0.eContents().get(1);
		private final Assignment cNameCounterAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cNameCounterIdentifierParserRuleCall_2_0_1_0 = (RuleCall)cNameCounterAssignment_2_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cValueAssignment_2_0_3 = (Assignment)cGroup_2_0.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_2_0_3_0 = (RuleCall)cValueAssignment_2_0_3.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cTypeCounterAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cTypeCounterCharKeyword_2_1_0_0 = (Keyword)cTypeCounterAssignment_2_1_0.eContents().get(0);
		private final Assignment cNameCounterAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cNameCounterIdentifierParserRuleCall_2_1_1_0 = (RuleCall)cNameCounterAssignment_2_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cValueCounterAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cValueCounterCHARTerminalRuleCall_2_1_3_0 = (RuleCall)cValueCounterAssignment_2_1_3.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionArithmeticalComparationExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final RuleCall cIncrementLoopExpressionParserRuleCall_6_0 = (RuleCall)cAlternatives_6.eContents().get(0);
		private final RuleCall cDecrementLoopExpressionParserRuleCall_6_1 = (RuleCall)cAlternatives_6.eContents().get(1);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cOPENKEYTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cEOLINETerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cGasrestrictionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cGasrestrictionRestrictionGasParserRuleCall_10_0 = (RuleCall)cGasrestrictionAssignment_10.eContents().get(0);
		private final Alternatives cAlternatives_11 = (Alternatives)cGroup.eContents().get(11);
		private final Assignment cRestrictionAssignment_11_0 = (Assignment)cAlternatives_11.eContents().get(0);
		private final RuleCall cRestrictionRestrictionClauseParserRuleCall_11_0_0 = (RuleCall)cRestrictionAssignment_11_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_11_1 = (Assignment)cAlternatives_11.eContents().get(1);
		private final RuleCall cPropertiesPropertiesParserRuleCall_11_1_0 = (RuleCall)cPropertiesAssignment_11_1.eContents().get(0);
		private final Assignment cConditionsAssignment_11_2 = (Assignment)cAlternatives_11.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_11_2_0 = (RuleCall)cConditionsAssignment_11_2.eContents().get(0);
		private final Assignment cUndeterminedloopsAssignment_11_3 = (Assignment)cAlternatives_11.eContents().get(3);
		private final RuleCall cUndeterminedloopsUnDeterminedLoopParserRuleCall_11_3_0 = (RuleCall)cUndeterminedloopsAssignment_11_3.eContents().get(0);
		private final Assignment cDeterminedloopsAssignment_11_4 = (Assignment)cAlternatives_11.eContents().get(4);
		private final RuleCall cDeterminedloopsForLoopParserRuleCall_11_4_0 = (RuleCall)cDeterminedloopsAssignment_11_4.eContents().get(0);
		private final Group cGroup_11_5 = (Group)cAlternatives_11.eContents().get(5);
		private final Assignment cExpressionsAssignment_11_5_0 = (Assignment)cGroup_11_5.eContents().get(0);
		private final Alternatives cExpressionsAlternatives_11_5_0_0 = (Alternatives)cExpressionsAssignment_11_5_0.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_11_5_0_0_0 = (RuleCall)cExpressionsAlternatives_11_5_0_0.eContents().get(0);
		private final RuleCall cExpressionsBREAKTerminalRuleCall_11_5_0_0_1 = (RuleCall)cExpressionsAlternatives_11_5_0_0.eContents().get(1);
		private final RuleCall cExpressionsCONTINUETerminalRuleCall_11_5_0_0_2 = (RuleCall)cExpressionsAlternatives_11_5_0_0.eContents().get(2);
		private final RuleCall cEOLINETerminalRuleCall_11_5_1 = (RuleCall)cGroup_11_5.eContents().get(1);
		private final RuleCall cCLOSEKEYTerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final RuleCall cEOLINETerminalRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		
		//ForLoop:
		//    "for" OPENPARENTHESIS ((typeCounter = ("uint"|"int") (nameCounter=Identifier) "=" value = INT)|(typeCounter = ("char") (nameCounter=Identifier) "=" valueCounter = CHAR )) SEMICOLON condition=ArithmeticalComparationExpression SEMICOLON (IncrementLoopExpression|DecrementLoopExpression) CLOSEPARENTHESIS OPENKEY EOLINE?
		//        gasrestriction += RestrictionGas
		//        (restriction += RestrictionClause |properties += Properties| conditions += Condition |  undeterminedloops += UnDeterminedLoop  | determinedloops += ForLoop | expressions += (Expression|BREAK|CONTINUE)EOLINE?
		//        )*
		//    CLOSEKEY EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"for" OPENPARENTHESIS ((typeCounter = ("uint"|"int") (nameCounter=Identifier) "=" value = INT)|(typeCounter = ("char") (nameCounter=Identifier) "=" valueCounter = CHAR )) SEMICOLON condition=ArithmeticalComparationExpression SEMICOLON (IncrementLoopExpression|DecrementLoopExpression) CLOSEPARENTHESIS OPENKEY EOLINE?
		//    gasrestriction += RestrictionGas
		//    (restriction += RestrictionClause |properties += Properties| conditions += Condition |  undeterminedloops += UnDeterminedLoop  | determinedloops += ForLoop | expressions += (Expression|BREAK|CONTINUE)EOLINE?
		//    )*
		//CLOSEKEY EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_1() { return cOPENPARENTHESISTerminalRuleCall_1; }
		
		//((typeCounter = ("uint"|"int") (nameCounter=Identifier) "=" value = INT)|(typeCounter = ("char") (nameCounter=Identifier) "=" valueCounter = CHAR ))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(typeCounter = ("uint"|"int") (nameCounter=Identifier) "=" value = INT)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//typeCounter = ("uint"|"int")
		public Assignment getTypeCounterAssignment_2_0_0() { return cTypeCounterAssignment_2_0_0; }
		
		//("uint"|"int")
		public Alternatives getTypeCounterAlternatives_2_0_0_0() { return cTypeCounterAlternatives_2_0_0_0; }
		
		//"uint"
		public Keyword getTypeCounterUintKeyword_2_0_0_0_0() { return cTypeCounterUintKeyword_2_0_0_0_0; }
		
		//"int"
		public Keyword getTypeCounterIntKeyword_2_0_0_0_1() { return cTypeCounterIntKeyword_2_0_0_0_1; }
		
		//(nameCounter=Identifier)
		public Assignment getNameCounterAssignment_2_0_1() { return cNameCounterAssignment_2_0_1; }
		
		//Identifier
		public RuleCall getNameCounterIdentifierParserRuleCall_2_0_1_0() { return cNameCounterIdentifierParserRuleCall_2_0_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_0_2() { return cEqualsSignKeyword_2_0_2; }
		
		//value = INT
		public Assignment getValueAssignment_2_0_3() { return cValueAssignment_2_0_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0_3_0() { return cValueINTTerminalRuleCall_2_0_3_0; }
		
		//(typeCounter = ("char") (nameCounter=Identifier) "=" valueCounter = CHAR )
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//typeCounter = ("char")
		public Assignment getTypeCounterAssignment_2_1_0() { return cTypeCounterAssignment_2_1_0; }
		
		//("char")
		public Keyword getTypeCounterCharKeyword_2_1_0_0() { return cTypeCounterCharKeyword_2_1_0_0; }
		
		//(nameCounter=Identifier)
		public Assignment getNameCounterAssignment_2_1_1() { return cNameCounterAssignment_2_1_1; }
		
		//Identifier
		public RuleCall getNameCounterIdentifierParserRuleCall_2_1_1_0() { return cNameCounterIdentifierParserRuleCall_2_1_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_1_2() { return cEqualsSignKeyword_2_1_2; }
		
		//valueCounter = CHAR
		public Assignment getValueCounterAssignment_2_1_3() { return cValueCounterAssignment_2_1_3; }
		
		//CHAR
		public RuleCall getValueCounterCHARTerminalRuleCall_2_1_3_0() { return cValueCounterCHARTerminalRuleCall_2_1_3_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
		
		//condition=ArithmeticalComparationExpression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//ArithmeticalComparationExpression
		public RuleCall getConditionArithmeticalComparationExpressionParserRuleCall_4_0() { return cConditionArithmeticalComparationExpressionParserRuleCall_4_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_5() { return cSEMICOLONTerminalRuleCall_5; }
		
		//(IncrementLoopExpression|DecrementLoopExpression)
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//IncrementLoopExpression
		public RuleCall getIncrementLoopExpressionParserRuleCall_6_0() { return cIncrementLoopExpressionParserRuleCall_6_0; }
		
		//DecrementLoopExpression
		public RuleCall getDecrementLoopExpressionParserRuleCall_6_1() { return cDecrementLoopExpressionParserRuleCall_6_1; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_7() { return cCLOSEPARENTHESISTerminalRuleCall_7; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_8() { return cOPENKEYTerminalRuleCall_8; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_9() { return cEOLINETerminalRuleCall_9; }
		
		//gasrestriction += RestrictionGas
		public Assignment getGasrestrictionAssignment_10() { return cGasrestrictionAssignment_10; }
		
		//RestrictionGas
		public RuleCall getGasrestrictionRestrictionGasParserRuleCall_10_0() { return cGasrestrictionRestrictionGasParserRuleCall_10_0; }
		
		//(restriction += RestrictionClause |properties += Properties| conditions += Condition |  undeterminedloops += UnDeterminedLoop  | determinedloops += ForLoop | expressions += (Expression|BREAK|CONTINUE)EOLINE?
		//)*
		public Alternatives getAlternatives_11() { return cAlternatives_11; }
		
		//restriction += RestrictionClause
		public Assignment getRestrictionAssignment_11_0() { return cRestrictionAssignment_11_0; }
		
		//RestrictionClause
		public RuleCall getRestrictionRestrictionClauseParserRuleCall_11_0_0() { return cRestrictionRestrictionClauseParserRuleCall_11_0_0; }
		
		//properties += Properties
		public Assignment getPropertiesAssignment_11_1() { return cPropertiesAssignment_11_1; }
		
		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_11_1_0() { return cPropertiesPropertiesParserRuleCall_11_1_0; }
		
		//conditions += Condition
		public Assignment getConditionsAssignment_11_2() { return cConditionsAssignment_11_2; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_11_2_0() { return cConditionsConditionParserRuleCall_11_2_0; }
		
		//undeterminedloops += UnDeterminedLoop
		public Assignment getUndeterminedloopsAssignment_11_3() { return cUndeterminedloopsAssignment_11_3; }
		
		//UnDeterminedLoop
		public RuleCall getUndeterminedloopsUnDeterminedLoopParserRuleCall_11_3_0() { return cUndeterminedloopsUnDeterminedLoopParserRuleCall_11_3_0; }
		
		//determinedloops += ForLoop
		public Assignment getDeterminedloopsAssignment_11_4() { return cDeterminedloopsAssignment_11_4; }
		
		//ForLoop
		public RuleCall getDeterminedloopsForLoopParserRuleCall_11_4_0() { return cDeterminedloopsForLoopParserRuleCall_11_4_0; }
		
		//expressions += (Expression|BREAK|CONTINUE)EOLINE?
		public Group getGroup_11_5() { return cGroup_11_5; }
		
		//expressions += (Expression|BREAK|CONTINUE)
		public Assignment getExpressionsAssignment_11_5_0() { return cExpressionsAssignment_11_5_0; }
		
		//(Expression|BREAK|CONTINUE)
		public Alternatives getExpressionsAlternatives_11_5_0_0() { return cExpressionsAlternatives_11_5_0_0; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_11_5_0_0_0() { return cExpressionsExpressionParserRuleCall_11_5_0_0_0; }
		
		//BREAK
		public RuleCall getExpressionsBREAKTerminalRuleCall_11_5_0_0_1() { return cExpressionsBREAKTerminalRuleCall_11_5_0_0_1; }
		
		//CONTINUE
		public RuleCall getExpressionsCONTINUETerminalRuleCall_11_5_0_0_2() { return cExpressionsCONTINUETerminalRuleCall_11_5_0_0_2; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_11_5_1() { return cEOLINETerminalRuleCall_11_5_1; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_12() { return cCLOSEKEYTerminalRuleCall_12; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_13() { return cEOLINETerminalRuleCall_13; }
	}
	public class DoWhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.DoWhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPENKEYTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cEOLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cGasrestrictionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGasrestrictionRestrictionGasParserRuleCall_3_0 = (RuleCall)cGasrestrictionAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cRestrictionAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cRestrictionRestrictionClauseParserRuleCall_4_0_0 = (RuleCall)cRestrictionAssignment_4_0.eContents().get(0);
		private final Assignment cConditionsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_4_1_0 = (RuleCall)cConditionsAssignment_4_1.eContents().get(0);
		private final Assignment cUndeterminedloopsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cUndeterminedloopsUnDeterminedLoopParserRuleCall_4_2_0 = (RuleCall)cUndeterminedloopsAssignment_4_2.eContents().get(0);
		private final Assignment cDeterminedloopsAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cDeterminedloopsForLoopParserRuleCall_4_3_0 = (RuleCall)cDeterminedloopsAssignment_4_3.eContents().get(0);
		private final Group cGroup_4_4 = (Group)cAlternatives_4.eContents().get(4);
		private final RuleCall cEMITTerminalRuleCall_4_4_0 = (RuleCall)cGroup_4_4.eContents().get(0);
		private final Assignment cEventAssignment_4_4_1 = (Assignment)cGroup_4_4.eContents().get(1);
		private final CrossReference cEventEventCrossReference_4_4_1_0 = (CrossReference)cEventAssignment_4_4_1.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_4_4_1_0_1 = (RuleCall)cEventEventCrossReference_4_4_1_0.eContents().get(1);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_4_4_2 = (RuleCall)cGroup_4_4.eContents().get(2);
		private final Assignment cInputParamsAssignment_4_4_3 = (Assignment)cGroup_4_4.eContents().get(3);
		private final RuleCall cInputParamsInputParamParserRuleCall_4_4_3_0 = (RuleCall)cInputParamsAssignment_4_4_3.eContents().get(0);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_4_4_4 = (RuleCall)cGroup_4_4.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_4_4_5 = (RuleCall)cGroup_4_4.eContents().get(5);
		private final RuleCall cEOLINETerminalRuleCall_4_4_6 = (RuleCall)cGroup_4_4.eContents().get(6);
		private final Assignment cExpressionsAssignment_4_5 = (Assignment)cAlternatives_4.eContents().get(5);
		private final Alternatives cExpressionsAlternatives_4_5_0 = (Alternatives)cExpressionsAssignment_4_5.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_4_5_0_0 = (RuleCall)cExpressionsAlternatives_4_5_0.eContents().get(0);
		private final RuleCall cExpressionsBREAKTerminalRuleCall_4_5_0_1 = (RuleCall)cExpressionsAlternatives_4_5_0.eContents().get(1);
		private final RuleCall cExpressionsCONTINUETerminalRuleCall_4_5_0_2 = (RuleCall)cExpressionsAlternatives_4_5_0.eContents().get(2);
		private final RuleCall cCLOSEKEYTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cWhileKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cOPENPARENTHESISTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cConditionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Alternatives cConditionAlternatives_8_0 = (Alternatives)cConditionAssignment_8.eContents().get(0);
		private final RuleCall cConditionAndExpressionParserRuleCall_8_0_0 = (RuleCall)cConditionAlternatives_8_0.eContents().get(0);
		private final RuleCall cConditionOrExpressionParserRuleCall_8_0_1 = (RuleCall)cConditionAlternatives_8_0.eContents().get(1);
		private final RuleCall cConditionArithmeticalComparationExpressionParserRuleCall_8_0_2 = (RuleCall)cConditionAlternatives_8_0.eContents().get(2);
		private final RuleCall cConditionComparationExpressionParserRuleCall_8_0_3 = (RuleCall)cConditionAlternatives_8_0.eContents().get(3);
		private final RuleCall cConditionCallFunctionExpressionParserRuleCall_8_0_4 = (RuleCall)cConditionAlternatives_8_0.eContents().get(4);
		private final RuleCall cConditionBoolValueExpressionParserRuleCall_8_0_5 = (RuleCall)cConditionAlternatives_8_0.eContents().get(5);
		private final RuleCall cCLOSEPARENTHESISTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cEOLINETerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//DoWhileLoop:
		//    "do"  OPENKEY EOLINE?
		//        gasrestriction += RestrictionGas
		//        (restriction += RestrictionClause  | conditions += Condition| undeterminedloops += UnDeterminedLoop | determinedloops += ForLoop | (EMIT event += [Event] OPENPARENTHESIS inputParams+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE) | expressions += (Expression|BREAK|CONTINUE))*
		//    CLOSEKEY  "while" OPENPARENTHESIS condition=(AndExpression|OrExpression|ArithmeticalComparationExpression|ComparationExpression|CallFunctionExpression|BoolValueExpression) CLOSEPARENTHESIS EOLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"do"  OPENKEY EOLINE?
		//    gasrestriction += RestrictionGas
		//    (restriction += RestrictionClause  | conditions += Condition| undeterminedloops += UnDeterminedLoop | determinedloops += ForLoop | (EMIT event += [Event] OPENPARENTHESIS inputParams+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE) | expressions += (Expression|BREAK|CONTINUE))*
		//CLOSEKEY  "while" OPENPARENTHESIS condition=(AndExpression|OrExpression|ArithmeticalComparationExpression|ComparationExpression|CallFunctionExpression|BoolValueExpression) CLOSEPARENTHESIS EOLINE?
		public Group getGroup() { return cGroup; }
		
		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//OPENKEY
		public RuleCall getOPENKEYTerminalRuleCall_1() { return cOPENKEYTerminalRuleCall_1; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_2() { return cEOLINETerminalRuleCall_2; }
		
		//gasrestriction += RestrictionGas
		public Assignment getGasrestrictionAssignment_3() { return cGasrestrictionAssignment_3; }
		
		//RestrictionGas
		public RuleCall getGasrestrictionRestrictionGasParserRuleCall_3_0() { return cGasrestrictionRestrictionGasParserRuleCall_3_0; }
		
		//(restriction += RestrictionClause  | conditions += Condition| undeterminedloops += UnDeterminedLoop | determinedloops += ForLoop | (EMIT event += [Event] OPENPARENTHESIS inputParams+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE) | expressions += (Expression|BREAK|CONTINUE))*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//restriction += RestrictionClause
		public Assignment getRestrictionAssignment_4_0() { return cRestrictionAssignment_4_0; }
		
		//RestrictionClause
		public RuleCall getRestrictionRestrictionClauseParserRuleCall_4_0_0() { return cRestrictionRestrictionClauseParserRuleCall_4_0_0; }
		
		//conditions += Condition
		public Assignment getConditionsAssignment_4_1() { return cConditionsAssignment_4_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_4_1_0() { return cConditionsConditionParserRuleCall_4_1_0; }
		
		//undeterminedloops += UnDeterminedLoop
		public Assignment getUndeterminedloopsAssignment_4_2() { return cUndeterminedloopsAssignment_4_2; }
		
		//UnDeterminedLoop
		public RuleCall getUndeterminedloopsUnDeterminedLoopParserRuleCall_4_2_0() { return cUndeterminedloopsUnDeterminedLoopParserRuleCall_4_2_0; }
		
		//determinedloops += ForLoop
		public Assignment getDeterminedloopsAssignment_4_3() { return cDeterminedloopsAssignment_4_3; }
		
		//ForLoop
		public RuleCall getDeterminedloopsForLoopParserRuleCall_4_3_0() { return cDeterminedloopsForLoopParserRuleCall_4_3_0; }
		
		//(EMIT event += [Event] OPENPARENTHESIS inputParams+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE)
		public Group getGroup_4_4() { return cGroup_4_4; }
		
		//EMIT
		public RuleCall getEMITTerminalRuleCall_4_4_0() { return cEMITTerminalRuleCall_4_4_0; }
		
		//event += [Event]
		public Assignment getEventAssignment_4_4_1() { return cEventAssignment_4_4_1; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_4_4_1_0() { return cEventEventCrossReference_4_4_1_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_4_4_1_0_1() { return cEventEventIDTerminalRuleCall_4_4_1_0_1; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_4_4_2() { return cOPENPARENTHESISTerminalRuleCall_4_4_2; }
		
		//inputParams+=InputParam*
		public Assignment getInputParamsAssignment_4_4_3() { return cInputParamsAssignment_4_4_3; }
		
		//InputParam
		public RuleCall getInputParamsInputParamParserRuleCall_4_4_3_0() { return cInputParamsInputParamParserRuleCall_4_4_3_0; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_4_4_4() { return cCLOSEPARENTHESISTerminalRuleCall_4_4_4; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_4_4_5() { return cSEMICOLONTerminalRuleCall_4_4_5; }
		
		//EOLINE
		public RuleCall getEOLINETerminalRuleCall_4_4_6() { return cEOLINETerminalRuleCall_4_4_6; }
		
		//expressions += (Expression|BREAK|CONTINUE)
		public Assignment getExpressionsAssignment_4_5() { return cExpressionsAssignment_4_5; }
		
		//(Expression|BREAK|CONTINUE)
		public Alternatives getExpressionsAlternatives_4_5_0() { return cExpressionsAlternatives_4_5_0; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_4_5_0_0() { return cExpressionsExpressionParserRuleCall_4_5_0_0; }
		
		//BREAK
		public RuleCall getExpressionsBREAKTerminalRuleCall_4_5_0_1() { return cExpressionsBREAKTerminalRuleCall_4_5_0_1; }
		
		//CONTINUE
		public RuleCall getExpressionsCONTINUETerminalRuleCall_4_5_0_2() { return cExpressionsCONTINUETerminalRuleCall_4_5_0_2; }
		
		//CLOSEKEY
		public RuleCall getCLOSEKEYTerminalRuleCall_5() { return cCLOSEKEYTerminalRuleCall_5; }
		
		//"while"
		public Keyword getWhileKeyword_6() { return cWhileKeyword_6; }
		
		//OPENPARENTHESIS
		public RuleCall getOPENPARENTHESISTerminalRuleCall_7() { return cOPENPARENTHESISTerminalRuleCall_7; }
		
		//condition=(AndExpression|OrExpression|ArithmeticalComparationExpression|ComparationExpression|CallFunctionExpression|BoolValueExpression)
		public Assignment getConditionAssignment_8() { return cConditionAssignment_8; }
		
		//(AndExpression|OrExpression|ArithmeticalComparationExpression|ComparationExpression|CallFunctionExpression|BoolValueExpression)
		public Alternatives getConditionAlternatives_8_0() { return cConditionAlternatives_8_0; }
		
		//AndExpression
		public RuleCall getConditionAndExpressionParserRuleCall_8_0_0() { return cConditionAndExpressionParserRuleCall_8_0_0; }
		
		//OrExpression
		public RuleCall getConditionOrExpressionParserRuleCall_8_0_1() { return cConditionOrExpressionParserRuleCall_8_0_1; }
		
		//ArithmeticalComparationExpression
		public RuleCall getConditionArithmeticalComparationExpressionParserRuleCall_8_0_2() { return cConditionArithmeticalComparationExpressionParserRuleCall_8_0_2; }
		
		//ComparationExpression
		public RuleCall getConditionComparationExpressionParserRuleCall_8_0_3() { return cConditionComparationExpressionParserRuleCall_8_0_3; }
		
		//CallFunctionExpression
		public RuleCall getConditionCallFunctionExpressionParserRuleCall_8_0_4() { return cConditionCallFunctionExpressionParserRuleCall_8_0_4; }
		
		//BoolValueExpression
		public RuleCall getConditionBoolValueExpressionParserRuleCall_8_0_5() { return cConditionBoolValueExpressionParserRuleCall_8_0_5; }
		
		//CLOSEPARENTHESIS
		public RuleCall getCLOSEPARENTHESISTerminalRuleCall_9() { return cCLOSEPARENTHESISTerminalRuleCall_9; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_10() { return cEOLINETerminalRuleCall_10; }
	}
	
	public class InputModifierElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.InputModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVIEWEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVIEWViewKeyword_0_0 = (Keyword)cVIEWEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPUREEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPUREPureKeyword_1_0 = (Keyword)cPUREEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPAYABLEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPAYABLEPayableKeyword_2_0 = (Keyword)cPAYABLEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum InputModifier:
		//    VIEW = "view"| PURE = "pure"| PAYABLE = "payable"
		//;
		public EnumRule getRule() { return rule; }
		
		//VIEW = "view"| PURE = "pure"| PAYABLE = "payable"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VIEW = "view"
		public EnumLiteralDeclaration getVIEWEnumLiteralDeclaration_0() { return cVIEWEnumLiteralDeclaration_0; }
		
		//"view"
		public Keyword getVIEWViewKeyword_0_0() { return cVIEWViewKeyword_0_0; }
		
		//PURE = "pure"
		public EnumLiteralDeclaration getPUREEnumLiteralDeclaration_1() { return cPUREEnumLiteralDeclaration_1; }
		
		//"pure"
		public Keyword getPUREPureKeyword_1_0() { return cPUREPureKeyword_1_0; }
		
		//PAYABLE = "payable"
		public EnumLiteralDeclaration getPAYABLEEnumLiteralDeclaration_2() { return cPAYABLEEnumLiteralDeclaration_2; }
		
		//"payable"
		public Keyword getPAYABLEPayableKeyword_2_0() { return cPAYABLEPayableKeyword_2_0; }
	}
	public class StorageDataElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.StorageData");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMEMORYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMEMORYMemoryKeyword_0_0 = (Keyword)cMEMORYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTORAGEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTORAGEStorageKeyword_1_0 = (Keyword)cSTORAGEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCALLDATAEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCALLDATACalldataKeyword_2_0 = (Keyword)cCALLDATAEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum StorageData:
		//    MEMORY = "memory"| STORAGE = "storage" | CALLDATA = "calldata"
		//;
		public EnumRule getRule() { return rule; }
		
		//MEMORY = "memory"| STORAGE = "storage" | CALLDATA = "calldata"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MEMORY = "memory"
		public EnumLiteralDeclaration getMEMORYEnumLiteralDeclaration_0() { return cMEMORYEnumLiteralDeclaration_0; }
		
		//"memory"
		public Keyword getMEMORYMemoryKeyword_0_0() { return cMEMORYMemoryKeyword_0_0; }
		
		//STORAGE = "storage"
		public EnumLiteralDeclaration getSTORAGEEnumLiteralDeclaration_1() { return cSTORAGEEnumLiteralDeclaration_1; }
		
		//"storage"
		public Keyword getSTORAGEStorageKeyword_1_0() { return cSTORAGEStorageKeyword_1_0; }
		
		//CALLDATA = "calldata"
		public EnumLiteralDeclaration getCALLDATAEnumLiteralDeclaration_2() { return cCALLDATAEnumLiteralDeclaration_2; }
		
		//"calldata"
		public Keyword getCALLDATACalldataKeyword_2_0() { return cCALLDATACalldataKeyword_2_0; }
	}
	public class VisibilityElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRIVATEPrivateKeyword_1_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTERNALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTERNALInternalKeyword_2_0 = (Keyword)cINTERNALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEXTERNALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEXTERNALExternalKeyword_3_0 = (Keyword)cEXTERNALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Visibility:
		//    PUBLIC = "public"| PRIVATE = "private" | INTERNAL = "internal" | EXTERNAL = "external"
		//;
		public EnumRule getRule() { return rule; }
		
		//PUBLIC = "public"| PRIVATE = "private" | INTERNAL = "internal" | EXTERNAL = "external"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC = "public"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }
		
		//"public"
		public Keyword getPUBLICPublicKeyword_0_0() { return cPUBLICPublicKeyword_0_0; }
		
		//PRIVATE = "private"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_1() { return cPRIVATEEnumLiteralDeclaration_1; }
		
		//"private"
		public Keyword getPRIVATEPrivateKeyword_1_0() { return cPRIVATEPrivateKeyword_1_0; }
		
		//INTERNAL = "internal"
		public EnumLiteralDeclaration getINTERNALEnumLiteralDeclaration_2() { return cINTERNALEnumLiteralDeclaration_2; }
		
		//"internal"
		public Keyword getINTERNALInternalKeyword_2_0() { return cINTERNALInternalKeyword_2_0; }
		
		//EXTERNAL = "external"
		public EnumLiteralDeclaration getEXTERNALEnumLiteralDeclaration_3() { return cEXTERNALEnumLiteralDeclaration_3; }
		
		//"external"
		public Keyword getEXTERNALExternalKeyword_3_0() { return cEXTERNALExternalKeyword_3_0; }
	}
	public class CoinElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.Coin");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cETHEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cETHEREtherKeyword_0_0 = (Keyword)cETHEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWEIEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWEIWeiKeyword_1_0 = (Keyword)cWEIEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGWEIEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGWEIGweiKeyword_2_0 = (Keyword)cGWEIEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPWEIEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPWEIPweiKeyword_3_0 = (Keyword)cPWEIEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFINNEYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFINNEYFinneyKeyword_4_0 = (Keyword)cFINNEYEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSZABOEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSZABOSzaboKeyword_5_0 = (Keyword)cSZABOEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Coin:
		//    ETHER = "ether"| WEI = "wei"| GWEI = "gwei"| PWEI = "pwei" | FINNEY = "finney" | SZABO = "szabo"
		//;
		public EnumRule getRule() { return rule; }
		
		//ETHER = "ether"| WEI = "wei"| GWEI = "gwei"| PWEI = "pwei" | FINNEY = "finney" | SZABO = "szabo"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ETHER = "ether"
		public EnumLiteralDeclaration getETHEREnumLiteralDeclaration_0() { return cETHEREnumLiteralDeclaration_0; }
		
		//"ether"
		public Keyword getETHEREtherKeyword_0_0() { return cETHEREtherKeyword_0_0; }
		
		//WEI = "wei"
		public EnumLiteralDeclaration getWEIEnumLiteralDeclaration_1() { return cWEIEnumLiteralDeclaration_1; }
		
		//"wei"
		public Keyword getWEIWeiKeyword_1_0() { return cWEIWeiKeyword_1_0; }
		
		//GWEI = "gwei"
		public EnumLiteralDeclaration getGWEIEnumLiteralDeclaration_2() { return cGWEIEnumLiteralDeclaration_2; }
		
		//"gwei"
		public Keyword getGWEIGweiKeyword_2_0() { return cGWEIGweiKeyword_2_0; }
		
		//PWEI = "pwei"
		public EnumLiteralDeclaration getPWEIEnumLiteralDeclaration_3() { return cPWEIEnumLiteralDeclaration_3; }
		
		//"pwei"
		public Keyword getPWEIPweiKeyword_3_0() { return cPWEIPweiKeyword_3_0; }
		
		//FINNEY = "finney"
		public EnumLiteralDeclaration getFINNEYEnumLiteralDeclaration_4() { return cFINNEYEnumLiteralDeclaration_4; }
		
		//"finney"
		public Keyword getFINNEYFinneyKeyword_4_0() { return cFINNEYFinneyKeyword_4_0; }
		
		//SZABO = "szabo"
		public EnumLiteralDeclaration getSZABOEnumLiteralDeclaration_5() { return cSZABOEnumLiteralDeclaration_5; }
		
		//"szabo"
		public Keyword getSZABOSzaboKeyword_5_0() { return cSZABOSzaboKeyword_5_0; }
	}
	public class LoopOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.LoopOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDECREMENTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDECREMENTHyphenMinusHyphenMinusKeyword_0_0 = (Keyword)cDECREMENTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINCREMENTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINCREMENTPlusSignPlusSignKeyword_1_0 = (Keyword)cINCREMENTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LoopOperator:
		//    DECREMENT = "--" | INCREMENT = "++"
		//;
		public EnumRule getRule() { return rule; }
		
		//DECREMENT = "--" | INCREMENT = "++"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DECREMENT = "--"
		public EnumLiteralDeclaration getDECREMENTEnumLiteralDeclaration_0() { return cDECREMENTEnumLiteralDeclaration_0; }
		
		//"--"
		public Keyword getDECREMENTHyphenMinusHyphenMinusKeyword_0_0() { return cDECREMENTHyphenMinusHyphenMinusKeyword_0_0; }
		
		//INCREMENT = "++"
		public EnumLiteralDeclaration getINCREMENTEnumLiteralDeclaration_1() { return cINCREMENTEnumLiteralDeclaration_1; }
		
		//"++"
		public Keyword getINCREMENTPlusSignPlusSignKeyword_1_0() { return cINCREMENTPlusSignPlusSignKeyword_1_0; }
	}
	public class ComparationOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.ComparationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGreatherThanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGreatherThanGreaterThanSignKeyword_0_0 = (Keyword)cGreatherThanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLessThanLessThanSignKeyword_1_0 = (Keyword)cLessThanEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreatherOrEqualThanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreatherOrEqualThanGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGreatherOrEqualThanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLessOrEqualThanEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLessOrEqualThanLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLessOrEqualThanEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualToEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualToEqualsSignEqualsSignKeyword_4_0 = (Keyword)cEqualToEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualToEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualToExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNotEqualToEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ComparationOperator:
		//    GreatherThan = '>'|LessThan = '<'| GreatherOrEqualThan = ">="| LessOrEqualThan = "<="| EqualTo = "=="| NotEqualTo = "!="
		//;
		public EnumRule getRule() { return rule; }
		
		//GreatherThan = '>'|LessThan = '<'| GreatherOrEqualThan = ">="| LessOrEqualThan = "<="| EqualTo = "=="| NotEqualTo = "!="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GreatherThan = '>'
		public EnumLiteralDeclaration getGreatherThanEnumLiteralDeclaration_0() { return cGreatherThanEnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getGreatherThanGreaterThanSignKeyword_0_0() { return cGreatherThanGreaterThanSignKeyword_0_0; }
		
		//LessThan = '<'
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_1() { return cLessThanEnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getLessThanLessThanSignKeyword_1_0() { return cLessThanLessThanSignKeyword_1_0; }
		
		//GreatherOrEqualThan = ">="
		public EnumLiteralDeclaration getGreatherOrEqualThanEnumLiteralDeclaration_2() { return cGreatherOrEqualThanEnumLiteralDeclaration_2; }
		
		//">="
		public Keyword getGreatherOrEqualThanGreaterThanSignEqualsSignKeyword_2_0() { return cGreatherOrEqualThanGreaterThanSignEqualsSignKeyword_2_0; }
		
		//LessOrEqualThan = "<="
		public EnumLiteralDeclaration getLessOrEqualThanEnumLiteralDeclaration_3() { return cLessOrEqualThanEnumLiteralDeclaration_3; }
		
		//"<="
		public Keyword getLessOrEqualThanLessThanSignEqualsSignKeyword_3_0() { return cLessOrEqualThanLessThanSignEqualsSignKeyword_3_0; }
		
		//EqualTo = "=="
		public EnumLiteralDeclaration getEqualToEnumLiteralDeclaration_4() { return cEqualToEnumLiteralDeclaration_4; }
		
		//"=="
		public Keyword getEqualToEqualsSignEqualsSignKeyword_4_0() { return cEqualToEqualsSignEqualsSignKeyword_4_0; }
		
		//NotEqualTo = "!="
		public EnumLiteralDeclaration getNotEqualToEnumLiteralDeclaration_5() { return cNotEqualToEnumLiteralDeclaration_5; }
		
		//"!="
		public Keyword getNotEqualToExclamationMarkEqualsSignKeyword_5_0() { return cNotEqualToExclamationMarkEqualsSignKeyword_5_0; }
	}
	public class LogicalPairOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.LogicalPairOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAmpersandAmpersandKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORVerticalLineVerticalLineKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LogicalPairOperator:
		//    AND = "&&"| OR = "||"
		//;
		public EnumRule getRule() { return rule; }
		
		//AND = "&&"| OR = "||"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND = "&&"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//"&&"
		public Keyword getANDAmpersandAmpersandKeyword_0_0() { return cANDAmpersandAmpersandKeyword_0_0; }
		
		//OR = "||"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//"||"
		public Keyword getORVerticalLineVerticalLineKeyword_1_0() { return cORVerticalLineVerticalLineKeyword_1_0; }
	}
	public class ArithmeticalOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.ArithmeticalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBTRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBTRACTHyphenMinusKeyword_1_0 = (Keyword)cSUBTRACTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULTIPLYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULTIPLYAsteriskKeyword_2_0 = (Keyword)cMULTIPLYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIVIDESolidusKeyword_3_0 = (Keyword)cDIVIDEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMODULOEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMODULOPercentSignKeyword_4_0 = (Keyword)cMODULOEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ArithmeticalOperator:
		//    ADD = '+' | SUBTRACT = '-'| MULTIPLY = '*'| DIVIDE = '/' | MODULO = '%'
		//;
		public EnumRule getRule() { return rule; }
		
		//ADD = '+' | SUBTRACT = '-'| MULTIPLY = '*'| DIVIDE = '/' | MODULO = '%'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD = '+'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//SUBTRACT = '-'
		public EnumLiteralDeclaration getSUBTRACTEnumLiteralDeclaration_1() { return cSUBTRACTEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getSUBTRACTHyphenMinusKeyword_1_0() { return cSUBTRACTHyphenMinusKeyword_1_0; }
		
		//MULTIPLY = '*'
		public EnumLiteralDeclaration getMULTIPLYEnumLiteralDeclaration_2() { return cMULTIPLYEnumLiteralDeclaration_2; }
		
		//'*'
		public Keyword getMULTIPLYAsteriskKeyword_2_0() { return cMULTIPLYAsteriskKeyword_2_0; }
		
		//DIVIDE = '/'
		public EnumLiteralDeclaration getDIVIDEEnumLiteralDeclaration_3() { return cDIVIDEEnumLiteralDeclaration_3; }
		
		//'/'
		public Keyword getDIVIDESolidusKeyword_3_0() { return cDIVIDESolidusKeyword_3_0; }
		
		//MODULO = '%'
		public EnumLiteralDeclaration getMODULOEnumLiteralDeclaration_4() { return cMODULOEnumLiteralDeclaration_4; }
		
		//'%'
		public Keyword getMODULOPercentSignKeyword_4_0() { return cMODULOPercentSignKeyword_4_0; }
	}
	public class AssignmentOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cASSIGNMENTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cASSIGNMENTEqualsSignKeyword_0_0 = (Keyword)cASSIGNMENTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cADDASSIGNMENTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cADDASSIGNMENTPlusSignEqualsSignKeyword_1_0 = (Keyword)cADDASSIGNMENTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESSASSIGNMENTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESSASSIGNMENTHyphenMinusEqualsSignKeyword_2_0 = (Keyword)cLESSASSIGNMENTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMULTIPLYASSIGNMENTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMULTIPLYASSIGNMENTAsteriskEqualsSignKeyword_3_0 = (Keyword)cMULTIPLYASSIGNMENTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDEASSIGNMENTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDIVIDEASSIGNMENTSolidusEqualsSignKeyword_4_0 = (Keyword)cDIVIDEASSIGNMENTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMODULOASSIGNMENTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMODULOASSIGNMENTPercentSignEqualsSignKeyword_5_0 = (Keyword)cMODULOASSIGNMENTEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum AssignmentOperator:
		//    ASSIGNMENT = '=' | ADDASSIGNMENT = "+="| LESSASSIGNMENT = "-="| MULTIPLYASSIGNMENT = "*="| DIVIDEASSIGNMENT = "/=" | MODULOASSIGNMENT = "%="
		//;
		public EnumRule getRule() { return rule; }
		
		//ASSIGNMENT = '=' | ADDASSIGNMENT = "+="| LESSASSIGNMENT = "-="| MULTIPLYASSIGNMENT = "*="| DIVIDEASSIGNMENT = "/=" | MODULOASSIGNMENT = "%="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ASSIGNMENT = '='
		public EnumLiteralDeclaration getASSIGNMENTEnumLiteralDeclaration_0() { return cASSIGNMENTEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getASSIGNMENTEqualsSignKeyword_0_0() { return cASSIGNMENTEqualsSignKeyword_0_0; }
		
		//ADDASSIGNMENT = "+="
		public EnumLiteralDeclaration getADDASSIGNMENTEnumLiteralDeclaration_1() { return cADDASSIGNMENTEnumLiteralDeclaration_1; }
		
		//"+="
		public Keyword getADDASSIGNMENTPlusSignEqualsSignKeyword_1_0() { return cADDASSIGNMENTPlusSignEqualsSignKeyword_1_0; }
		
		//LESSASSIGNMENT = "-="
		public EnumLiteralDeclaration getLESSASSIGNMENTEnumLiteralDeclaration_2() { return cLESSASSIGNMENTEnumLiteralDeclaration_2; }
		
		//"-="
		public Keyword getLESSASSIGNMENTHyphenMinusEqualsSignKeyword_2_0() { return cLESSASSIGNMENTHyphenMinusEqualsSignKeyword_2_0; }
		
		//MULTIPLYASSIGNMENT = "*="
		public EnumLiteralDeclaration getMULTIPLYASSIGNMENTEnumLiteralDeclaration_3() { return cMULTIPLYASSIGNMENTEnumLiteralDeclaration_3; }
		
		//"*="
		public Keyword getMULTIPLYASSIGNMENTAsteriskEqualsSignKeyword_3_0() { return cMULTIPLYASSIGNMENTAsteriskEqualsSignKeyword_3_0; }
		
		//DIVIDEASSIGNMENT = "/="
		public EnumLiteralDeclaration getDIVIDEASSIGNMENTEnumLiteralDeclaration_4() { return cDIVIDEASSIGNMENTEnumLiteralDeclaration_4; }
		
		//"/="
		public Keyword getDIVIDEASSIGNMENTSolidusEqualsSignKeyword_4_0() { return cDIVIDEASSIGNMENTSolidusEqualsSignKeyword_4_0; }
		
		//MODULOASSIGNMENT = "%="
		public EnumLiteralDeclaration getMODULOASSIGNMENTEnumLiteralDeclaration_5() { return cMODULOASSIGNMENTEnumLiteralDeclaration_5; }
		
		//"%="
		public Keyword getMODULOASSIGNMENTPercentSignEqualsSignKeyword_5_0() { return cMODULOASSIGNMENTPercentSignEqualsSignKeyword_5_0; }
	}
	public class TimeUnitElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSECONDSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSECONDSSecondsKeyword_0_0 = (Keyword)cSECONDSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTESEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUTESMinutesKeyword_1_0 = (Keyword)cMINUTESEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHOURSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHOURSHoursKeyword_2_0 = (Keyword)cHOURSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDAYSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDAYSDaysKeyword_3_0 = (Keyword)cDAYSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cWEEKSWeeksKeyword_4_0 = (Keyword)cWEEKSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cYEARSEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cYEARSYearsKeyword_5_0 = (Keyword)cYEARSEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum TimeUnit:
		//    SECONDS = "seconds"  | MINUTES = "minutes" | HOURS = "hours" |  DAYS = "days" |  WEEKS = "weeks" |  YEARS = "years"
		//;
		public EnumRule getRule() { return rule; }
		
		//SECONDS = "seconds"  | MINUTES = "minutes" | HOURS = "hours" |  DAYS = "days" |  WEEKS = "weeks" |  YEARS = "years"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SECONDS = "seconds"
		public EnumLiteralDeclaration getSECONDSEnumLiteralDeclaration_0() { return cSECONDSEnumLiteralDeclaration_0; }
		
		//"seconds"
		public Keyword getSECONDSSecondsKeyword_0_0() { return cSECONDSSecondsKeyword_0_0; }
		
		//MINUTES = "minutes"
		public EnumLiteralDeclaration getMINUTESEnumLiteralDeclaration_1() { return cMINUTESEnumLiteralDeclaration_1; }
		
		//"minutes"
		public Keyword getMINUTESMinutesKeyword_1_0() { return cMINUTESMinutesKeyword_1_0; }
		
		//HOURS = "hours"
		public EnumLiteralDeclaration getHOURSEnumLiteralDeclaration_2() { return cHOURSEnumLiteralDeclaration_2; }
		
		//"hours"
		public Keyword getHOURSHoursKeyword_2_0() { return cHOURSHoursKeyword_2_0; }
		
		//DAYS = "days"
		public EnumLiteralDeclaration getDAYSEnumLiteralDeclaration_3() { return cDAYSEnumLiteralDeclaration_3; }
		
		//"days"
		public Keyword getDAYSDaysKeyword_3_0() { return cDAYSDaysKeyword_3_0; }
		
		//WEEKS = "weeks"
		public EnumLiteralDeclaration getWEEKSEnumLiteralDeclaration_4() { return cWEEKSEnumLiteralDeclaration_4; }
		
		//"weeks"
		public Keyword getWEEKSWeeksKeyword_4_0() { return cWEEKSWeeksKeyword_4_0; }
		
		//YEARS = "years"
		public EnumLiteralDeclaration getYEARSEnumLiteralDeclaration_5() { return cYEARSEnumLiteralDeclaration_5; }
		
		//"years"
		public Keyword getYEARSYearsKeyword_5_0() { return cYEARSYearsKeyword_5_0; }
	}
	
	private final FileElements pFile;
	private final VersionElements pVersion;
	private final ExperimentalVersionElements pExperimentalVersion;
	private final LibraryElements pLibrary;
	private final ImportElements pImport;
	private final ElementElements pElement;
	private final InterfaceElements pInterface;
	private final DeclarationFunctionInterfaceElements pDeclarationFunctionInterface;
	private final MSGVariablesElements pMSGVariables;
	private final BlockVariablesElements pBlockVariables;
	private final TxVariablesElements pTxVariables;
	private final DeclarationFunctionAbstractContractElements pDeclarationFunctionAbstractContract;
	private final AbstractContractElements pAbstractContract;
	private final ContractElements pContract;
	private final ConstructorElements pConstructor;
	private final EventElements pEvent;
	private final ErrorElements pError;
	private final AttributesElements pAttributes;
	private final ModifierElements pModifier;
	private final RestrictionClauseElements pRestrictionClause;
	private final RestrictionElements pRestriction;
	private final RestrictionGasElements pRestrictionGas;
	private final AssertElements pAssert;
	private final DataTypeElements pDataType;
	private final MappingElements pMapping;
	private final MappingDeclarationElements pMappingDeclaration;
	private final PersonalizedStructElements pPersonalizedStruct;
	private final UserElements pUser;
	private final CompanyElements pCompany;
	private final EnumElements pEnum;
	private final SingularTypeElements pSingularType;
	private final TypeUintElements pTypeUint;
	private final TypeAddressElements pTypeAddress;
	private final TypeDoubleElements pTypeDouble;
	private final TypeBoolElements pTypeBool;
	private final TypeIntElements pTypeInt;
	private final TypeBytesElements pTypeBytes;
	private final TypeStringElements pTypeString;
	private final InputModifierElements eInputModifier;
	private final StorageDataElements eStorageData;
	private final VisibilityElements eVisibility;
	private final CoinElements eCoin;
	private final LoopOperatorElements eLoopOperator;
	private final ComparationOperatorElements eComparationOperator;
	private final LogicalPairOperatorElements eLogicalPairOperator;
	private final ArithmeticalOperatorElements eArithmeticalOperator;
	private final AssignmentOperatorElements eAssignmentOperator;
	private final TimeUnitElements eTimeUnit;
	private final IdentifierElements pIdentifier;
	private final TerminalRule tMSGSENDER;
	private final TerminalRule tMSGBALANCE;
	private final TerminalRule tMSGVALUE;
	private final TerminalRule tMSGGAS;
	private final TerminalRule tMSGDATA;
	private final TerminalRule tMSGSIG;
	private final TerminalRule tBCKDIFFICULTY;
	private final TerminalRule tBCKNUMBER;
	private final TerminalRule tBCKTIMESTAMP;
	private final TerminalRule tBCKCOINBASE;
	private final TerminalRule tBCKGASLIMIT;
	private final TerminalRule tBCKBLOCKHASH;
	private final TerminalRule tTXAMOUNT;
	private final TerminalRule tTXGASLEFT;
	private final TerminalRule tTXGASPRICE;
	private final TerminalRule tTXORIGIN;
	private final TerminalRule tNUMVERSION;
	private final TerminalRule tFLOAT;
	private final TerminalRule tCHAR;
	private final TerminalRule tBOOLVALUE;
	private final TerminalRule tCLOSEKEY;
	private final TerminalRule tOPENKEY;
	private final TerminalRule tOPENPARENTHESIS;
	private final TerminalRule tCLOSEPARENTHESIS;
	private final TerminalRule tEOLINE;
	private final TerminalRule tSEMICOLON;
	private final TerminalRule tDOT;
	private final TerminalRule tIF;
	private final TerminalRule tELSE;
	private final TerminalRule tRETURN;
	private final TerminalRule tRETURNS;
	private final TerminalRule tCOMMA;
	private final OverrideModifierElements pOverrideModifier;
	private final TerminalRule tEMIT;
	private final TerminalRule tBREAK;
	private final TerminalRule tCONTINUE;
	private final TerminalRule tNEW;
	private final TerminalRule tVIRTUAL;
	private final TerminalRule tCONSTANT;
	private final TerminalRule tHEXEXPRESSION;
	private final TerminalRule tADDRESSEXPRESION;
	private final TerminalRule tINDEXED;
	private final ArrayElements pArray;
	private final PropertiesElements pProperties;
	private final PropertyStringElements pPropertyString;
	private final PropertyIntegerElements pPropertyInteger;
	private final PropertyFloatElements pPropertyFloat;
	private final PropertyUIntegerElements pPropertyUInteger;
	private final PropertyBooleanElements pPropertyBoolean;
	private final PropertyAddressElements pPropertyAddress;
	private final PropertyIdentifierElements pPropertyIdentifier;
	private final PropertyUserElements pPropertyUser;
	private final PropertyCompanyElements pPropertyCompany;
	private final PropertyBytesElements pPropertyBytes;
	private final InputParamElements pInputParam;
	private final OutputParamElements pOutputParam;
	private final ClauseElements pClause;
	private final ExpressionElements pExpression;
	private final DelimiterExpressionElements pDelimiterExpression;
	private final HexadecimalExpressionElements pHexadecimalExpression;
	private final BoolValueExpressionElements pBoolValueExpression;
	private final PredefinedFunctionsElements pPredefinedFunctions;
	private final SelfdestructElements pSelfdestruct;
	private final CryptographycFunctionsElements pCryptographycFunctions;
	private final KeccackFunctionElements pKeccackFunction;
	private final Sha256ExpressionElements pSha256Expression;
	private final Sha3ExpressionElements pSha3Expression;
	private final AbyExpressionElements pAbyExpression;
	private final AbyEncodeElements pAbyEncode;
	private final AbyEncodedPackedElements pAbyEncodedPacked;
	private final AbyDecodeElements pAbyDecode;
	private final AbyEncodeWithSignatureElements pAbyEncodeWithSignature;
	private final AbyEncodeWithSelectorElements pAbyEncodeWithSelector;
	private final AssignExpressionTupleElements pAssignExpressionTuple;
	private final UncheckedElements pUnchecked;
	private final AssignExpressionElements pAssignExpression;
	private final AssignValueExpressionElements pAssignValueExpression;
	private final ArrayExpressionElements pArrayExpression;
	private final CoinExpressionElements pCoinExpression;
	private final CreateObjectExpressionElements pCreateObjectExpression;
	private final CreateAddressObjectExpressionElements pCreateAddressObjectExpression;
	private final CreateUintObjectExpressionElements pCreateUintObjectExpression;
	private final CreateIntObjectExpressionElements pCreateIntObjectExpression;
	private final CreateBoolObjectExpressionElements pCreateBoolObjectExpression;
	private final CreateStringObjectExpressionElements pCreateStringObjectExpression;
	private final CreateByteObjectExpressionElements pCreateByteObjectExpression;
	private final VarExpressionElements pVarExpression;
	private final LogicalUnaryOperatorElements pLogicalUnaryOperator;
	private final NegationExpressionElements pNegationExpression;
	private final SyntaxExpressionElements pSyntaxExpression;
	private final TypeCastingExpressionElements pTypeCastingExpression;
	private final PayableExpressionElements pPayableExpression;
	private final NewPersonalizedTypeUserInicializationElements pNewPersonalizedTypeUserInicialization;
	private final FieldAssignElements pFieldAssign;
	private final NewPersonalizedTypeCompanyInicializationElements pNewPersonalizedTypeCompanyInicialization;
	private final PersonalizedTypeUserInicializationElements pPersonalizedTypeUserInicialization;
	private final PersonalizedTypeCompanyInicializationElements pPersonalizedTypeCompanyInicialization;
	private final TimeExpressionElements pTimeExpression;
	private final TupleExpressionElements pTupleExpression;
	private final ReturnExpressionElements pReturnExpression;
	private final ReturnExpressionValueElements pReturnExpressionValue;
	private final ReturnExpressionNoValueElements pReturnExpressionNoValue;
	private final CryptographycFunctionsComparationExpresionElements pCryptographycFunctionsComparationExpresion;
	private final ComparationExpressionElements pComparationExpression;
	private final ArithmeticalComparationExpressionElements pArithmeticalComparationExpression;
	private final NumberExpressionElements pNumberExpression;
	private final ArithmeticalExpressionElements pArithmeticalExpression;
	private final IncrementLoopExpressionElements pIncrementLoopExpression;
	private final DecrementLoopExpressionElements pDecrementLoopExpression;
	private final BitwiseExpressionElements pBitwiseExpression;
	private final ShiftExpressionElements pShiftExpression;
	private final CallFunctionExpressionElements pCallFunctionExpression;
	private final ParenthesisExpressionElements pParenthesisExpression;
	private final BracketExpressionElements pBracketExpression;
	private final IdentifierValueExpressionElements pIdentifierValueExpression;
	private final IdentifierDotExpressionElements pIdentifierDotExpression;
	private final AssemblyExpressionElements pAssemblyExpression;
	private final RevertExpressionElements pRevertExpression;
	private final DeleteExpressionElements pDeleteExpression;
	private final StructInicializationKeyExpressionElements pStructInicializationKeyExpression;
	private final LogicalComparationExpressionElements pLogicalComparationExpression;
	private final AndExpressionElements pAndExpression;
	private final OrExpressionElements pOrExpression;
	private final ConditionElements pCondition;
	private final UnDeterminedLoopElements pUnDeterminedLoop;
	private final WhileLoopElements pWhileLoop;
	private final ForLoopElements pForLoop;
	private final DoWhileLoopElements pDoWhileLoop;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmaCGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFile = new FileElements();
		this.pVersion = new VersionElements();
		this.pExperimentalVersion = new ExperimentalVersionElements();
		this.pLibrary = new LibraryElements();
		this.pImport = new ImportElements();
		this.pElement = new ElementElements();
		this.pInterface = new InterfaceElements();
		this.pDeclarationFunctionInterface = new DeclarationFunctionInterfaceElements();
		this.pMSGVariables = new MSGVariablesElements();
		this.pBlockVariables = new BlockVariablesElements();
		this.pTxVariables = new TxVariablesElements();
		this.pDeclarationFunctionAbstractContract = new DeclarationFunctionAbstractContractElements();
		this.pAbstractContract = new AbstractContractElements();
		this.pContract = new ContractElements();
		this.pConstructor = new ConstructorElements();
		this.pEvent = new EventElements();
		this.pError = new ErrorElements();
		this.pAttributes = new AttributesElements();
		this.pModifier = new ModifierElements();
		this.pRestrictionClause = new RestrictionClauseElements();
		this.pRestriction = new RestrictionElements();
		this.pRestrictionGas = new RestrictionGasElements();
		this.pAssert = new AssertElements();
		this.pDataType = new DataTypeElements();
		this.pMapping = new MappingElements();
		this.pMappingDeclaration = new MappingDeclarationElements();
		this.pPersonalizedStruct = new PersonalizedStructElements();
		this.pUser = new UserElements();
		this.pCompany = new CompanyElements();
		this.pEnum = new EnumElements();
		this.pSingularType = new SingularTypeElements();
		this.pTypeUint = new TypeUintElements();
		this.pTypeAddress = new TypeAddressElements();
		this.pTypeDouble = new TypeDoubleElements();
		this.pTypeBool = new TypeBoolElements();
		this.pTypeInt = new TypeIntElements();
		this.pTypeBytes = new TypeBytesElements();
		this.pTypeString = new TypeStringElements();
		this.eInputModifier = new InputModifierElements();
		this.eStorageData = new StorageDataElements();
		this.eVisibility = new VisibilityElements();
		this.eCoin = new CoinElements();
		this.eLoopOperator = new LoopOperatorElements();
		this.eComparationOperator = new ComparationOperatorElements();
		this.eLogicalPairOperator = new LogicalPairOperatorElements();
		this.eArithmeticalOperator = new ArithmeticalOperatorElements();
		this.eAssignmentOperator = new AssignmentOperatorElements();
		this.eTimeUnit = new TimeUnitElements();
		this.pIdentifier = new IdentifierElements();
		this.tMSGSENDER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.MSGSENDER");
		this.tMSGBALANCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.MSGBALANCE");
		this.tMSGVALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.MSGVALUE");
		this.tMSGGAS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.MSGGAS");
		this.tMSGDATA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.MSGDATA");
		this.tMSGSIG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.MSGSIG");
		this.tBCKDIFFICULTY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.BCKDIFFICULTY");
		this.tBCKNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.BCKNUMBER");
		this.tBCKTIMESTAMP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.BCKTIMESTAMP");
		this.tBCKCOINBASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.BCKCOINBASE");
		this.tBCKGASLIMIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.BCKGASLIMIT");
		this.tBCKBLOCKHASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.BCKBLOCKHASH");
		this.tTXAMOUNT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TXAMOUNT");
		this.tTXGASLEFT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TXGASLEFT");
		this.tTXGASPRICE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TXGASPRICE");
		this.tTXORIGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.TXORIGIN");
		this.tNUMVERSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.NUMVERSION");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.FLOAT");
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CHAR");
		this.tBOOLVALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.BOOLVALUE");
		this.tCLOSEKEY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CLOSEKEY");
		this.tOPENKEY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.OPENKEY");
		this.tOPENPARENTHESIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.OPENPARENTHESIS");
		this.tCLOSEPARENTHESIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CLOSEPARENTHESIS");
		this.tEOLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.EOLINE");
		this.tSEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.SEMICOLON");
		this.tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.DOT");
		this.tIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.IF");
		this.tELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.ELSE");
		this.tRETURN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.RETURN");
		this.tRETURNS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.RETURNS");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.COMMA");
		this.pOverrideModifier = new OverrideModifierElements();
		this.tEMIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.EMIT");
		this.tBREAK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.BREAK");
		this.tCONTINUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CONTINUE");
		this.tNEW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.NEW");
		this.tVIRTUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.VIRTUAL");
		this.tCONSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.CONSTANT");
		this.tHEXEXPRESSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.HEXEXPRESSION");
		this.tADDRESSEXPRESION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.ADDRESSEXPRESION");
		this.tINDEXED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaC.INDEXED");
		this.pArray = new ArrayElements();
		this.pProperties = new PropertiesElements();
		this.pPropertyString = new PropertyStringElements();
		this.pPropertyInteger = new PropertyIntegerElements();
		this.pPropertyFloat = new PropertyFloatElements();
		this.pPropertyUInteger = new PropertyUIntegerElements();
		this.pPropertyBoolean = new PropertyBooleanElements();
		this.pPropertyAddress = new PropertyAddressElements();
		this.pPropertyIdentifier = new PropertyIdentifierElements();
		this.pPropertyUser = new PropertyUserElements();
		this.pPropertyCompany = new PropertyCompanyElements();
		this.pPropertyBytes = new PropertyBytesElements();
		this.pInputParam = new InputParamElements();
		this.pOutputParam = new OutputParamElements();
		this.pClause = new ClauseElements();
		this.pExpression = new ExpressionElements();
		this.pDelimiterExpression = new DelimiterExpressionElements();
		this.pHexadecimalExpression = new HexadecimalExpressionElements();
		this.pBoolValueExpression = new BoolValueExpressionElements();
		this.pPredefinedFunctions = new PredefinedFunctionsElements();
		this.pSelfdestruct = new SelfdestructElements();
		this.pCryptographycFunctions = new CryptographycFunctionsElements();
		this.pKeccackFunction = new KeccackFunctionElements();
		this.pSha256Expression = new Sha256ExpressionElements();
		this.pSha3Expression = new Sha3ExpressionElements();
		this.pAbyExpression = new AbyExpressionElements();
		this.pAbyEncode = new AbyEncodeElements();
		this.pAbyEncodedPacked = new AbyEncodedPackedElements();
		this.pAbyDecode = new AbyDecodeElements();
		this.pAbyEncodeWithSignature = new AbyEncodeWithSignatureElements();
		this.pAbyEncodeWithSelector = new AbyEncodeWithSelectorElements();
		this.pAssignExpressionTuple = new AssignExpressionTupleElements();
		this.pUnchecked = new UncheckedElements();
		this.pAssignExpression = new AssignExpressionElements();
		this.pAssignValueExpression = new AssignValueExpressionElements();
		this.pArrayExpression = new ArrayExpressionElements();
		this.pCoinExpression = new CoinExpressionElements();
		this.pCreateObjectExpression = new CreateObjectExpressionElements();
		this.pCreateAddressObjectExpression = new CreateAddressObjectExpressionElements();
		this.pCreateUintObjectExpression = new CreateUintObjectExpressionElements();
		this.pCreateIntObjectExpression = new CreateIntObjectExpressionElements();
		this.pCreateBoolObjectExpression = new CreateBoolObjectExpressionElements();
		this.pCreateStringObjectExpression = new CreateStringObjectExpressionElements();
		this.pCreateByteObjectExpression = new CreateByteObjectExpressionElements();
		this.pVarExpression = new VarExpressionElements();
		this.pLogicalUnaryOperator = new LogicalUnaryOperatorElements();
		this.pNegationExpression = new NegationExpressionElements();
		this.pSyntaxExpression = new SyntaxExpressionElements();
		this.pTypeCastingExpression = new TypeCastingExpressionElements();
		this.pPayableExpression = new PayableExpressionElements();
		this.pNewPersonalizedTypeUserInicialization = new NewPersonalizedTypeUserInicializationElements();
		this.pFieldAssign = new FieldAssignElements();
		this.pNewPersonalizedTypeCompanyInicialization = new NewPersonalizedTypeCompanyInicializationElements();
		this.pPersonalizedTypeUserInicialization = new PersonalizedTypeUserInicializationElements();
		this.pPersonalizedTypeCompanyInicialization = new PersonalizedTypeCompanyInicializationElements();
		this.pTimeExpression = new TimeExpressionElements();
		this.pTupleExpression = new TupleExpressionElements();
		this.pReturnExpression = new ReturnExpressionElements();
		this.pReturnExpressionValue = new ReturnExpressionValueElements();
		this.pReturnExpressionNoValue = new ReturnExpressionNoValueElements();
		this.pCryptographycFunctionsComparationExpresion = new CryptographycFunctionsComparationExpresionElements();
		this.pComparationExpression = new ComparationExpressionElements();
		this.pArithmeticalComparationExpression = new ArithmeticalComparationExpressionElements();
		this.pNumberExpression = new NumberExpressionElements();
		this.pArithmeticalExpression = new ArithmeticalExpressionElements();
		this.pIncrementLoopExpression = new IncrementLoopExpressionElements();
		this.pDecrementLoopExpression = new DecrementLoopExpressionElements();
		this.pBitwiseExpression = new BitwiseExpressionElements();
		this.pShiftExpression = new ShiftExpressionElements();
		this.pCallFunctionExpression = new CallFunctionExpressionElements();
		this.pParenthesisExpression = new ParenthesisExpressionElements();
		this.pBracketExpression = new BracketExpressionElements();
		this.pIdentifierValueExpression = new IdentifierValueExpressionElements();
		this.pIdentifierDotExpression = new IdentifierDotExpressionElements();
		this.pAssemblyExpression = new AssemblyExpressionElements();
		this.pRevertExpression = new RevertExpressionElements();
		this.pDeleteExpression = new DeleteExpressionElements();
		this.pStructInicializationKeyExpression = new StructInicializationKeyExpressionElements();
		this.pLogicalComparationExpression = new LogicalComparationExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pCondition = new ConditionElements();
		this.pUnDeterminedLoop = new UnDeterminedLoopElements();
		this.pWhileLoop = new WhileLoopElements();
		this.pForLoop = new ForLoopElements();
		this.pDoWhileLoop = new DoWhileLoopElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.SmaC".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*Hay cuatro cardinalidades posibles diferentes:
	// * exactamente uno (el predeterminado, ningún operador)
	// * cero o uno (operador ?)
	// * cero o más (operador *)
	// * uno o más (operador +)
	// */
	//File:
	//    version=Version
	//    experimentalVersion = ExperimentalVersion?
	//    library+=Library*
	//    imports += Import*
	//    interfaces += Interface*
	//    abstractContracts += AbstractContract*
	//    contracts += Contract+
	//;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//Version:
	//    "pragma solidity" symbol=('^'|'>'|">=") numberVersion=NUMVERSION (symbolComparation=('<'|"<=") numberVersion2=NUMVERSION)? SEMICOLON EOLINE?
	//;
	public VersionElements getVersionAccess() {
		return pVersion;
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}
	
	//ExperimentalVersion:
	//    "pragma experimental" ("ABIEncoderV2"|"SMTChecker") SEMICOLON EOLINE?
	//;
	public ExperimentalVersionElements getExperimentalVersionAccess() {
		return pExperimentalVersion;
	}
	
	public ParserRule getExperimentalVersionRule() {
		return getExperimentalVersionAccess().getRule();
	}
	
	//Library:
	//    "library" name = Identifier OPENKEY
	//        structs += PersonalizedStruct*
	//        enums += Enum*
	//        functions += Clause*
	//    CLOSEKEY
	//;
	public LibraryElements getLibraryAccess() {
		return pLibrary;
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}
	
	//Import:
	//    "import" name = SyntaxExpression SEMICOLON EOLINE? |"import" ID "as" alias=Identifier "from" name = SyntaxExpression SEMICOLON EOLINE? | "import" name = SyntaxExpression "as" alias = Identifier SEMICOLON EOLINE?
	//;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Element:
	//    Interface|Contract|AbstractContract
	//;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Interface returns Interface:
	//    "interface" name = Identifier OPENKEY EOLINE?
	//        interfaceEvents += Event*
	//        interfaceFunction += DeclarationFunctionInterface+
	//    CLOSEKEY EOLINE?
	//;
	public InterfaceElements getInterfaceAccess() {
		return pInterface;
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}
	
	//DeclarationFunctionInterface:
	//    "function" name = Identifier OPENPARENTHESIS inputParams += InputParam* CLOSEPARENTHESIS "external"? modifier=("view"|"payable")?  (RETURNS OPENPARENTHESIS outputParams += OutputParam CLOSEPARENTHESIS)? SEMICOLON EOLINE?
	//;
	public DeclarationFunctionInterfaceElements getDeclarationFunctionInterfaceAccess() {
		return pDeclarationFunctionInterface;
	}
	
	public ParserRule getDeclarationFunctionInterfaceRule() {
		return getDeclarationFunctionInterfaceAccess().getRule();
	}
	
	//MSGVariables:
	//    (MSGSENDER | MSGDATA | MSGSIG | MSGGAS | MSGVALUE) (DOT Identifier (OPENPARENTHESIS (Identifier|NumberExpression)? CLOSEPARENTHESIS)?)?
	//;
	public MSGVariablesElements getMSGVariablesAccess() {
		return pMSGVariables;
	}
	
	public ParserRule getMSGVariablesRule() {
		return getMSGVariablesAccess().getRule();
	}
	
	//BlockVariables:
	//    (BCKDIFFICULTY  | BCKNUMBER  | BCKCOINBASE | BCKTIMESTAMP | BCKGASLIMIT | BCKBLOCKHASH) (OPENPARENTHESIS (Identifier|NumberExpression) CLOSEPARENTHESIS)?
	//;
	public BlockVariablesElements getBlockVariablesAccess() {
		return pBlockVariables;
	}
	
	public ParserRule getBlockVariablesRule() {
		return getBlockVariablesAccess().getRule();
	}
	
	//TxVariables:
	//    (TXAMOUNT | TXGASLEFT |TXGASPRICE | TXORIGIN)  (OPENPARENTHESIS (Identifier|NumberExpression) CLOSEPARENTHESIS)?
	//;
	public TxVariablesElements getTxVariablesAccess() {
		return pTxVariables;
	}
	
	public ParserRule getTxVariablesRule() {
		return getTxVariablesAccess().getRule();
	}
	
	//DeclarationFunctionAbstractContract:
	//    "function" name = Identifier OPENPARENTHESIS inputParams += InputParam* CLOSEPARENTHESIS visibility=Visibility  modifier=("view"|"payable")?  virtual=VIRTUAL? (RETURNS OPENPARENTHESIS outputParams += OutputParam CLOSEPARENTHESIS)? SEMICOLON EOLINE?
	//;
	public DeclarationFunctionAbstractContractElements getDeclarationFunctionAbstractContractAccess() {
		return pDeclarationFunctionAbstractContract;
	}
	
	public ParserRule getDeclarationFunctionAbstractContractRule() {
		return getDeclarationFunctionAbstractContractAccess().getRule();
	}
	
	//AbstractContract:
	//    "abstract contract" name = Identifier ("is" (superType += [Element] COMMA?)*)? OPENKEY EOLINE?
	//        modifiers += Modifier*
	//        events += Event*
	//        errors += Error*
	//        clauses += DeclarationFunctionAbstractContract*
	//    CLOSEKEY EOLINE?
	//;
	public AbstractContractElements getAbstractContractAccess() {
		return pAbstractContract;
	}
	
	public ParserRule getAbstractContractRule() {
		return getAbstractContractAccess().getRule();
	}
	
	//Contract:
	//    "contract" name = Identifier ("is" (superType += [Element] COMMA?)*)? OPENKEY EOLINE?
	//        (localEnumerators += Enum | localProperties += Properties | localMappingProperties += Mapping | structs += PersonalizedStruct | structUser = User | structCompany = Company | "using" libraries += [Library]+ "for" (Identifier|IdentifierValueExpression|BracketExpression|'*'|SingularType) SEMICOLON EOLINE?)*
	//        constructors += Constructor*
	//        modifiers += Modifier*
	//        events += Event*
	//        errors += Error*
	//        clauses += Clause*
	//    CLOSEKEY EOLINE?
	//;
	public ContractElements getContractAccess() {
		return pContract;
	}
	
	public ParserRule getContractRule() {
		return getContractAccess().getRule();
	}
	
	//Constructor:
	//    "constructor" OPENPARENTHESIS inputParams += InputParam* CLOSEPARENTHESIS type = ("public"|"internal")? (constructorContractInherance +=[Contract] OPENPARENTHESIS  inputParamsConstructorContractInherance += InputParam* CLOSEPARENTHESIS)? payable="payable"? OPENKEY EOLINE?
	//         ((restrictions += (Restriction|RestrictionGas|Assert)|conditions += Condition | undeterminedLoops += UnDeterminedLoop  | determinedLoops += ForLoop| attributesInitialization += (Expression) SEMICOLON?))*
	//    CLOSEKEY EOLINE?
	//;
	public ConstructorElements getConstructorAccess() {
		return pConstructor;
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}
	
	//Event:
	//    "event" name = Identifier OPENPARENTHESIS (inputParams += InputParam)* CLOSEPARENTHESIS SEMICOLON EOLINE? //Falta incluir el "indexed" dentro de los parámetros de entrada del evento
	//;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Error:
	//    "error" name = Identifier OPENPARENTHESIS (inputParams += InputParam)* CLOSEPARENTHESIS SEMICOLON EOLINE? //Falta incluir el "indexed" dentro de los parámetros de entrada del evento
	//;
	public ErrorElements getErrorAccess() {
		return pError;
	}
	
	public ParserRule getErrorRule() {
		return getErrorAccess().getRule();
	}
	
	//Attributes returns ecore::EObject:
	//     DataType
	//;
	public AttributesElements getAttributesAccess() {
		return pAttributes;
	}
	
	public ParserRule getAttributesRule() {
		return getAttributesAccess().getRule();
	}
	
	//Modifier:
	//    "modifier" name = Identifier OPENPARENTHESIS inputParams += InputParam* CLOSEPARENTHESIS OPENKEY EOLINE?
	//        conditionRestricion += (Restriction|RestrictionGas|Assert)*
	//        (expressionsAssignValueBeforeMark += AssignExpression SEMICOLON? | conditionsBeforeMark += Condition)*
	//        "_;"
	//        (expressionsAssignValueAfterMark += AssignExpression SEMICOLON? | conditionsAfterMark += Condition)*
	//    CLOSEKEY EOLINE?
	//;
	public ModifierElements getModifierAccess() {
		return pModifier;
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}
	
	//RestrictionClause:
	//    Restriction|RestrictionGas|Assert
	//;
	public RestrictionClauseElements getRestrictionClauseAccess() {
		return pRestrictionClause;
	}
	
	public ParserRule getRestrictionClauseRule() {
		return getRestrictionClauseAccess().getRule();
	}
	
	//Restriction:
	//    "require" OPENPARENTHESIS (((LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|"now"|IdentifierDotExpression|MSGVariables|TypeCastingExpression|BCKTIMESTAMP|CallFunctionExpression|BoolValueExpression)| OPENPARENTHESIS ( LogicalUnaryOperator? expr1=(BracketExpression|IdentifierDotExpression|SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGVariables|BlockVariables|"now"|TypeCastingExpression|CallFunctionExpression)) CLOSEPARENTHESIS)
	//    (operator=ComparationOperator expr2=(SyntaxExpression|Identifier|NumberExpression|IdentifierDotExpression|ArithmeticalExpression|MSGVariables|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression|BoolValueExpression))?
	//    ) (COMMA message=SyntaxExpression)?) CLOSEPARENTHESIS SEMICOLON EOLINE?
	//;
	public RestrictionElements getRestrictionAccess() {
		return pRestriction;
	}
	
	public ParserRule getRestrictionRule() {
		return getRestrictionAccess().getRule();
	}
	
	//RestrictionGas:
	//    "require" OPENPARENTHESIS expr1=(Identifier|NumberExpression|BracketExpression|IdentifierDotExpression|MSGVariables) operator=ComparationOperator amount=NumberExpression typeCoin=Coin (COMMA message=SyntaxExpression)? CLOSEPARENTHESIS SEMICOLON EOLINE?
	//;
	public RestrictionGasElements getRestrictionGasAccess() {
		return pRestrictionGas;
	}
	
	public ParserRule getRestrictionGasRule() {
		return getRestrictionGasAccess().getRule();
	}
	
	//Assert:
	//    "assert" OPENPARENTHESIS (((LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|BracketExpression|MSGSENDER|MSGVALUE|"now"|IdentifierValueExpression) | OPENPARENTHESIS ( LogicalUnaryOperator? expr1=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|BlockVariables|"now")) CLOSEPARENTHESIS)
	//        (operator=ComparationOperator expr2=(SyntaxExpression|Identifier|NumberExpression|ArithmeticalExpression|MSGSENDER|MSGVALUE|"now"))?
	//    )) CLOSEPARENTHESIS SEMICOLON EOLINE?
	//;
	public AssertElements getAssertAccess() {
		return pAssert;
	}
	
	public ParserRule getAssertRule() {
		return getAssertAccess().getRule();
	}
	
	//DataType returns ecore::EDataType:
	//    Enum
	//;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//Mapping:
	//    type=MappingDeclaration array=Array? constant=CONSTANT? visibility = Visibility? storageData = StorageData? nameMapping=Identifier ('=' inicialization = (Identifier|NumberExpression|SyntaxExpression))? SEMICOLON EOLINE?
	//;
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//MappingDeclaration:
	//    type = "mapping" OPENPARENTHESIS key=SingularType "=>" (value=(SingularType|"User"|"Company"|Identifier) array=Array?|valueIdentifier=(MappingDeclaration) array=Array?) CLOSEPARENTHESIS
	//;
	public MappingDeclarationElements getMappingDeclarationAccess() {
		return pMappingDeclaration;
	}
	
	public ParserRule getMappingDeclarationRule() {
		return getMappingDeclarationAccess().getRule();
	}
	
	//PersonalizedStruct:
	//    "struct" name = Identifier OPENKEY EOLINE?
	//         properties += (Properties)*
	//         mapping += (Mapping)*
	//         structs += (PersonalizedStruct)*
	//    CLOSEKEY EOLINE?
	//;
	public PersonalizedStructElements getPersonalizedStructAccess() {
		return pPersonalizedStruct;
	}
	
	public ParserRule getPersonalizedStructRule() {
		return getPersonalizedStructAccess().getRule();
	}
	
	//User:
	//    {User} "struct" name = "User" OPENKEY EOLINE?
	//         "address " nameAttributeAddress = Identifier  SEMICOLON EOLINE?
	//         "string" nameAttributeUser = Identifier SEMICOLON EOLINE?
	//         "string" nameAttributeSurnameUser = Identifier  SEMICOLON EOLINE?
	//         "string" emailAttributeUser = Identifier SEMICOLON EOLINE?
	//          properties += (Properties)*
	//          mapping += (Mapping)*
	//          structs += (PersonalizedStruct)*
	//    CLOSEKEY EOLINE?
	//;
	public UserElements getUserAccess() {
		return pUser;
	}
	
	public ParserRule getUserRule() {
		return getUserAccess().getRule();
	}
	
	//Company:
	//    {Company} "struct" name = "Company" OPENKEY EOLINE?
	//         "address " nameAttributeAddress = Identifier  SEMICOLON EOLINE?
	//         "string" nameAttributeCompany = Identifier  SEMICOLON EOLINE?
	//         "string" nameAttributeCity = Identifier   SEMICOLON EOLINE?
	//         "string" emailAttributeCompany = Identifier  SEMICOLON EOLINE?
	//        properties += (Properties)*
	//         mapping += (Mapping)*
	//         structs += (PersonalizedStruct)*
	//    CLOSEKEY EOLINE?
	//;
	public CompanyElements getCompanyAccess() {
		return pCompany;
	}
	
	public ParserRule getCompanyRule() {
		return getCompanyAccess().getRule();
	}
	
	//Enum:
	//    "enum" nameEnumerator=Identifier OPENKEY (values += (Identifier) COMMA?)* CLOSEKEY EOLINE?
	//;
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}
	
	//SingularType:
	//    TypeUint| TypeInt | TypeAddress | TypeDouble | TypeBool | TypeBytes |TypeString
	//;
	public SingularTypeElements getSingularTypeAccess() {
		return pSingularType;
	}
	
	public ParserRule getSingularTypeRule() {
		return getSingularTypeAccess().getRule();
	}
	
	//TypeUint:
	//    "uint"|"uint2"|"uint3"|"uint4"|"uint5"|"uint6"|"uint8"|"uint10"|"uint12"|"uint14"|"uint15"|"uint16"|"uint18"|"uint20"|"uint22"|"uint24"|"uint25"|"uint28"|"uint30"|"uint32"|"uint34"|"uint35"|"uint36"|"uint38"|"uint40"|"uint48"|"uint56"|"uint64"| "uint80"|"uint88"|"uint96"|"uint104"|"uint112"|"uint114"|"uint120"|"uint128" |"uint160"|"uint200"|"uint256"
	//;
	public TypeUintElements getTypeUintAccess() {
		return pTypeUint;
	}
	
	public ParserRule getTypeUintRule() {
		return getTypeUintAccess().getRule();
	}
	
	//TypeAddress:
	//    "address " | "address payable"
	//;
	public TypeAddressElements getTypeAddressAccess() {
		return pTypeAddress;
	}
	
	public ParserRule getTypeAddressRule() {
		return getTypeAddressAccess().getRule();
	}
	
	//TypeDouble:
	//    "double"
	//;
	public TypeDoubleElements getTypeDoubleAccess() {
		return pTypeDouble;
	}
	
	public ParserRule getTypeDoubleRule() {
		return getTypeDoubleAccess().getRule();
	}
	
	//TypeBool:
	//    "bool"
	//;
	public TypeBoolElements getTypeBoolAccess() {
		return pTypeBool;
	}
	
	public ParserRule getTypeBoolRule() {
		return getTypeBoolAccess().getRule();
	}
	
	//TypeInt:
	//    "int" |"int2"|"int3"|"int4"|"int5"|"int6"|"int8"|"int10"|"int12"|"int14"|"int15"|"int16"|"int18"|"int20"|"int22"|"int24"|"int28"|"int30"|"int32"|"int34"|"int35"|"int36"|"int38"|"int40"|"int48"|"int56"|"int64"|"int80"|"int88"|"int96"|"int104"|"int128"|"int160"|"int200"|"int256"
	//;
	public TypeIntElements getTypeIntAccess() {
		return pTypeInt;
	}
	
	public ParserRule getTypeIntRule() {
		return getTypeIntAccess().getRule();
	}
	
	//TypeBytes:
	//    "bytes"|"bytes2"|"bytes3"|"bytes4"|"bytes5"|"bytes6"|"bytes7"|"bytes8"|"bytes10"|"bytes12"|"bytes14"|"bytes16"|"bytes18"|"bytes20"|"bytes22"|"bytes24"|"bytes25"|"bytes26"|"bytes28"|"bytes30"|"bytes32"
	//;
	public TypeBytesElements getTypeBytesAccess() {
		return pTypeBytes;
	}
	
	public ParserRule getTypeBytesRule() {
		return getTypeBytesAccess().getRule();
	}
	
	//TypeString:
	//    "string"
	//;
	public TypeStringElements getTypeStringAccess() {
		return pTypeString;
	}
	
	public ParserRule getTypeStringRule() {
		return getTypeStringAccess().getRule();
	}
	
	//enum InputModifier:
	//    VIEW = "view"| PURE = "pure"| PAYABLE = "payable"
	//;
	public InputModifierElements getInputModifierAccess() {
		return eInputModifier;
	}
	
	public EnumRule getInputModifierRule() {
		return getInputModifierAccess().getRule();
	}
	
	//enum StorageData:
	//    MEMORY = "memory"| STORAGE = "storage" | CALLDATA = "calldata"
	//;
	public StorageDataElements getStorageDataAccess() {
		return eStorageData;
	}
	
	public EnumRule getStorageDataRule() {
		return getStorageDataAccess().getRule();
	}
	
	//enum Visibility:
	//    PUBLIC = "public"| PRIVATE = "private" | INTERNAL = "internal" | EXTERNAL = "external"
	//;
	public VisibilityElements getVisibilityAccess() {
		return eVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	//enum Coin:
	//    ETHER = "ether"| WEI = "wei"| GWEI = "gwei"| PWEI = "pwei" | FINNEY = "finney" | SZABO = "szabo"
	//;
	public CoinElements getCoinAccess() {
		return eCoin;
	}
	
	public EnumRule getCoinRule() {
		return getCoinAccess().getRule();
	}
	
	//enum LoopOperator:
	//    DECREMENT = "--" | INCREMENT = "++"
	//;
	public LoopOperatorElements getLoopOperatorAccess() {
		return eLoopOperator;
	}
	
	public EnumRule getLoopOperatorRule() {
		return getLoopOperatorAccess().getRule();
	}
	
	//enum ComparationOperator:
	//    GreatherThan = '>'|LessThan = '<'| GreatherOrEqualThan = ">="| LessOrEqualThan = "<="| EqualTo = "=="| NotEqualTo = "!="
	//;
	public ComparationOperatorElements getComparationOperatorAccess() {
		return eComparationOperator;
	}
	
	public EnumRule getComparationOperatorRule() {
		return getComparationOperatorAccess().getRule();
	}
	
	//enum LogicalPairOperator:
	//    AND = "&&"| OR = "||"
	//;
	public LogicalPairOperatorElements getLogicalPairOperatorAccess() {
		return eLogicalPairOperator;
	}
	
	public EnumRule getLogicalPairOperatorRule() {
		return getLogicalPairOperatorAccess().getRule();
	}
	
	//enum ArithmeticalOperator:
	//    ADD = '+' | SUBTRACT = '-'| MULTIPLY = '*'| DIVIDE = '/' | MODULO = '%'
	//;
	public ArithmeticalOperatorElements getArithmeticalOperatorAccess() {
		return eArithmeticalOperator;
	}
	
	public EnumRule getArithmeticalOperatorRule() {
		return getArithmeticalOperatorAccess().getRule();
	}
	
	//enum AssignmentOperator:
	//    ASSIGNMENT = '=' | ADDASSIGNMENT = "+="| LESSASSIGNMENT = "-="| MULTIPLYASSIGNMENT = "*="| DIVIDEASSIGNMENT = "/=" | MODULOASSIGNMENT = "%="
	//;
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return eAssignmentOperator;
	}
	
	public EnumRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}
	
	//enum TimeUnit:
	//    SECONDS = "seconds"  | MINUTES = "minutes" | HOURS = "hours" |  DAYS = "days" |  WEEKS = "weeks" |  YEARS = "years"
	//;
	public TimeUnitElements getTimeUnitAccess() {
		return eTimeUnit;
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//Identifier returns ecore::EString:
	//    (ID|CHAR)
	//;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//terminal MSGSENDER returns ecore::EString:
	//    "msg.sender"
	//;
	public TerminalRule getMSGSENDERRule() {
		return tMSGSENDER;
	}
	
	//terminal MSGBALANCE returns ecore::EString:
	//    "msg.balance"
	//;
	public TerminalRule getMSGBALANCERule() {
		return tMSGBALANCE;
	}
	
	//terminal MSGVALUE returns ecore::EString:
	//    "msg.value"
	//;
	public TerminalRule getMSGVALUERule() {
		return tMSGVALUE;
	}
	
	//terminal MSGGAS returns ecore::EString:
	//    "msg.gas"
	//;
	public TerminalRule getMSGGASRule() {
		return tMSGGAS;
	}
	
	//terminal MSGDATA returns ecore::EString:
	//    "msg.data"
	//;
	public TerminalRule getMSGDATARule() {
		return tMSGDATA;
	}
	
	//terminal MSGSIG returns ecore::EString:
	//    "msg.sig"
	//;
	public TerminalRule getMSGSIGRule() {
		return tMSGSIG;
	}
	
	//terminal BCKDIFFICULTY returns ecore::EString:
	//    "block.difficulty"
	//;
	public TerminalRule getBCKDIFFICULTYRule() {
		return tBCKDIFFICULTY;
	}
	
	//terminal BCKNUMBER returns ecore::EString:
	//    "block.number"
	//;
	public TerminalRule getBCKNUMBERRule() {
		return tBCKNUMBER;
	}
	
	//terminal BCKTIMESTAMP returns ecore::EString:
	//    "block.timestamp"
	//;
	public TerminalRule getBCKTIMESTAMPRule() {
		return tBCKTIMESTAMP;
	}
	
	//terminal BCKCOINBASE returns ecore::EString:
	//    "block.coinbase"
	//;
	public TerminalRule getBCKCOINBASERule() {
		return tBCKCOINBASE;
	}
	
	//terminal BCKGASLIMIT returns ecore::EString:
	//    "block.gaslimit"
	//;
	public TerminalRule getBCKGASLIMITRule() {
		return tBCKGASLIMIT;
	}
	
	//terminal BCKBLOCKHASH returns ecore::EString:
	//    "block.blockhash"
	//;
	public TerminalRule getBCKBLOCKHASHRule() {
		return tBCKBLOCKHASH;
	}
	
	//terminal TXAMOUNT returns ecore::EString:
	//    "tx.amount"
	//;
	public TerminalRule getTXAMOUNTRule() {
		return tTXAMOUNT;
	}
	
	//terminal TXGASLEFT returns ecore::EString:
	//    "tx.gasleft"
	//;
	public TerminalRule getTXGASLEFTRule() {
		return tTXGASLEFT;
	}
	
	//terminal TXGASPRICE returns ecore::EString:
	//    "tx.gasprice"
	//;
	public TerminalRule getTXGASPRICERule() {
		return tTXGASPRICE;
	}
	
	//terminal TXORIGIN returns ecore::EString:
	//    "tx.origin"
	//;
	public TerminalRule getTXORIGINRule() {
		return tTXORIGIN;
	}
	
	//terminal NUMVERSION returns ecore::EString:
	//    '0' DOT ('0'..'9') DOT ('0'..'9')+
	//;
	public TerminalRule getNUMVERSIONRule() {
		return tNUMVERSION;
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//    ('0'..'9')+'.'('0'..'9')+
	//;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal CHAR returns ecore::EChar:
	//    ('a'..'z')|('A'..'Z')
	//;
	public TerminalRule getCHARRule() {
		return tCHAR;
	}
	
	//terminal BOOLVALUE returns ecore::EBoolean:
	//    "true"|"false"
	//;
	public TerminalRule getBOOLVALUERule() {
		return tBOOLVALUE;
	}
	
	//terminal CLOSEKEY returns ecore::EChar:
	//    '}'
	//;
	public TerminalRule getCLOSEKEYRule() {
		return tCLOSEKEY;
	}
	
	//terminal OPENKEY returns ecore::EChar:
	//    '{'
	//;
	public TerminalRule getOPENKEYRule() {
		return tOPENKEY;
	}
	
	//terminal OPENPARENTHESIS returns ecore::EChar:
	//    '('
	//;
	public TerminalRule getOPENPARENTHESISRule() {
		return tOPENPARENTHESIS;
	}
	
	//terminal CLOSEPARENTHESIS returns ecore::EChar:
	//    ')'
	//;
	public TerminalRule getCLOSEPARENTHESISRule() {
		return tCLOSEPARENTHESIS;
	}
	
	//terminal EOLINE returns ecore::EString:
	//    "/n"
	//;
	public TerminalRule getEOLINERule() {
		return tEOLINE;
	}
	
	//terminal SEMICOLON returns ecore::EChar:
	//    ';'
	//;
	public TerminalRule getSEMICOLONRule() {
		return tSEMICOLON;
	}
	
	//terminal DOT returns ecore::EChar:
	//    '.'
	//;
	public TerminalRule getDOTRule() {
		return tDOT;
	}
	
	//terminal IF returns ecore::EString:
	//    "if"
	//;
	public TerminalRule getIFRule() {
		return tIF;
	}
	
	//terminal ELSE returns ecore::EString:
	//    "else"
	//;
	public TerminalRule getELSERule() {
		return tELSE;
	}
	
	//terminal RETURN returns ecore::EString:
	//    "return"
	//;
	public TerminalRule getRETURNRule() {
		return tRETURN;
	}
	
	//terminal RETURNS returns ecore::EString:
	//    "returns"
	//;
	public TerminalRule getRETURNSRule() {
		return tRETURNS;
	}
	
	//terminal COMMA returns ecore::EChar:
	//    ','
	//;
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//OverrideModifier:
	//  {OverrideModifier} "override" (OPENPARENTHESIS inputparamsOverride += InputParam* CLOSEPARENTHESIS)
	//;
	public OverrideModifierElements getOverrideModifierAccess() {
		return pOverrideModifier;
	}
	
	public ParserRule getOverrideModifierRule() {
		return getOverrideModifierAccess().getRule();
	}
	
	//terminal EMIT returns ecore::EString:
	//    "emit"
	//;
	public TerminalRule getEMITRule() {
		return tEMIT;
	}
	
	//terminal BREAK returns ecore::EString:
	//    "break" SEMICOLON
	//;
	public TerminalRule getBREAKRule() {
		return tBREAK;
	}
	
	//terminal CONTINUE returns ecore::EString:
	//    "continue" SEMICOLON
	//;
	public TerminalRule getCONTINUERule() {
		return tCONTINUE;
	}
	
	//terminal NEW returns ecore::EString:
	//    "new"
	//;
	public TerminalRule getNEWRule() {
		return tNEW;
	}
	
	//terminal VIRTUAL returns ecore::EString:
	//    "virtual"
	//;
	public TerminalRule getVIRTUALRule() {
		return tVIRTUAL;
	}
	
	//terminal CONSTANT returns ecore::EString:
	//    "constant"
	//;
	public TerminalRule getCONSTANTRule() {
		return tCONSTANT;
	}
	
	//terminal HEXEXPRESSION returns ecore::EString:
	//    "hex" STRING
	//;
	public TerminalRule getHEXEXPRESSIONRule() {
		return tHEXEXPRESSION;
	}
	
	//terminal ADDRESSEXPRESION returns ecore::EString:
	//    "0x"(('a'..'f')|('0'..'9')|('A'..'F'))*
	//;
	public TerminalRule getADDRESSEXPRESIONRule() {
		return tADDRESSEXPRESION;
	}
	
	//terminal INDEXED returns ecore::EString:
	//    "indexed"
	//;
	public TerminalRule getINDEXEDRule() {
		return tINDEXED;
	}
	
	//Array:
	//    (("[]" | '[' (INT) ']')( "[]" | '[' (INT)  ']')*)
	//;
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	//Properties:
	//    PropertyString|PropertyBoolean|PropertyInteger|PropertyUInteger|PropertyFloat|PropertyAddress|PropertyBytes|PropertyIdentifier|PropertyUser|PropertyCompany
	//;
	public PropertiesElements getPropertiesAccess() {
		return pProperties;
	}
	
	public ParserRule getPropertiesRule() {
		return getPropertiesAccess().getRule();
	}
	
	//PropertyString:
	//    type = TypeString array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? name = Identifier ('=' inicialization = (SyntaxExpression|Identifier|IdentifierDotExpression|BracketExpression|CallFunctionExpression|CreateStringObjectExpression))? SEMICOLON EOLINE?
	//;
	public PropertyStringElements getPropertyStringAccess() {
		return pPropertyString;
	}
	
	public ParserRule getPropertyStringRule() {
		return getPropertyStringAccess().getRule();
	}
	
	//PropertyInteger:
	//    type = TypeInt array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? name = Identifier ('=' inicialization =  (NumberExpression|Identifier|IdentifierDotExpression|ArithmeticalExpression|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression|CreateIntObjectExpression))? SEMICOLON EOLINE?
	//;
	public PropertyIntegerElements getPropertyIntegerAccess() {
		return pPropertyInteger;
	}
	
	public ParserRule getPropertyIntegerRule() {
		return getPropertyIntegerAccess().getRule();
	}
	
	//PropertyFloat:
	//    type = "float" array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? name = Identifier  ('=' inicialization =  (NumberExpression|Identifier|IdentifierDotExpression|ArithmeticalExpression|"now"|BracketExpression|TypeCastingExpression|CallFunctionExpression))? SEMICOLON EOLINE?
	//;
	public PropertyFloatElements getPropertyFloatAccess() {
		return pPropertyFloat;
	}
	
	public ParserRule getPropertyFloatRule() {
		return getPropertyFloatAccess().getRule();
	}
	
	//PropertyUInteger:
	//    type = TypeUint array=Array? constant=CONSTANT? visibility = Visibility?  (storageData = StorageData)? name = Identifier  ('=' inicialization =  (NumberExpression|Identifier|IdentifierValueExpression|ArithmeticalExpression|"now"|BracketExpression|BCKTIMESTAMP|TypeCastingExpression|CallFunctionExpression|CreateUintObjectExpression|ArrayExpression))? SEMICOLON EOLINE?
	//;
	public PropertyUIntegerElements getPropertyUIntegerAccess() {
		return pPropertyUInteger;
	}
	
	public ParserRule getPropertyUIntegerRule() {
		return getPropertyUIntegerAccess().getRule();
	}
	
	//PropertyBoolean:
	//    type = TypeBool array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? name = Identifier ('=' inicialization = (Identifier|IdentifierValueExpression|BoolValueExpression|CallFunctionExpression|CreateBoolObjectExpression) )? SEMICOLON EOLINE?
	//;
	public PropertyBooleanElements getPropertyBooleanAccess() {
		return pPropertyBoolean;
	}
	
	public ParserRule getPropertyBooleanRule() {
		return getPropertyBooleanAccess().getRule();
	}
	
	//PropertyAddress:
	//    type = TypeAddress array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? name = Identifier ('=' inicialization = (Identifier|IdentifierValueExpression|ADDRESSEXPRESION|MSGSENDER|BracketExpression|TypeCastingExpression|CallFunctionExpression|CreateAddressObjectExpression))? SEMICOLON EOLINE?
	//;
	public PropertyAddressElements getPropertyAddressAccess() {
		return pPropertyAddress;
	}
	
	public ParserRule getPropertyAddressRule() {
		return getPropertyAddressAccess().getRule();
	}
	
	//PropertyIdentifier:
	//    type = (Identifier|IdentifierValueExpression) array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? (name= Identifier)  ('=' inicialization = (Identifier|IdentifierValueExpression|StructInicializationKeyExpression|BracketExpression))? SEMICOLON EOLINE?
	//;
	public PropertyIdentifierElements getPropertyIdentifierAccess() {
		return pPropertyIdentifier;
	}
	
	public ParserRule getPropertyIdentifierRule() {
		return getPropertyIdentifierAccess().getRule();
	}
	
	//PropertyUser:
	//    type = "User" array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? (name= Identifier)  ('=' inicialization = (Identifier|IdentifierValueExpression|BracketExpression|PersonalizedTypeUserInicialization|NewPersonalizedTypeUserInicialization))? SEMICOLON EOLINE?
	//;
	public PropertyUserElements getPropertyUserAccess() {
		return pPropertyUser;
	}
	
	public ParserRule getPropertyUserRule() {
		return getPropertyUserAccess().getRule();
	}
	
	//PropertyCompany:
	//    type = "Company" array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? (name= Identifier)  ('=' inicialization = (Identifier|IdentifierValueExpression|BracketExpression|PersonalizedTypeCompanyInicialization|NewPersonalizedTypeCompanyInicialization))? SEMICOLON EOLINE?
	//;
	public PropertyCompanyElements getPropertyCompanyAccess() {
		return pPropertyCompany;
	}
	
	public ParserRule getPropertyCompanyRule() {
		return getPropertyCompanyAccess().getRule();
	}
	
	//PropertyBytes:
	//     type = TypeBytes array=Array? constant=CONSTANT? visibility = Visibility? (storageData = StorageData)? (name = Identifier) ('=' inicialization = (HEXEXPRESSION|Identifier|IdentifierValueExpression|ADDRESSEXPRESION|AbyExpression|TypeCastingExpression|CallFunctionExpression|CreateByteObjectExpression|Sha256Expression))? SEMICOLON EOLINE?
	//;
	public PropertyBytesElements getPropertyBytesAccess() {
		return pPropertyBytes;
	}
	
	public ParserRule getPropertyBytesRule() {
		return getPropertyBytesAccess().getRule();
	}
	
	//InputParam:
	//    //(((type =(SingularType|"Company"|"User"|Identifier|IdentifierValueExpression)) array=Array? indexed=("indexed"|"calldata")? storageData=StorageData? COMMA?) | MappingDeclaration)? valueInput = (SyntaxExpression|Identifier| NumberExpression | IdentifierValueExpression | MSGVariables | BlockVariables | TxVariables | ComparationExpression | ArithmeticalComparationExpression| ArithmeticalExpression | BoolValueExpression ) COMMA?
	//    ((type = (SingularType|"Company"|"User"|Identifier) array=Array? indexed=INDEXED? storageData = StorageData?  valueInput = (Identifier | IdentifierDotExpression)) | (valueInput = (Identifier | IdentifierDotExpression| MSGVariables | BlockVariables | TxVariables |SyntaxExpression| NumberExpression|ArithmeticalExpression | BoolValueExpression|ArithmeticalComparationExpression|CoinExpression) |  MappingDeclaration)) COMMA?
	//;
	public InputParamElements getInputParamAccess() {
		return pInputParam;
	}
	
	public ParserRule getInputParamRule() {
		return getInputParamAccess().getRule();
	}
	
	//OutputParam:
	//     (((type = (SingularType|"Company"|"User"|Identifier)) array=Array?  (storageData = StorageData)? value = Identifier?) | {OutputParam} value = (ComparationExpression|ArithmeticalComparationExpression|MSGVariables|IdentifierDotExpression|Identifier|ArithmeticalExpression)) COMMA?
	//;
	public OutputParamElements getOutputParamAccess() {
		return pOutputParam;
	}
	
	public ParserRule getOutputParamRule() {
		return getOutputParamAccess().getRule();
	}
	
	//Clause:
	//      "function" name = Identifier OPENPARENTHESIS inputParams += InputParam* CLOSEPARENTHESIS constant=CONSTANT? virtual=VIRTUAL? visibilityAccess = Visibility  (personalizedModifier += [Modifier] (OPENPARENTHESIS inputParamsModifier += InputParam* CLOSEPARENTHESIS)?)*  predefinedModifier=InputModifier?  override=OverrideModifier?
	//      (RETURNS OPENPARENTHESIS outputParams += OutputParam* CLOSEPARENTHESIS)? OPENKEY EOLINE?
	//               (restriction += RestrictionClause  | conditions += Condition | properties += Properties | mappingProperties += Mapping  | undeterminedloops += UnDeterminedLoop  | determinedloops += ForLoop
	//                | expressions += Expression EOLINE? | predefinedFunctions += PredefinedFunctions | (EMIT event += [Event]+ OPENPARENTHESIS inputParamsEvent+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?)
	//           )*
	//      CLOSEKEY EOLINE?
	//;
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}
	
	//Expression returns ecore::EString:
	//    (NegationExpression|SyntaxExpression|TypeCastingExpression|CreateObjectExpression|Unchecked
	//    TupleExpression|ReturnExpression|ComparationExpression|ArithmeticalComparationExpression|
	//    ArithmeticalExpression|LogicalComparationExpression|IncrementLoopExpression|
	//    DecrementLoopExpression|TimeExpression|ShiftExpression|RevertExpression|
	//    BitwiseExpression|AssignExpressionTuple|AssignExpression|VarExpression|CallFunctionExpression|
	//    BracketExpression|AssemblyExpression|DelimiterExpression|DeleteExpression|MSGVariables|ParenthesisExpression|PayableExpression) SEMICOLON?
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//DelimiterExpression:
	//    "_;"
	//;
	public DelimiterExpressionElements getDelimiterExpressionAccess() {
		return pDelimiterExpression;
	}
	
	public ParserRule getDelimiterExpressionRule() {
		return getDelimiterExpressionAccess().getRule();
	}
	
	//HexadecimalExpression returns ecore::EString:
	//     HEXEXPRESSION
	//;
	public HexadecimalExpressionElements getHexadecimalExpressionAccess() {
		return pHexadecimalExpression;
	}
	
	public ParserRule getHexadecimalExpressionRule() {
		return getHexadecimalExpressionAccess().getRule();
	}
	
	//BoolValueExpression returns ecore::EString:
	//     BOOLVALUE
	//;
	public BoolValueExpressionElements getBoolValueExpressionAccess() {
		return pBoolValueExpression;
	}
	
	public ParserRule getBoolValueExpressionRule() {
		return getBoolValueExpressionAccess().getRule();
	}
	
	//PredefinedFunctions returns ecore::EString:
	//     CryptographycFunctions|Selfdestruct
	//;
	public PredefinedFunctionsElements getPredefinedFunctionsAccess() {
		return pPredefinedFunctions;
	}
	
	public ParserRule getPredefinedFunctionsRule() {
		return getPredefinedFunctionsAccess().getRule();
	}
	
	//Selfdestruct:
	//    "selfdestruct" OPENPARENTHESIS (MSGVariables|Identifier|BracketExpression) CLOSEPARENTHESIS SEMICOLON EOLINE?
	//;
	public SelfdestructElements getSelfdestructAccess() {
		return pSelfdestruct;
	}
	
	public ParserRule getSelfdestructRule() {
		return getSelfdestructAccess().getRule();
	}
	
	//CryptographycFunctions:
	//    KeccackFunction|Sha256Expression|Sha3Expression
	//;
	public CryptographycFunctionsElements getCryptographycFunctionsAccess() {
		return pCryptographycFunctions;
	}
	
	public ParserRule getCryptographycFunctionsRule() {
		return getCryptographycFunctionsAccess().getRule();
	}
	
	//KeccackFunction:
	//    "keccak256" OPENPARENTHESIS (TypeCastingExpression|SyntaxExpression|AbyExpression|Identifier|BracketExpression) CLOSEPARENTHESIS  ('[' INT ']')*
	//;
	public KeccackFunctionElements getKeccackFunctionAccess() {
		return pKeccackFunction;
	}
	
	public ParserRule getKeccackFunctionRule() {
		return getKeccackFunctionAccess().getRule();
	}
	
	//Sha256Expression:
	//    "sha256" OPENPARENTHESIS (Identifier COMMA?)* CLOSEPARENTHESIS  | "sha256" OPENPARENTHESIS AbyExpression CLOSEPARENTHESIS
	//;
	public Sha256ExpressionElements getSha256ExpressionAccess() {
		return pSha256Expression;
	}
	
	public ParserRule getSha256ExpressionRule() {
		return getSha256ExpressionAccess().getRule();
	}
	
	//Sha3Expression:
	//    "sha3" OPENPARENTHESIS (Identifier COMMA?)* CLOSEPARENTHESIS
	//;
	public Sha3ExpressionElements getSha3ExpressionAccess() {
		return pSha3Expression;
	}
	
	public ParserRule getSha3ExpressionRule() {
		return getSha3ExpressionAccess().getRule();
	}
	
	//AbyExpression:
	//    AbyEncode|AbyEncodedPacked|AbyEncodeWithSelector|AbyEncodeWithSignature|AbyDecode
	//;
	public AbyExpressionElements getAbyExpressionAccess() {
		return pAbyExpression;
	}
	
	public ParserRule getAbyExpressionRule() {
		return getAbyExpressionAccess().getRule();
	}
	
	//AbyEncode:
	//    ("abi.encode") OPENPARENTHESIS ((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)* CLOSEPARENTHESIS
	//;
	public AbyEncodeElements getAbyEncodeAccess() {
		return pAbyEncode;
	}
	
	public ParserRule getAbyEncodeRule() {
		return getAbyEncodeAccess().getRule();
	}
	
	//AbyEncodedPacked:
	//    ("abi.encodePacked") OPENPARENTHESIS ((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)* CLOSEPARENTHESIS
	//;
	public AbyEncodedPackedElements getAbyEncodedPackedAccess() {
		return pAbyEncodedPacked;
	}
	
	public ParserRule getAbyEncodedPackedRule() {
		return getAbyEncodedPackedAccess().getRule();
	}
	
	//AbyDecode:
	//    ("abi.decode") OPENPARENTHESIS ((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)* CLOSEPARENTHESIS
	//;
	public AbyDecodeElements getAbyDecodeAccess() {
		return pAbyDecode;
	}
	
	public ParserRule getAbyDecodeRule() {
		return getAbyDecodeAccess().getRule();
	}
	
	//AbyEncodeWithSignature:
	//    ("abi.encodeWithSignature") OPENPARENTHESIS ((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)* CLOSEPARENTHESIS
	//;
	public AbyEncodeWithSignatureElements getAbyEncodeWithSignatureAccess() {
		return pAbyEncodeWithSignature;
	}
	
	public ParserRule getAbyEncodeWithSignatureRule() {
		return getAbyEncodeWithSignatureAccess().getRule();
	}
	
	//AbyEncodeWithSelector:
	//    ("abi.encodeWithSelector") OPENPARENTHESIS ((Identifier|IdentifierValueExpression|MSGVariables|SyntaxExpression) COMMA?)* CLOSEPARENTHESIS
	//;
	public AbyEncodeWithSelectorElements getAbyEncodeWithSelectorAccess() {
		return pAbyEncodeWithSelector;
	}
	
	public ParserRule getAbyEncodeWithSelectorRule() {
		return getAbyEncodeWithSelectorAccess().getRule();
	}
	
	//AssignExpressionTuple returns ecore::EString:
	//    OPENPARENTHESIS (SingularType? Identifier COMMA?)+ CLOSEPARENTHESIS AssignValueExpression
	//;
	public AssignExpressionTupleElements getAssignExpressionTupleAccess() {
		return pAssignExpressionTuple;
	}
	
	public ParserRule getAssignExpressionTupleRule() {
		return getAssignExpressionTupleAccess().getRule();
	}
	
	//Unchecked:
	//    "unchecked" OPENKEY Expression? CLOSEKEY
	//;
	public UncheckedElements getUncheckedAccess() {
		return pUnchecked;
	}
	
	public ParserRule getUncheckedRule() {
		return getUncheckedAccess().getRule();
	}
	
	//AssignExpression returns ecore::EString:
	//    (TypeCastingExpression |BracketExpression|Identifier ("memory"|"storage")? Identifier|IdentifierValueExpression ("memory"|"storage")? Identifier | IdentifierDotExpression |Identifier) AssignValueExpression
	//;
	public AssignExpressionElements getAssignExpressionAccess() {
		return pAssignExpression;
	}
	
	public ParserRule getAssignExpressionRule() {
		return getAssignExpressionAccess().getRule();
	}
	
	//AssignValueExpression:
	//    ('=' | '|=' | '^=' | '&=' | '<<=' | '>>=' | '+=' | '-=' | '*=' | '/=' | '%=') (Identifier (OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression|MSGSENDER) COMMA?)* CLOSEPARENTHESIS)? |BOOLVALUE|TimeExpression|CoinExpression|SyntaxExpression|NumberExpression|ArithmeticalExpression|TypeCastingExpression|TupleExpression|CreateObjectExpression|HexadecimalExpression|ADDRESSEXPRESION| IdentifierDotExpression |MSGVariables|"now"|BracketExpression|BCKTIMESTAMP|BCKNUMBER|PersonalizedTypeCompanyInicialization|PersonalizedTypeUserInicialization|NewPersonalizedTypeCompanyInicialization|NewPersonalizedTypeUserInicialization|ArrayExpression)
	//;
	public AssignValueExpressionElements getAssignValueExpressionAccess() {
		return pAssignValueExpression;
	}
	
	public ParserRule getAssignValueExpressionRule() {
		return getAssignValueExpressionAccess().getRule();
	}
	
	//ArrayExpression:
	//    '[' ((Identifier|IdentifierValueExpression|TypeCastingExpression|NumberExpression|STRING|BOOLVALUE|ADDRESSEXPRESION|HEXEXPRESSION|ArithmeticalExpression) COMMA? )*  ']'
	//;
	public ArrayExpressionElements getArrayExpressionAccess() {
		return pArrayExpression;
	}
	
	public ParserRule getArrayExpressionRule() {
		return getArrayExpressionAccess().getRule();
	}
	
	//CoinExpression returns ecore::EString:
	//    (INT|FLOAT|Identifier) ("ether" | "gwei" | "pwei" | "wei" | "finney" | "szabo" )
	//;
	public CoinExpressionElements getCoinExpressionAccess() {
		return pCoinExpression;
	}
	
	public ParserRule getCoinExpressionRule() {
		return getCoinExpressionAccess().getRule();
	}
	
	//CreateObjectExpression returns ecore::EString:
	//    NEW (Identifier) ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
	//;
	public CreateObjectExpressionElements getCreateObjectExpressionAccess() {
		return pCreateObjectExpression;
	}
	
	public ParserRule getCreateObjectExpressionRule() {
		return getCreateObjectExpressionAccess().getRule();
	}
	
	//CreateAddressObjectExpression returns ecore::EString:
	//    NEW ("address") ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
	//;
	public CreateAddressObjectExpressionElements getCreateAddressObjectExpressionAccess() {
		return pCreateAddressObjectExpression;
	}
	
	public ParserRule getCreateAddressObjectExpressionRule() {
		return getCreateAddressObjectExpressionAccess().getRule();
	}
	
	//CreateUintObjectExpression returns ecore::EString:
	//    NEW (TypeUint) ('[' INT? ']' |"[]")* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
	//;
	public CreateUintObjectExpressionElements getCreateUintObjectExpressionAccess() {
		return pCreateUintObjectExpression;
	}
	
	public ParserRule getCreateUintObjectExpressionRule() {
		return getCreateUintObjectExpressionAccess().getRule();
	}
	
	//CreateIntObjectExpression returns ecore::EString:
	//    NEW (TypeInt) ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
	//;
	public CreateIntObjectExpressionElements getCreateIntObjectExpressionAccess() {
		return pCreateIntObjectExpression;
	}
	
	public ParserRule getCreateIntObjectExpressionRule() {
		return getCreateIntObjectExpressionAccess().getRule();
	}
	
	//CreateBoolObjectExpression returns ecore::EString:
	//    NEW (TypeBool) ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|Identifier|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
	//;
	public CreateBoolObjectExpressionElements getCreateBoolObjectExpressionAccess() {
		return pCreateBoolObjectExpression;
	}
	
	public ParserRule getCreateBoolObjectExpressionRule() {
		return getCreateBoolObjectExpressionAccess().getRule();
	}
	
	//CreateStringObjectExpression returns ecore::EString:
	//    NEW (TypeString) ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
	//;
	public CreateStringObjectExpressionElements getCreateStringObjectExpressionAccess() {
		return pCreateStringObjectExpression;
	}
	
	public ParserRule getCreateStringObjectExpressionRule() {
		return getCreateStringObjectExpressionAccess().getRule();
	}
	
	//CreateByteObjectExpression returns ecore::EString:
	//    NEW (TypeBytes) ('[' INT? ']')* OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables) COMMA?)* CLOSEPARENTHESIS
	//;
	public CreateByteObjectExpressionElements getCreateByteObjectExpressionAccess() {
		return pCreateByteObjectExpression;
	}
	
	public ParserRule getCreateByteObjectExpressionRule() {
		return getCreateByteObjectExpressionAccess().getRule();
	}
	
	//VarExpression returns ecore::EString:
	//    "var" Identifier AssignValueExpression?
	//;
	public VarExpressionElements getVarExpressionAccess() {
		return pVarExpression;
	}
	
	public ParserRule getVarExpressionRule() {
		return getVarExpressionAccess().getRule();
	}
	
	//LogicalUnaryOperator returns ecore::EString:
	//     "!"
	//;
	public LogicalUnaryOperatorElements getLogicalUnaryOperatorAccess() {
		return pLogicalUnaryOperator;
	}
	
	public ParserRule getLogicalUnaryOperatorRule() {
		return getLogicalUnaryOperatorAccess().getRule();
	}
	
	//NegationExpression returns ecore::EString:
	//    LogicalUnaryOperator (Identifier|SyntaxExpression|MSGVariables|"now"|IdentifierValueExpression|BracketExpression)
	//;
	public NegationExpressionElements getNegationExpressionAccess() {
		return pNegationExpression;
	}
	
	public ParserRule getNegationExpressionRule() {
		return getNegationExpressionAccess().getRule();
	}
	
	//SyntaxExpression returns ecore::EString:
	//    STRING
	//;
	public SyntaxExpressionElements getSyntaxExpressionAccess() {
		return pSyntaxExpression;
	}
	
	public ParserRule getSyntaxExpressionRule() {
		return getSyntaxExpressionAccess().getRule();
	}
	
	//TypeCastingExpression returns ecore::EString:
	//    (SingularType|"type"|"address") OPENPARENTHESIS ((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|Identifier|NumberExpression|IdentifierDotExpression|MSGSENDER|"now") COMMA?)* CLOSEPARENTHESIS  (DOT Identifier)?
	//;
	public TypeCastingExpressionElements getTypeCastingExpressionAccess() {
		return pTypeCastingExpression;
	}
	
	public ParserRule getTypeCastingExpressionRule() {
		return getTypeCastingExpressionAccess().getRule();
	}
	
	//PayableExpression returns ecore::EString:
	//    "payable" (OPENPARENTHESIS ((STRING|Identifier|IdentifierDotExpression|INT|BOOLVALUE|MSGVariables|HEXEXPRESSION|ADDRESSEXPRESION|"now"|TypeCastingExpression) COMMA?)* CLOSEPARENTHESIS) (DOT Expression)?
	//;
	public PayableExpressionElements getPayableExpressionAccess() {
		return pPayableExpression;
	}
	
	public ParserRule getPayableExpressionRule() {
		return getPayableExpressionAccess().getRule();
	}
	
	//NewPersonalizedTypeUserInicialization:
	//    NEW? ("User"|Identifier|"Company") ('[' INT? ']')* OPENPARENTHESIS ((((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE) COMMA?)*)|(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY)) CLOSEPARENTHESIS
	//;
	public NewPersonalizedTypeUserInicializationElements getNewPersonalizedTypeUserInicializationAccess() {
		return pNewPersonalizedTypeUserInicialization;
	}
	
	public ParserRule getNewPersonalizedTypeUserInicializationRule() {
		return getNewPersonalizedTypeUserInicializationAccess().getRule();
	}
	
	//FieldAssign:
	//    Identifier ":" (SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
	//;
	public FieldAssignElements getFieldAssignAccess() {
		return pFieldAssign;
	}
	
	public ParserRule getFieldAssignRule() {
		return getFieldAssignAccess().getRule();
	}
	
	//NewPersonalizedTypeCompanyInicialization:
	//    NEW? ("Company") ('[' INT? ']')*  OPENPARENTHESIS ((((SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE) COMMA?)*)|(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY)) CLOSEPARENTHESIS
	//;
	public NewPersonalizedTypeCompanyInicializationElements getNewPersonalizedTypeCompanyInicializationAccess() {
		return pNewPersonalizedTypeCompanyInicialization;
	}
	
	public ParserRule getNewPersonalizedTypeCompanyInicializationRule() {
		return getNewPersonalizedTypeCompanyInicializationAccess().getRule();
	}
	
	///* */
	//PersonalizedTypeUserInicialization:
	//    ("User") ('[' INT? ']')* OPENPARENTHESIS ((
	//        (SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
	//        COMMA?)*)|(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY) CLOSEPARENTHESIS
	//;
	public PersonalizedTypeUserInicializationElements getPersonalizedTypeUserInicializationAccess() {
		return pPersonalizedTypeUserInicialization;
	}
	
	public ParserRule getPersonalizedTypeUserInicializationRule() {
		return getPersonalizedTypeUserInicializationAccess().getRule();
	}
	
	//PersonalizedTypeCompanyInicialization:
	//    ("Company") ('[' INT? ']')* OPENPARENTHESIS ((
	//        (SyntaxExpression|HexadecimalExpression|ADDRESSEXPRESION|NumberExpression|Identifier|"now"|IdentifierValueExpression|BracketExpression|MSGVariables|BOOLVALUE)
	//        COMMA?)*)|(OPENKEY FieldAssign (COMMA? FieldAssign)* CLOSEKEY) CLOSEPARENTHESIS
	//;
	public PersonalizedTypeCompanyInicializationElements getPersonalizedTypeCompanyInicializationAccess() {
		return pPersonalizedTypeCompanyInicialization;
	}
	
	public ParserRule getPersonalizedTypeCompanyInicializationRule() {
		return getPersonalizedTypeCompanyInicializationAccess().getRule();
	}
	
	//TimeExpression returns ecore::EString:
	//    INT ("seconds" | "minutes" | "hours" | "days" | "weeks" | "years" )
	//;
	public TimeExpressionElements getTimeExpressionAccess() {
		return pTimeExpression;
	}
	
	public ParserRule getTimeExpressionRule() {
		return getTimeExpressionAccess().getRule();
	}
	
	//TupleExpression returns ecore::EString:
	//    OPENPARENTHESIS ((SyntaxExpression|NumberExpression|BOOLVALUE|ADDRESSEXPRESION|(SingularType|"Company"|"User")? Identifier|IdentifierValueExpression|ArithmeticalExpression|BracketExpression|MSGVariables) COMMA?)+ CLOSEPARENTHESIS
	//;
	public TupleExpressionElements getTupleExpressionAccess() {
		return pTupleExpression;
	}
	
	public ParserRule getTupleExpressionRule() {
		return getTupleExpressionAccess().getRule();
	}
	
	//ReturnExpression:
	//    ReturnExpressionNoValue | ReturnExpressionValue
	//;
	public ReturnExpressionElements getReturnExpressionAccess() {
		return pReturnExpression;
	}
	
	public ParserRule getReturnExpressionRule() {
		return getReturnExpressionAccess().getRule();
	}
	
	//ReturnExpressionValue returns ecore::EString:
	//    RETURN NEW? (CryptographycFunctionsComparationExpresion|CryptographycFunctions|BracketExpression|SyntaxExpression|NumberExpression| "-" NumberExpression |TupleExpression| Identifier (OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression) COMMA?)* CLOSEPARENTHESIS)?|SingularType? Identifier |BOOLVALUE|IdentifierDotExpression (OPENPARENTHESIS ((Identifier|BracketExpression|IdentifierDotExpression) COMMA?)* CLOSEPARENTHESIS)? |ArithmeticalComparationExpression|ArithmeticalExpression|MSGVariables|BlockVariables|PayableExpression|TypeCastingExpression)
	//;
	public ReturnExpressionValueElements getReturnExpressionValueAccess() {
		return pReturnExpressionValue;
	}
	
	public ParserRule getReturnExpressionValueRule() {
		return getReturnExpressionValueAccess().getRule();
	}
	
	//ReturnExpressionNoValue returns ecore::EString:
	//    RETURN SEMICOLON
	//;
	public ReturnExpressionNoValueElements getReturnExpressionNoValueAccess() {
		return pReturnExpressionNoValue;
	}
	
	public ParserRule getReturnExpressionNoValueRule() {
		return getReturnExpressionNoValueAccess().getRule();
	}
	
	//CryptographycFunctionsComparationExpresion returns ecore::EString:
	//    (CryptographycFunctions|Identifier|IdentifierDotExpression) ("=="|"!=") (CryptographycFunctions|Identifier|ADDRESSEXPRESION|HexadecimalExpression|IdentifierDotExpression|SyntaxExpression|BOOLVALUE|NegationExpression|MSGSENDER)
	//;
	public CryptographycFunctionsComparationExpresionElements getCryptographycFunctionsComparationExpresionAccess() {
		return pCryptographycFunctionsComparationExpresion;
	}
	
	public ParserRule getCryptographycFunctionsComparationExpresionRule() {
		return getCryptographycFunctionsComparationExpresionAccess().getRule();
	}
	
	//ComparationExpression returns ecore::EString:
	//    (SyntaxExpression|NegationExpression) ("=="|"!=") (SyntaxExpression|NegationExpression)
	//;
	public ComparationExpressionElements getComparationExpressionAccess() {
		return pComparationExpression;
	}
	
	public ParserRule getComparationExpressionRule() {
		return getComparationExpressionAccess().getRule();
	}
	
	//ArithmeticalComparationExpression returns ecore::EString:
	//    (BOOLVALUE|NumberExpression|IncrementLoopExpression|DecrementLoopExpression|Identifier|MSGVariables|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression (DOT Identifier)*)  ("=="|"!="|'>'|">="|'<'|"<=")  (BOOLVALUE|NumberExpression|IncrementLoopExpression|DecrementLoopExpression|Identifier|MSGVariables|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression|TypeCastingExpression)
	//;
	public ArithmeticalComparationExpressionElements getArithmeticalComparationExpressionAccess() {
		return pArithmeticalComparationExpression;
	}
	
	public ParserRule getArithmeticalComparationExpressionRule() {
		return getArithmeticalComparationExpressionAccess().getRule();
	}
	
	//NumberExpression:
	//    (INT|FLOAT)
	//;
	public NumberExpressionElements getNumberExpressionAccess() {
		return pNumberExpression;
	}
	
	public ParserRule getNumberExpressionRule() {
		return getNumberExpressionAccess().getRule();
	}
	
	//ArithmeticalExpression returns ecore::EString:
	//    (NumberExpression|Identifier|MSGVALUE|MSGBALANCE|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression|TimeExpression|CoinExpression)  (('+'|'-'|'*'|'/'|'%'|"**")  (NumberExpression|Identifier|MSGVALUE|MSGBALANCE|BCKTIMESTAMP|BCKNUMBER|"now"|BracketExpression|IdentifierValueExpression|TimeExpression|CoinExpression))+
	//;
	public ArithmeticalExpressionElements getArithmeticalExpressionAccess() {
		return pArithmeticalExpression;
	}
	
	public ParserRule getArithmeticalExpressionRule() {
		return getArithmeticalExpressionAccess().getRule();
	}
	
	//IncrementLoopExpression returns ecore::EString:
	//    INT "++" | Identifier "++"
	//;
	public IncrementLoopExpressionElements getIncrementLoopExpressionAccess() {
		return pIncrementLoopExpression;
	}
	
	public ParserRule getIncrementLoopExpressionRule() {
		return getIncrementLoopExpressionAccess().getRule();
	}
	
	//DecrementLoopExpression returns ecore::EString:
	//    INT "--" | Identifier "--"
	//;
	public DecrementLoopExpressionElements getDecrementLoopExpressionAccess() {
		return pDecrementLoopExpression;
	}
	
	public ParserRule getDecrementLoopExpressionRule() {
		return getDecrementLoopExpressionAccess().getRule();
	}
	
	//BitwiseExpression returns ecore::EString:
	//    (INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "|" (INT|Identifier|IdentifierValueExpression|BitwiseExpression|TypeCastingExpression) | (INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "&" (INT|Identifier|IdentifierValueExpression|BitwiseExpression|TypeCastingExpression) | (INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "^" (INT|Identifier|IdentifierValueExpression|BitwiseExpression|TypeCastingExpression) | (INT|Identifier|IdentifierValueExpression|TypeCastingExpression) "~" (INT|IdentifierValueExpression|Identifier|BitwiseExpression|TypeCastingExpression)
	//;
	public BitwiseExpressionElements getBitwiseExpressionAccess() {
		return pBitwiseExpression;
	}
	
	public ParserRule getBitwiseExpressionRule() {
		return getBitwiseExpressionAccess().getRule();
	}
	
	//ShiftExpression returns ecore::EString:
	//    ((INT|Identifier) ">>" (INT|Identifier)  | (INT|Identifier) "<<" (INT|Identifier))
	//;
	public ShiftExpressionElements getShiftExpressionAccess() {
		return pShiftExpression;
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}
	
	//CallFunctionExpression returns ecore::EString:
	//    (IdentifierValueExpression|Identifier (OPENPARENTHESIS (Identifier) CLOSEPARENTHESIS)|Identifier)  (DOT Identifier)* OPENPARENTHESIS ((SyntaxExpression|ADDRESSEXPRESION|HexadecimalExpression|BlockVariables|MSGVariables| Identifier|IdentifierDotExpression|TypeCastingExpression|BracketExpression|NumberExpression|ArithmeticalExpression|ArithmeticalComparationExpression|AbyExpression|ParenthesisExpression|"now") COMMA? )* CLOSEPARENTHESIS
	//;
	public CallFunctionExpressionElements getCallFunctionExpressionAccess() {
		return pCallFunctionExpression;
	}
	
	public ParserRule getCallFunctionExpressionRule() {
		return getCallFunctionExpressionAccess().getRule();
	}
	
	//ParenthesisExpression returns ecore::EString:
	//    Identifier (OPENPARENTHESIS ((STRING|Identifier|IdentifierDotExpression|INT|BOOLVALUE|MSGVariables|HEXEXPRESSION|ADDRESSEXPRESION|"now"|TypeCastingExpression) COMMA?)* CLOSEPARENTHESIS) (DOT Expression)?
	//;
	public ParenthesisExpressionElements getParenthesisExpressionAccess() {
		return pParenthesisExpression;
	}
	
	public ParserRule getParenthesisExpressionRule() {
		return getParenthesisExpressionAccess().getRule();
	}
	
	//BracketExpression returns ecore::EString:
	//    Identifier ('[' (Identifier|Identifier '[' (Identifier|INT|BOOLVALUE|ADDRESSEXPRESION|HexadecimalExpression) ']'|IdentifierValueExpression|INT|BOOLVALUE|MSGSENDER|HEXEXPRESSION|ADDRESSEXPRESION) ']')+ (DOT Identifier)*
	//;
	public BracketExpressionElements getBracketExpressionAccess() {
		return pBracketExpression;
	}
	
	public ParserRule getBracketExpressionRule() {
		return getBracketExpressionAccess().getRule();
	}
	
	//IdentifierValueExpression returns ecore::EString:
	//    Identifier DOT Identifier
	//;
	public IdentifierValueExpressionElements getIdentifierValueExpressionAccess() {
		return pIdentifierValueExpression;
	}
	
	public ParserRule getIdentifierValueExpressionRule() {
		return getIdentifierValueExpressionAccess().getRule();
	}
	
	//IdentifierDotExpression returns ecore::EString:
	//    Identifier DOT Identifier (DOT Identifier)*
	//;
	public IdentifierDotExpressionElements getIdentifierDotExpressionAccess() {
		return pIdentifierDotExpression;
	}
	
	public ParserRule getIdentifierDotExpressionRule() {
		return getIdentifierDotExpressionAccess().getRule();
	}
	
	//AssemblyExpression returns ecore::EString:
	//    "assembly" OPENKEY ((("let"? Identifier ":=" (Identifier|NumberExpression|ArithmeticalExpression|CallFunctionExpression)) | CallFunctionExpression)  EOLINE?)* CLOSEKEY
	//;
	public AssemblyExpressionElements getAssemblyExpressionAccess() {
		return pAssemblyExpression;
	}
	
	public ParserRule getAssemblyExpressionRule() {
		return getAssemblyExpressionAccess().getRule();
	}
	
	//RevertExpression returns ecore::EString:
	//    "revert" (OPENPARENTHESIS SyntaxExpression? CLOSEPARENTHESIS | ParenthesisExpression)
	//;
	public RevertExpressionElements getRevertExpressionAccess() {
		return pRevertExpression;
	}
	
	public ParserRule getRevertExpressionRule() {
		return getRevertExpressionAccess().getRule();
	}
	
	//DeleteExpression returns ecore::EString:
	//    "delete" (Identifier|BracketExpression)
	//;
	public DeleteExpressionElements getDeleteExpressionAccess() {
		return pDeleteExpression;
	}
	
	public ParserRule getDeleteExpressionRule() {
		return getDeleteExpressionAccess().getRule();
	}
	
	//StructInicializationKeyExpression returns ecore::EString:
	//    OPENPARENTHESIS (OPENKEY (Identifier ':' (Identifier|SyntaxExpression|NumberExpression|BOOLVALUE|BracketExpression|ADDRESSEXPRESION|HexadecimalExpression|IdentifierDotExpression) COMMA?)* CLOSEKEY) CLOSEPARENTHESIS
	//;
	public StructInicializationKeyExpressionElements getStructInicializationKeyExpressionAccess() {
		return pStructInicializationKeyExpression;
	}
	
	public ParserRule getStructInicializationKeyExpressionRule() {
		return getStructInicializationKeyExpressionAccess().getRule();
	}
	
	//LogicalComparationExpression returns ecore::EString:
	//    AndExpression|OrExpression
	//;
	public LogicalComparationExpressionElements getLogicalComparationExpressionAccess() {
		return pLogicalComparationExpression;
	}
	
	public ParserRule getLogicalComparationExpressionRule() {
		return getLogicalComparationExpressionAccess().getRule();
	}
	
	//AndExpression returns ecore::EString:
	//    (NegationExpression|ArithmeticalComparationExpression|ComparationExpression|Identifier|BracketExpression|IdentifierDotExpression) "&&" ((OPENPARENTHESIS LogicalComparationExpression|ComparationExpression CLOSEPARENTHESIS)|LogicalComparationExpression|ComparationExpression|ArithmeticalComparationExpression|Identifier)
	//;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//OrExpression returns ecore::EString:
	//    (NegationExpression|ArithmeticalComparationExpression|ComparationExpression|Identifier|BracketExpression|IdentifierDotExpression) "||" ((OPENPARENTHESIS LogicalComparationExpression CLOSEPARENTHESIS)|ComparationExpression|ArithmeticalComparationExpression|Identifier)
	//;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//Condition:
	//    IF OPENPARENTHESIS condition=(CryptographycFunctionsComparationExpresion|LogicalComparationExpression|ArithmeticalComparationExpression|ComparationExpression|BracketExpression|IdentifierValueExpression|NegationExpression|CallFunctionExpression|BoolValueExpression) CLOSEPARENTHESIS OPENKEY EOLINE?
	//        (restriction += RestrictionClause |properties += Properties| expressions += (Expression|BREAK|CONTINUE) | conditionalExpr += Condition | undeterminedloops += UnDeterminedLoop  | determinedloops += ForLoop| (EMIT event += [Event] OPENPARENTHESIS inputParamsEvent+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?))*
	//    CLOSEKEY EOLINE?
	//    (ELSE OPENKEY EOLINE?
	//        (restrictionElse += RestrictionClause |propertiesElse += Properties|expressionsElse += (Expression|BREAK|CONTINUE) | conditionalExprElse += Condition| undeterminedloopsElse += UnDeterminedLoop  | determinedloopsElse += ForLoop | (EMIT eventElse += [Event] OPENPARENTHESIS inputParamsEventElse+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE?))*
	//    CLOSEKEY EOLINE?)?
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//UnDeterminedLoop:
	//    WhileLoop|DoWhileLoop
	//;
	public UnDeterminedLoopElements getUnDeterminedLoopAccess() {
		return pUnDeterminedLoop;
	}
	
	public ParserRule getUnDeterminedLoopRule() {
		return getUnDeterminedLoopAccess().getRule();
	}
	
	//WhileLoop:
	//    "while" OPENPARENTHESIS condition=(AndExpression|OrExpression|ArithmeticalComparationExpression|ComparationExpression|IdentifierValueExpression|CallFunctionExpression|BoolValueExpression) CLOSEPARENTHESIS OPENKEY EOLINE?
	//        gasrestriction += RestrictionGas
	//        (restriction += RestrictionClause |properties += Properties| conditions += Condition | undeterminedloops += UnDeterminedLoop | determinedloops += ForLoop | (EMIT event += [Event] OPENPARENTHESIS inputParams+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE) | expressions += (Expression|BREAK|CONTINUE))*
	//    CLOSEKEY EOLINE?
	//;
	public WhileLoopElements getWhileLoopAccess() {
		return pWhileLoop;
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//ForLoop:
	//    "for" OPENPARENTHESIS ((typeCounter = ("uint"|"int") (nameCounter=Identifier) "=" value = INT)|(typeCounter = ("char") (nameCounter=Identifier) "=" valueCounter = CHAR )) SEMICOLON condition=ArithmeticalComparationExpression SEMICOLON (IncrementLoopExpression|DecrementLoopExpression) CLOSEPARENTHESIS OPENKEY EOLINE?
	//        gasrestriction += RestrictionGas
	//        (restriction += RestrictionClause |properties += Properties| conditions += Condition |  undeterminedloops += UnDeterminedLoop  | determinedloops += ForLoop | expressions += (Expression|BREAK|CONTINUE)EOLINE?
	//        )*
	//    CLOSEKEY EOLINE?
	//;
	public ForLoopElements getForLoopAccess() {
		return pForLoop;
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}
	
	//DoWhileLoop:
	//    "do"  OPENKEY EOLINE?
	//        gasrestriction += RestrictionGas
	//        (restriction += RestrictionClause  | conditions += Condition| undeterminedloops += UnDeterminedLoop | determinedloops += ForLoop | (EMIT event += [Event] OPENPARENTHESIS inputParams+=InputParam* CLOSEPARENTHESIS SEMICOLON EOLINE) | expressions += (Expression|BREAK|CONTINUE))*
	//    CLOSEKEY  "while" OPENPARENTHESIS condition=(AndExpression|OrExpression|ArithmeticalComparationExpression|ComparationExpression|CallFunctionExpression|BoolValueExpression) CLOSEPARENTHESIS EOLINE?
	//;
	public DoWhileLoopElements getDoWhileLoopAccess() {
		return pDoWhileLoop;
	}
	
	public ParserRule getDoWhileLoopRule() {
		return getDoWhileLoopAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
